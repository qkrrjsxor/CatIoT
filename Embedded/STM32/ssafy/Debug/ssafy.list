
ssafy.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004c3c  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000268  08004d48  08004d48  00005d48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004fb0  08004fb0  00006068  2**0
                  CONTENTS
  4 .ARM          00000008  08004fb0  08004fb0  00005fb0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004fb8  08004fb8  00006068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004fb8  08004fb8  00005fb8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004fbc  08004fbc  00005fbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08004fc0  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000294  20000068  08005028  00006068  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200002fc  08005028  000062fc  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006068  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d292  00000000  00000000  00006091  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000022a2  00000000  00000000  00013323  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d48  00000000  00000000  000155c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a4d  00000000  00000000  00016310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001819b  00000000  00000000  00016d5d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f9b9  00000000  00000000  0002eef8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c29e  00000000  00000000  0003e8b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cab4f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004094  00000000  00000000  000cab94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000061  00000000  00000000  000cec28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000068 	.word	0x20000068
 8000128:	00000000 	.word	0x00000000
 800012c:	08004d30 	.word	0x08004d30

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000006c 	.word	0x2000006c
 8000148:	08004d30 	.word	0x08004d30

0800014c <strlen>:
 800014c:	4603      	mov	r3, r0
 800014e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000152:	2a00      	cmp	r2, #0
 8000154:	d1fb      	bne.n	800014e <strlen+0x2>
 8000156:	1a18      	subs	r0, r3, r0
 8000158:	3801      	subs	r0, #1
 800015a:	4770      	bx	lr

0800015c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800015c:	b580      	push	{r7, lr}
 800015e:	b088      	sub	sp, #32
 8000160:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000162:	f107 0310 	add.w	r3, r7, #16
 8000166:	2200      	movs	r2, #0
 8000168:	601a      	str	r2, [r3, #0]
 800016a:	605a      	str	r2, [r3, #4]
 800016c:	609a      	str	r2, [r3, #8]
 800016e:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000170:	4b3d      	ldr	r3, [pc, #244]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000172:	699b      	ldr	r3, [r3, #24]
 8000174:	4a3c      	ldr	r2, [pc, #240]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000176:	f043 0310 	orr.w	r3, r3, #16
 800017a:	6193      	str	r3, [r2, #24]
 800017c:	4b3a      	ldr	r3, [pc, #232]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800017e:	699b      	ldr	r3, [r3, #24]
 8000180:	f003 0310 	and.w	r3, r3, #16
 8000184:	60fb      	str	r3, [r7, #12]
 8000186:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000188:	4b37      	ldr	r3, [pc, #220]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800018a:	699b      	ldr	r3, [r3, #24]
 800018c:	4a36      	ldr	r2, [pc, #216]	@ (8000268 <MX_GPIO_Init+0x10c>)
 800018e:	f043 0320 	orr.w	r3, r3, #32
 8000192:	6193      	str	r3, [r2, #24]
 8000194:	4b34      	ldr	r3, [pc, #208]	@ (8000268 <MX_GPIO_Init+0x10c>)
 8000196:	699b      	ldr	r3, [r3, #24]
 8000198:	f003 0320 	and.w	r3, r3, #32
 800019c:	60bb      	str	r3, [r7, #8]
 800019e:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80001a0:	4b31      	ldr	r3, [pc, #196]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001a2:	699b      	ldr	r3, [r3, #24]
 80001a4:	4a30      	ldr	r2, [pc, #192]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001a6:	f043 0304 	orr.w	r3, r3, #4
 80001aa:	6193      	str	r3, [r2, #24]
 80001ac:	4b2e      	ldr	r3, [pc, #184]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001ae:	699b      	ldr	r3, [r3, #24]
 80001b0:	f003 0304 	and.w	r3, r3, #4
 80001b4:	607b      	str	r3, [r7, #4]
 80001b6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80001b8:	4b2b      	ldr	r3, [pc, #172]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001ba:	699b      	ldr	r3, [r3, #24]
 80001bc:	4a2a      	ldr	r2, [pc, #168]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001be:	f043 0308 	orr.w	r3, r3, #8
 80001c2:	6193      	str	r3, [r2, #24]
 80001c4:	4b28      	ldr	r3, [pc, #160]	@ (8000268 <MX_GPIO_Init+0x10c>)
 80001c6:	699b      	ldr	r3, [r3, #24]
 80001c8:	f003 0308 	and.w	r3, r3, #8
 80001cc:	603b      	str	r3, [r7, #0]
 80001ce:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_3, GPIO_PIN_RESET);
 80001d0:	2200      	movs	r2, #0
 80001d2:	2108      	movs	r1, #8
 80001d4:	4825      	ldr	r0, [pc, #148]	@ (800026c <MX_GPIO_Init+0x110>)
 80001d6:	f001 f9c2 	bl	800155e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80001da:	2200      	movs	r2, #0
 80001dc:	2120      	movs	r1, #32
 80001de:	4824      	ldr	r0, [pc, #144]	@ (8000270 <MX_GPIO_Init+0x114>)
 80001e0:	f001 f9bd 	bl	800155e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 80001e4:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80001e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80001ea:	4b22      	ldr	r3, [pc, #136]	@ (8000274 <MX_GPIO_Init+0x118>)
 80001ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80001ee:	2300      	movs	r3, #0
 80001f0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80001f2:	f107 0310 	add.w	r3, r7, #16
 80001f6:	4619      	mov	r1, r3
 80001f8:	481c      	ldr	r0, [pc, #112]	@ (800026c <MX_GPIO_Init+0x110>)
 80001fa:	f001 f815 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 80001fe:	2304      	movs	r3, #4
 8000200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000202:	2300      	movs	r3, #0
 8000204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000206:	2300      	movs	r3, #0
 8000208:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800020a:	f107 0310 	add.w	r3, r7, #16
 800020e:	4619      	mov	r1, r3
 8000210:	4816      	ldr	r0, [pc, #88]	@ (800026c <MX_GPIO_Init+0x110>)
 8000212:	f001 f809 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000216:	2308      	movs	r3, #8
 8000218:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800021a:	2301      	movs	r3, #1
 800021c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800021e:	2300      	movs	r3, #0
 8000220:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000222:	2302      	movs	r3, #2
 8000224:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000226:	f107 0310 	add.w	r3, r7, #16
 800022a:	4619      	mov	r1, r3
 800022c:	480f      	ldr	r0, [pc, #60]	@ (800026c <MX_GPIO_Init+0x110>)
 800022e:	f000 fffb 	bl	8001228 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8000232:	2320      	movs	r3, #32
 8000234:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000236:	2301      	movs	r3, #1
 8000238:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800023a:	2300      	movs	r3, #0
 800023c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800023e:	2302      	movs	r3, #2
 8000240:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8000242:	f107 0310 	add.w	r3, r7, #16
 8000246:	4619      	mov	r1, r3
 8000248:	4809      	ldr	r0, [pc, #36]	@ (8000270 <MX_GPIO_Init+0x114>)
 800024a:	f000 ffed 	bl	8001228 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800024e:	2200      	movs	r2, #0
 8000250:	2100      	movs	r1, #0
 8000252:	2028      	movs	r0, #40	@ 0x28
 8000254:	f000 feff 	bl	8001056 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000258:	2028      	movs	r0, #40	@ 0x28
 800025a:	f000 ff18 	bl	800108e <HAL_NVIC_EnableIRQ>

}
 800025e:	bf00      	nop
 8000260:	3720      	adds	r7, #32
 8000262:	46bd      	mov	sp, r7
 8000264:	bd80      	pop	{r7, pc}
 8000266:	bf00      	nop
 8000268:	40021000 	.word	0x40021000
 800026c:	40011000 	.word	0x40011000
 8000270:	40010800 	.word	0x40010800
 8000274:	10110000 	.word	0x10110000

08000278 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000278:	b580      	push	{r7, lr}
 800027a:	b084      	sub	sp, #16
 800027c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800027e:	f000 fd8d 	bl	8000d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000282:	f000 f8c1 	bl	8000408 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000286:	f7ff ff69 	bl	800015c <MX_GPIO_Init>
  MX_USART1_UART_Init();
 800028a:	f000 fc0b 	bl	8000aa4 <MX_USART1_UART_Init>
  MX_USART3_UART_Init();
 800028e:	f000 fc5d 	bl	8000b4c <MX_USART3_UART_Init>
  MX_TIM3_Init();
 8000292:	f000 fb37 	bl	8000904 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000296:	f000 fc2f 	bl	8000af8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2); // Add PWM Servo Motor
 800029a:	2104      	movs	r1, #4
 800029c:	484c      	ldr	r0, [pc, #304]	@ (80003d0 <main+0x158>)
 800029e:	f001 fe51 	bl	8001f44 <HAL_TIM_PWM_Start>
  HX711_Init();
 80002a2:	f000 f8f3 	bl	800048c <HX711_Init>

  // ESP-01 Setting
  send_ESP("AT\r\n", "");
 80002a6:	494b      	ldr	r1, [pc, #300]	@ (80003d4 <main+0x15c>)
 80002a8:	484b      	ldr	r0, [pc, #300]	@ (80003d8 <main+0x160>)
 80002aa:	f000 f987 	bl	80005bc <send_ESP>
  HAL_Delay(1000);
 80002ae:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80002b2:	f000 fdd5 	bl	8000e60 <HAL_Delay>
  send_ESP("AT+CWMODE=1\r\n", "");
 80002b6:	4947      	ldr	r1, [pc, #284]	@ (80003d4 <main+0x15c>)
 80002b8:	4848      	ldr	r0, [pc, #288]	@ (80003dc <main+0x164>)
 80002ba:	f000 f97f 	bl	80005bc <send_ESP>
  HAL_Delay(5000);
 80002be:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002c2:	f000 fdcd 	bl	8000e60 <HAL_Delay>
  send_ESP("AT+CWJAP=\"PI_AP\",\"12341234\"\r\n", "");
 80002c6:	4943      	ldr	r1, [pc, #268]	@ (80003d4 <main+0x15c>)
 80002c8:	4845      	ldr	r0, [pc, #276]	@ (80003e0 <main+0x168>)
 80002ca:	f000 f977 	bl	80005bc <send_ESP>
  HAL_Delay(5000);
 80002ce:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002d2:	f000 fdc5 	bl	8000e60 <HAL_Delay>
  send_ESP("AT+CIPSTART=\"TCP\",\"70.12.108.100\",8080\r\n", "");
 80002d6:	493f      	ldr	r1, [pc, #252]	@ (80003d4 <main+0x15c>)
 80002d8:	4842      	ldr	r0, [pc, #264]	@ (80003e4 <main+0x16c>)
 80002da:	f000 f96f 	bl	80005bc <send_ESP>
  HAL_Delay(5000);
 80002de:	f241 3088 	movw	r0, #5000	@ 0x1388
 80002e2:	f000 fdbd 	bl	8000e60 <HAL_Delay>

	// AT+CIPSEND : Data length
//	send_ESP("AT+CIPSEND=8\r\n", "123456\r\n");

	// ready to receive data
	receive_ESP(1);
 80002e6:	2001      	movs	r0, #1
 80002e8:	f000 f9a4 	bl	8000634 <receive_ESP>
//	HAL_Delay(1000);

//	// if data request
	if (servo == 1000) {
 80002ec:	4b3e      	ldr	r3, [pc, #248]	@ (80003e8 <main+0x170>)
 80002ee:	681b      	ldr	r3, [r3, #0]
 80002f0:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80002f4:	d13e      	bne.n	8000374 <main+0xfc>
		send_ESP("AT+CIPSEND=4\r\n", "OK\r\n");
 80002f6:	493d      	ldr	r1, [pc, #244]	@ (80003ec <main+0x174>)
 80002f8:	483d      	ldr	r0, [pc, #244]	@ (80003f0 <main+0x178>)
 80002fa:	f000 f95f 	bl	80005bc <send_ESP>
		HAL_Delay(1000);
 80002fe:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000302:	f000 fdad 	bl	8000e60 <HAL_Delay>

		int32_t weight = HX711_Read();
 8000306:	f000 f8ed 	bl	80004e4 <HX711_Read>
 800030a:	60f8      	str	r0, [r7, #12]
		weight = (weight * 500) / 8388607;
 800030c:	68fb      	ldr	r3, [r7, #12]
 800030e:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000312:	fb02 f303 	mul.w	r3, r2, r3
 8000316:	4a37      	ldr	r2, [pc, #220]	@ (80003f4 <main+0x17c>)
 8000318:	fb82 1203 	smull	r1, r2, r2, r3
 800031c:	441a      	add	r2, r3
 800031e:	1592      	asrs	r2, r2, #22
 8000320:	17db      	asrs	r3, r3, #31
 8000322:	1ad3      	subs	r3, r2, r3
 8000324:	60fb      	str	r3, [r7, #12]
		char str[9];
		sprintf(str, "%ld\r\n", weight);
 8000326:	463b      	mov	r3, r7
 8000328:	68fa      	ldr	r2, [r7, #12]
 800032a:	4933      	ldr	r1, [pc, #204]	@ (80003f8 <main+0x180>)
 800032c:	4618      	mov	r0, r3
 800032e:	f003 fc8f 	bl	8003c50 <siprintf>

		if (weight >= 0 && weight <= 9) {
 8000332:	68fb      	ldr	r3, [r7, #12]
 8000334:	2b00      	cmp	r3, #0
 8000336:	db08      	blt.n	800034a <main+0xd2>
 8000338:	68fb      	ldr	r3, [r7, #12]
 800033a:	2b09      	cmp	r3, #9
 800033c:	dc05      	bgt.n	800034a <main+0xd2>
			send_ESP("AT+CIPSEND=3\r\n", str);
 800033e:	463b      	mov	r3, r7
 8000340:	4619      	mov	r1, r3
 8000342:	482e      	ldr	r0, [pc, #184]	@ (80003fc <main+0x184>)
 8000344:	f000 f93a 	bl	80005bc <send_ESP>
 8000348:	e010      	b.n	800036c <main+0xf4>
		} else if (weight >= 10 && weight <= 99) {
 800034a:	68fb      	ldr	r3, [r7, #12]
 800034c:	2b09      	cmp	r3, #9
 800034e:	dd08      	ble.n	8000362 <main+0xea>
 8000350:	68fb      	ldr	r3, [r7, #12]
 8000352:	2b63      	cmp	r3, #99	@ 0x63
 8000354:	dc05      	bgt.n	8000362 <main+0xea>
			send_ESP("AT+CIPSEND=4\r\n", str);
 8000356:	463b      	mov	r3, r7
 8000358:	4619      	mov	r1, r3
 800035a:	4825      	ldr	r0, [pc, #148]	@ (80003f0 <main+0x178>)
 800035c:	f000 f92e 	bl	80005bc <send_ESP>
 8000360:	e004      	b.n	800036c <main+0xf4>
		} else {
			send_ESP("AT+CIPSEND=5\r\n", str);
 8000362:	463b      	mov	r3, r7
 8000364:	4619      	mov	r1, r3
 8000366:	4826      	ldr	r0, [pc, #152]	@ (8000400 <main+0x188>)
 8000368:	f000 f928 	bl	80005bc <send_ESP>
		}

//		HAL_UART_Transmit(&huart2, str, strlen(str), 32);
		servo = 0;
 800036c:	4b1e      	ldr	r3, [pc, #120]	@ (80003e8 <main+0x170>)
 800036e:	2200      	movs	r2, #0
 8000370:	601a      	str	r2, [r3, #0]
		continue;
 8000372:	e02c      	b.n	80003ce <main+0x156>
	}
	// if meal
	if (servo > 0) {
 8000374:	4b1c      	ldr	r3, [pc, #112]	@ (80003e8 <main+0x170>)
 8000376:	681b      	ldr	r3, [r3, #0]
 8000378:	2b00      	cmp	r3, #0
 800037a:	ddb4      	ble.n	80002e6 <main+0x6e>

		send_ESP("AT+CIPSEND=4\r\n", "OK\r\n");
 800037c:	491b      	ldr	r1, [pc, #108]	@ (80003ec <main+0x174>)
 800037e:	481c      	ldr	r0, [pc, #112]	@ (80003f0 <main+0x178>)
 8000380:	f000 f91c 	bl	80005bc <send_ESP>
		HAL_Delay(1000);
 8000384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8000388:	f000 fd6a 	bl	8000e60 <HAL_Delay>

		while (servo > 0) {
 800038c:	e01a      	b.n	80003c4 <main+0x14c>
			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 55);
 800038e:	4b10      	ldr	r3, [pc, #64]	@ (80003d0 <main+0x158>)
 8000390:	681b      	ldr	r3, [r3, #0]
 8000392:	2237      	movs	r2, #55	@ 0x37
 8000394:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(500);
 8000396:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800039a:	f000 fd61 	bl	8000e60 <HAL_Delay>

			__HAL_TIM_SetCompare(&htim3, TIM_CHANNEL_2, 95);
 800039e:	4b0c      	ldr	r3, [pc, #48]	@ (80003d0 <main+0x158>)
 80003a0:	681b      	ldr	r3, [r3, #0]
 80003a2:	225f      	movs	r2, #95	@ 0x5f
 80003a4:	639a      	str	r2, [r3, #56]	@ 0x38
			HAL_Delay(500);
 80003a6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80003aa:	f000 fd59 	bl	8000e60 <HAL_Delay>

			servo -= 10;
 80003ae:	4b0e      	ldr	r3, [pc, #56]	@ (80003e8 <main+0x170>)
 80003b0:	681b      	ldr	r3, [r3, #0]
 80003b2:	3b0a      	subs	r3, #10
 80003b4:	4a0c      	ldr	r2, [pc, #48]	@ (80003e8 <main+0x170>)
 80003b6:	6013      	str	r3, [r2, #0]
			printf("%d\r\n", servo);
 80003b8:	4b0b      	ldr	r3, [pc, #44]	@ (80003e8 <main+0x170>)
 80003ba:	681b      	ldr	r3, [r3, #0]
 80003bc:	4619      	mov	r1, r3
 80003be:	4811      	ldr	r0, [pc, #68]	@ (8000404 <main+0x18c>)
 80003c0:	f003 fc34 	bl	8003c2c <iprintf>
		while (servo > 0) {
 80003c4:	4b08      	ldr	r3, [pc, #32]	@ (80003e8 <main+0x170>)
 80003c6:	681b      	ldr	r3, [r3, #0]
 80003c8:	2b00      	cmp	r3, #0
 80003ca:	dce0      	bgt.n	800038e <main+0x116>
		}

		continue;
 80003cc:	bf00      	nop
	receive_ESP(1);
 80003ce:	e78a      	b.n	80002e6 <main+0x6e>
 80003d0:	2000008c 	.word	0x2000008c
 80003d4:	08004d48 	.word	0x08004d48
 80003d8:	08004d4c 	.word	0x08004d4c
 80003dc:	08004d54 	.word	0x08004d54
 80003e0:	08004d64 	.word	0x08004d64
 80003e4:	08004d84 	.word	0x08004d84
 80003e8:	20000084 	.word	0x20000084
 80003ec:	08004db0 	.word	0x08004db0
 80003f0:	08004db8 	.word	0x08004db8
 80003f4:	80000101 	.word	0x80000101
 80003f8:	08004dc8 	.word	0x08004dc8
 80003fc:	08004dd0 	.word	0x08004dd0
 8000400:	08004de0 	.word	0x08004de0
 8000404:	08004df0 	.word	0x08004df0

08000408 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000408:	b580      	push	{r7, lr}
 800040a:	b090      	sub	sp, #64	@ 0x40
 800040c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800040e:	f107 0318 	add.w	r3, r7, #24
 8000412:	2228      	movs	r2, #40	@ 0x28
 8000414:	2100      	movs	r1, #0
 8000416:	4618      	mov	r0, r3
 8000418:	f003 fc7d 	bl	8003d16 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800041c:	1d3b      	adds	r3, r7, #4
 800041e:	2200      	movs	r2, #0
 8000420:	601a      	str	r2, [r3, #0]
 8000422:	605a      	str	r2, [r3, #4]
 8000424:	609a      	str	r2, [r3, #8]
 8000426:	60da      	str	r2, [r3, #12]
 8000428:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800042a:	2302      	movs	r3, #2
 800042c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800042e:	2301      	movs	r3, #1
 8000430:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000432:	2310      	movs	r3, #16
 8000434:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000436:	2302      	movs	r3, #2
 8000438:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800043a:	2300      	movs	r3, #0
 800043c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800043e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000442:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000444:	f107 0318 	add.w	r3, r7, #24
 8000448:	4618      	mov	r0, r3
 800044a:	f001 f8c3 	bl	80015d4 <HAL_RCC_OscConfig>
 800044e:	4603      	mov	r3, r0
 8000450:	2b00      	cmp	r3, #0
 8000452:	d001      	beq.n	8000458 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000454:	f000 f956 	bl	8000704 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000458:	230f      	movs	r3, #15
 800045a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800045c:	2302      	movs	r3, #2
 800045e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000460:	2300      	movs	r3, #0
 8000462:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000464:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000468:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800046a:	2300      	movs	r3, #0
 800046c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800046e:	1d3b      	adds	r3, r7, #4
 8000470:	2102      	movs	r1, #2
 8000472:	4618      	mov	r0, r3
 8000474:	f001 fb30 	bl	8001ad8 <HAL_RCC_ClockConfig>
 8000478:	4603      	mov	r3, r0
 800047a:	2b00      	cmp	r3, #0
 800047c:	d001      	beq.n	8000482 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800047e:	f000 f941 	bl	8000704 <Error_Handler>
  }
}
 8000482:	bf00      	nop
 8000484:	3740      	adds	r7, #64	@ 0x40
 8000486:	46bd      	mov	sp, r7
 8000488:	bd80      	pop	{r7, pc}
	...

0800048c <HX711_Init>:

/* USER CODE BEGIN 4 */
// Load Cell
void HX711_Init(void)
{
 800048c:	b580      	push	{r7, lr}
 800048e:	b084      	sub	sp, #16
 8000490:	af00      	add	r7, sp, #0
    // GPIO 초기?��
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000492:	463b      	mov	r3, r7
 8000494:	2200      	movs	r2, #0
 8000496:	601a      	str	r2, [r3, #0]
 8000498:	605a      	str	r2, [r3, #4]
 800049a:	609a      	str	r2, [r3, #8]
 800049c:	60da      	str	r2, [r3, #12]

    // SCK ?? ?��?��
    GPIO_InitStruct.Pin = HX711_SCK_PIN;
 800049e:	2308      	movs	r3, #8
 80004a0:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80004a2:	2301      	movs	r3, #1
 80004a4:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004a6:	2300      	movs	r3, #0
 80004a8:	60bb      	str	r3, [r7, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80004aa:	2302      	movs	r3, #2
 80004ac:	60fb      	str	r3, [r7, #12]
    HAL_GPIO_Init(HX711_SCK_PORT, &GPIO_InitStruct);
 80004ae:	463b      	mov	r3, r7
 80004b0:	4619      	mov	r1, r3
 80004b2:	480b      	ldr	r0, [pc, #44]	@ (80004e0 <HX711_Init+0x54>)
 80004b4:	f000 feb8 	bl	8001228 <HAL_GPIO_Init>

    // DT ?? ?��?��
    GPIO_InitStruct.Pin = HX711_DT_PIN;
 80004b8:	2304      	movs	r3, #4
 80004ba:	603b      	str	r3, [r7, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80004bc:	2300      	movs	r3, #0
 80004be:	607b      	str	r3, [r7, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80004c0:	2300      	movs	r3, #0
 80004c2:	60bb      	str	r3, [r7, #8]
    HAL_GPIO_Init(HX711_DT_PORT, &GPIO_InitStruct);
 80004c4:	463b      	mov	r3, r7
 80004c6:	4619      	mov	r1, r3
 80004c8:	4805      	ldr	r0, [pc, #20]	@ (80004e0 <HX711_Init+0x54>)
 80004ca:	f000 fead 	bl	8001228 <HAL_GPIO_Init>

    // SCK ???�� LOW�??? ?��?��
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 80004ce:	2200      	movs	r2, #0
 80004d0:	2108      	movs	r1, #8
 80004d2:	4803      	ldr	r0, [pc, #12]	@ (80004e0 <HX711_Init+0x54>)
 80004d4:	f001 f843 	bl	800155e <HAL_GPIO_WritePin>
}
 80004d8:	bf00      	nop
 80004da:	3710      	adds	r7, #16
 80004dc:	46bd      	mov	sp, r7
 80004de:	bd80      	pop	{r7, pc}
 80004e0:	40011000 	.word	0x40011000

080004e4 <HX711_Read>:

int32_t HX711_Read(void)
{
 80004e4:	b580      	push	{r7, lr}
 80004e6:	b082      	sub	sp, #8
 80004e8:	af00      	add	r7, sp, #0
    int32_t count = 0;
 80004ea:	2300      	movs	r3, #0
 80004ec:	607b      	str	r3, [r7, #4]
    uint8_t i;

    // ?��?��?�� �???�??? ??�???
    while (HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN) == GPIO_PIN_SET);
 80004ee:	bf00      	nop
 80004f0:	2104      	movs	r1, #4
 80004f2:	481a      	ldr	r0, [pc, #104]	@ (800055c <HX711_Read+0x78>)
 80004f4:	f001 f81c 	bl	8001530 <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	2b01      	cmp	r3, #1
 80004fc:	d0f8      	beq.n	80004f0 <HX711_Read+0xc>

    for (i = 0; i < 24; i++)
 80004fe:	2300      	movs	r3, #0
 8000500:	70fb      	strb	r3, [r7, #3]
 8000502:	e019      	b.n	8000538 <HX711_Read+0x54>
    {
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 8000504:	2201      	movs	r2, #1
 8000506:	2108      	movs	r1, #8
 8000508:	4814      	ldr	r0, [pc, #80]	@ (800055c <HX711_Read+0x78>)
 800050a:	f001 f828 	bl	800155e <HAL_GPIO_WritePin>
        count = count << 1;
 800050e:	687b      	ldr	r3, [r7, #4]
 8000510:	005b      	lsls	r3, r3, #1
 8000512:	607b      	str	r3, [r7, #4]
        HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000514:	2200      	movs	r2, #0
 8000516:	2108      	movs	r1, #8
 8000518:	4810      	ldr	r0, [pc, #64]	@ (800055c <HX711_Read+0x78>)
 800051a:	f001 f820 	bl	800155e <HAL_GPIO_WritePin>
        if (HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN))
 800051e:	2104      	movs	r1, #4
 8000520:	480e      	ldr	r0, [pc, #56]	@ (800055c <HX711_Read+0x78>)
 8000522:	f001 f805 	bl	8001530 <HAL_GPIO_ReadPin>
 8000526:	4603      	mov	r3, r0
 8000528:	2b00      	cmp	r3, #0
 800052a:	d002      	beq.n	8000532 <HX711_Read+0x4e>
            count++;
 800052c:	687b      	ldr	r3, [r7, #4]
 800052e:	3301      	adds	r3, #1
 8000530:	607b      	str	r3, [r7, #4]
    for (i = 0; i < 24; i++)
 8000532:	78fb      	ldrb	r3, [r7, #3]
 8000534:	3301      	adds	r3, #1
 8000536:	70fb      	strb	r3, [r7, #3]
 8000538:	78fb      	ldrb	r3, [r7, #3]
 800053a:	2b17      	cmp	r3, #23
 800053c:	d9e2      	bls.n	8000504 <HX711_Read+0x20>
    }

    // 추�??��?�� ?��?�� ?��?��
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_SET);
 800053e:	2201      	movs	r2, #1
 8000540:	2108      	movs	r1, #8
 8000542:	4806      	ldr	r0, [pc, #24]	@ (800055c <HX711_Read+0x78>)
 8000544:	f001 f80b 	bl	800155e <HAL_GPIO_WritePin>
//    count = count ^ 0x800000;  // �????�� 비트 ?��?��
    HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, GPIO_PIN_RESET);
 8000548:	2200      	movs	r2, #0
 800054a:	2108      	movs	r1, #8
 800054c:	4803      	ldr	r0, [pc, #12]	@ (800055c <HX711_Read+0x78>)
 800054e:	f001 f806 	bl	800155e <HAL_GPIO_WritePin>

    return count;
 8000552:	687b      	ldr	r3, [r7, #4]
}
 8000554:	4618      	mov	r0, r3
 8000556:	3708      	adds	r7, #8
 8000558:	46bd      	mov	sp, r7
 800055a:	bd80      	pop	{r7, pc}
 800055c:	40011000 	.word	0x40011000

08000560 <_read>:

int _read(int file, char *ptr, int len)
{
 8000560:	b580      	push	{r7, lr}
 8000562:	b084      	sub	sp, #16
 8000564:	af00      	add	r7, sp, #0
 8000566:	60f8      	str	r0, [r7, #12]
 8000568:	60b9      	str	r1, [r7, #8]
 800056a:	607a      	str	r2, [r7, #4]
	HAL_UART_Receive(&huart2, (uint8_t*)ptr, 1, 0xFFFF);
 800056c:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8000570:	2201      	movs	r2, #1
 8000572:	68b9      	ldr	r1, [r7, #8]
 8000574:	4806      	ldr	r0, [pc, #24]	@ (8000590 <_read+0x30>)
 8000576:	f002 fc2c 	bl	8002dd2 <HAL_UART_Receive>
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, 1, 100);
 800057a:	2364      	movs	r3, #100	@ 0x64
 800057c:	2201      	movs	r2, #1
 800057e:	68b9      	ldr	r1, [r7, #8]
 8000580:	4803      	ldr	r0, [pc, #12]	@ (8000590 <_read+0x30>)
 8000582:	f002 fba3 	bl	8002ccc <HAL_UART_Transmit>
	return 1;
 8000586:	2301      	movs	r3, #1
}
 8000588:	4618      	mov	r0, r3
 800058a:	3710      	adds	r7, #16
 800058c:	46bd      	mov	sp, r7
 800058e:	bd80      	pop	{r7, pc}
 8000590:	2000011c 	.word	0x2000011c

08000594 <_write>:

int _write(int file, char *ptr, int len)
{
 8000594:	b580      	push	{r7, lr}
 8000596:	b084      	sub	sp, #16
 8000598:	af00      	add	r7, sp, #0
 800059a:	60f8      	str	r0, [r7, #12]
 800059c:	60b9      	str	r1, [r7, #8]
 800059e:	607a      	str	r2, [r7, #4]
	HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, 100);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	b29a      	uxth	r2, r3
 80005a4:	2364      	movs	r3, #100	@ 0x64
 80005a6:	68b9      	ldr	r1, [r7, #8]
 80005a8:	4803      	ldr	r0, [pc, #12]	@ (80005b8 <_write+0x24>)
 80005aa:	f002 fb8f 	bl	8002ccc <HAL_UART_Transmit>
	return len;
 80005ae:	687b      	ldr	r3, [r7, #4]
}
 80005b0:	4618      	mov	r0, r3
 80005b2:	3710      	adds	r7, #16
 80005b4:	46bd      	mov	sp, r7
 80005b6:	bd80      	pop	{r7, pc}
 80005b8:	2000011c 	.word	0x2000011c

080005bc <send_ESP>:

// ESP-01 UART
void send_ESP(char* cmd, char* send_data)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
//  HAL_UART_Transmit(&huart3, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
  HAL_UART_Transmit(&huart3, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80005c6:	6878      	ldr	r0, [r7, #4]
 80005c8:	f7ff fdc0 	bl	800014c <strlen>
 80005cc:	4603      	mov	r3, r0
 80005ce:	b29a      	uxth	r2, r3
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	6879      	ldr	r1, [r7, #4]
 80005d6:	4814      	ldr	r0, [pc, #80]	@ (8000628 <send_ESP+0x6c>)
 80005d8:	f002 fb78 	bl	8002ccc <HAL_UART_Transmit>
  HAL_Delay(500);
 80005dc:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005e0:	f000 fc3e 	bl	8000e60 <HAL_Delay>
//  log
  receive_ESP(0);
 80005e4:	2000      	movs	r0, #0
 80005e6:	f000 f825 	bl	8000634 <receive_ESP>

  // if
  if (strncmp(cmd, "AT+CIPSEND", 10) == 0) {
 80005ea:	220a      	movs	r2, #10
 80005ec:	490f      	ldr	r1, [pc, #60]	@ (800062c <send_ESP+0x70>)
 80005ee:	6878      	ldr	r0, [r7, #4]
 80005f0:	f003 fba6 	bl	8003d40 <strncmp>
 80005f4:	4603      	mov	r3, r0
 80005f6:	2b00      	cmp	r3, #0
 80005f8:	d112      	bne.n	8000620 <send_ESP+0x64>
	  HAL_Delay(500);
 80005fa:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80005fe:	f000 fc2f 	bl	8000e60 <HAL_Delay>
	  HAL_UART_Transmit(&huart3, (uint8_t*)send_data, strlen(send_data), HAL_MAX_DELAY);
 8000602:	6838      	ldr	r0, [r7, #0]
 8000604:	f7ff fda2 	bl	800014c <strlen>
 8000608:	4603      	mov	r3, r0
 800060a:	b29a      	uxth	r2, r3
 800060c:	f04f 33ff 	mov.w	r3, #4294967295
 8000610:	6839      	ldr	r1, [r7, #0]
 8000612:	4805      	ldr	r0, [pc, #20]	@ (8000628 <send_ESP+0x6c>)
 8000614:	f002 fb5a 	bl	8002ccc <HAL_UART_Transmit>
	  printf("send data : %s\r\n", send_data);
 8000618:	6839      	ldr	r1, [r7, #0]
 800061a:	4805      	ldr	r0, [pc, #20]	@ (8000630 <send_ESP+0x74>)
 800061c:	f003 fb06 	bl	8003c2c <iprintf>
//	  receive_ESP(1);
  } else {
//	  receive_ESP(0);
  }
  // AT COMMAND
}
 8000620:	bf00      	nop
 8000622:	3708      	adds	r7, #8
 8000624:	46bd      	mov	sp, r7
 8000626:	bd80      	pop	{r7, pc}
 8000628:	20000164 	.word	0x20000164
 800062c:	08004df8 	.word	0x08004df8
 8000630:	08004e04 	.word	0x08004e04

08000634 <receive_ESP>:

void receive_ESP(int mode)
{
 8000634:	b580      	push	{r7, lr}
 8000636:	b09c      	sub	sp, #112	@ 0x70
 8000638:	af00      	add	r7, sp, #0
 800063a:	6078      	str	r0, [r7, #4]
	char rx_buffer[100];

	HAL_UART_Receive(&huart3, (uint8_t*)rx_buffer, sizeof(rx_buffer) - 1, 1000);  // 1초 대기
 800063c:	f107 010c 	add.w	r1, r7, #12
 8000640:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000644:	2263      	movs	r2, #99	@ 0x63
 8000646:	480e      	ldr	r0, [pc, #56]	@ (8000680 <receive_ESP+0x4c>)
 8000648:	f002 fbc3 	bl	8002dd2 <HAL_UART_Receive>
	rx_buffer[sizeof(rx_buffer) - 1] = '\0';  // end Point Null
 800064c:	2300      	movs	r3, #0
 800064e:	f887 306f 	strb.w	r3, [r7, #111]	@ 0x6f
	HAL_Delay(500); //
 8000652:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000656:	f000 fc03 	bl	8000e60 <HAL_Delay>

	// Mode 0 : AT response Mode 1 : Server response
	if (mode == 0) {
 800065a:	687b      	ldr	r3, [r7, #4]
 800065c:	2b00      	cmp	r3, #0
 800065e:	d106      	bne.n	800066e <receive_ESP+0x3a>
		// nomal response
		printf("Received data: %s\r\n", rx_buffer);
 8000660:	f107 030c 	add.w	r3, r7, #12
 8000664:	4619      	mov	r1, r3
 8000666:	4807      	ldr	r0, [pc, #28]	@ (8000684 <receive_ESP+0x50>)
 8000668:	f003 fae0 	bl	8003c2c <iprintf>
	} else {
		// server response
		parse_IPD(rx_buffer);
	}
}
 800066c:	e004      	b.n	8000678 <receive_ESP+0x44>
		parse_IPD(rx_buffer);
 800066e:	f107 030c 	add.w	r3, r7, #12
 8000672:	4618      	mov	r0, r3
 8000674:	f000 f808 	bl	8000688 <parse_IPD>
}
 8000678:	bf00      	nop
 800067a:	3770      	adds	r7, #112	@ 0x70
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	20000164 	.word	0x20000164
 8000684:	08004e18 	.word	0x08004e18

08000688 <parse_IPD>:

// Data Preprocessing
void parse_IPD(char* buffer)
{
 8000688:	b580      	push	{r7, lr}
 800068a:	b086      	sub	sp, #24
 800068c:	af00      	add	r7, sp, #0
 800068e:	6078      	str	r0, [r7, #4]
    char* ipd_ptr = strstr(buffer, "+IPD,");
 8000690:	4919      	ldr	r1, [pc, #100]	@ (80006f8 <parse_IPD+0x70>)
 8000692:	6878      	ldr	r0, [r7, #4]
 8000694:	f003 fb66 	bl	8003d64 <strstr>
 8000698:	6178      	str	r0, [r7, #20]
    if (ipd_ptr != NULL)
 800069a:	697b      	ldr	r3, [r7, #20]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d027      	beq.n	80006f0 <parse_IPD+0x68>
    {
        ipd_ptr += 5;  // "+IPD,"
 80006a0:	697b      	ldr	r3, [r7, #20]
 80006a2:	3305      	adds	r3, #5
 80006a4:	617b      	str	r3, [r7, #20]
        char* length_ptr = strchr(ipd_ptr, ':');
 80006a6:	213a      	movs	r1, #58	@ 0x3a
 80006a8:	6978      	ldr	r0, [r7, #20]
 80006aa:	f003 fb3c 	bl	8003d26 <strchr>
 80006ae:	6138      	str	r0, [r7, #16]
        if (length_ptr != NULL)
 80006b0:	693b      	ldr	r3, [r7, #16]
 80006b2:	2b00      	cmp	r3, #0
 80006b4:	d01c      	beq.n	80006f0 <parse_IPD+0x68>
        {
            *length_ptr = '\0';
 80006b6:	693b      	ldr	r3, [r7, #16]
 80006b8:	2200      	movs	r2, #0
 80006ba:	701a      	strb	r2, [r3, #0]
            int length = atoi(ipd_ptr);
 80006bc:	6978      	ldr	r0, [r7, #20]
 80006be:	f003 f96b 	bl	8003998 <atoi>
 80006c2:	60f8      	str	r0, [r7, #12]
            char* data_ptr = length_ptr + 1;
 80006c4:	693b      	ldr	r3, [r7, #16]
 80006c6:	3301      	adds	r3, #1
 80006c8:	60bb      	str	r3, [r7, #8]
            data_ptr[length] = '\0';  // 데이터의 끝을 NULL로 설정합니다.
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	68ba      	ldr	r2, [r7, #8]
 80006ce:	4413      	add	r3, r2
 80006d0:	2200      	movs	r2, #0
 80006d2:	701a      	strb	r2, [r3, #0]

            // preprocessing data
            printf("Preprocessing data: %d\r\n", atoi(data_ptr));
 80006d4:	68b8      	ldr	r0, [r7, #8]
 80006d6:	f003 f95f 	bl	8003998 <atoi>
 80006da:	4603      	mov	r3, r0
 80006dc:	4619      	mov	r1, r3
 80006de:	4807      	ldr	r0, [pc, #28]	@ (80006fc <parse_IPD+0x74>)
 80006e0:	f003 faa4 	bl	8003c2c <iprintf>
            servo = atoi(data_ptr);
 80006e4:	68b8      	ldr	r0, [r7, #8]
 80006e6:	f003 f957 	bl	8003998 <atoi>
 80006ea:	4603      	mov	r3, r0
 80006ec:	4a04      	ldr	r2, [pc, #16]	@ (8000700 <parse_IPD+0x78>)
 80006ee:	6013      	str	r3, [r2, #0]
        }
    }
}
 80006f0:	bf00      	nop
 80006f2:	3718      	adds	r7, #24
 80006f4:	46bd      	mov	sp, r7
 80006f6:	bd80      	pop	{r7, pc}
 80006f8:	08004e2c 	.word	0x08004e2c
 80006fc:	08004e34 	.word	0x08004e34
 8000700:	20000084 	.word	0x20000084

08000704 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000704:	b480      	push	{r7}
 8000706:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000708:	b672      	cpsid	i
}
 800070a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800070c:	bf00      	nop
 800070e:	e7fd      	b.n	800070c <Error_Handler+0x8>

08000710 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000710:	b480      	push	{r7}
 8000712:	b085      	sub	sp, #20
 8000714:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000716:	4b15      	ldr	r3, [pc, #84]	@ (800076c <HAL_MspInit+0x5c>)
 8000718:	699b      	ldr	r3, [r3, #24]
 800071a:	4a14      	ldr	r2, [pc, #80]	@ (800076c <HAL_MspInit+0x5c>)
 800071c:	f043 0301 	orr.w	r3, r3, #1
 8000720:	6193      	str	r3, [r2, #24]
 8000722:	4b12      	ldr	r3, [pc, #72]	@ (800076c <HAL_MspInit+0x5c>)
 8000724:	699b      	ldr	r3, [r3, #24]
 8000726:	f003 0301 	and.w	r3, r3, #1
 800072a:	60bb      	str	r3, [r7, #8]
 800072c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800072e:	4b0f      	ldr	r3, [pc, #60]	@ (800076c <HAL_MspInit+0x5c>)
 8000730:	69db      	ldr	r3, [r3, #28]
 8000732:	4a0e      	ldr	r2, [pc, #56]	@ (800076c <HAL_MspInit+0x5c>)
 8000734:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000738:	61d3      	str	r3, [r2, #28]
 800073a:	4b0c      	ldr	r3, [pc, #48]	@ (800076c <HAL_MspInit+0x5c>)
 800073c:	69db      	ldr	r3, [r3, #28]
 800073e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000742:	607b      	str	r3, [r7, #4]
 8000744:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000746:	4b0a      	ldr	r3, [pc, #40]	@ (8000770 <HAL_MspInit+0x60>)
 8000748:	685b      	ldr	r3, [r3, #4]
 800074a:	60fb      	str	r3, [r7, #12]
 800074c:	68fb      	ldr	r3, [r7, #12]
 800074e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000752:	60fb      	str	r3, [r7, #12]
 8000754:	68fb      	ldr	r3, [r7, #12]
 8000756:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800075a:	60fb      	str	r3, [r7, #12]
 800075c:	4a04      	ldr	r2, [pc, #16]	@ (8000770 <HAL_MspInit+0x60>)
 800075e:	68fb      	ldr	r3, [r7, #12]
 8000760:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000762:	bf00      	nop
 8000764:	3714      	adds	r7, #20
 8000766:	46bd      	mov	sp, r7
 8000768:	bc80      	pop	{r7}
 800076a:	4770      	bx	lr
 800076c:	40021000 	.word	0x40021000
 8000770:	40010000 	.word	0x40010000

08000774 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000778:	bf00      	nop
 800077a:	e7fd      	b.n	8000778 <NMI_Handler+0x4>

0800077c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800077c:	b480      	push	{r7}
 800077e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000780:	bf00      	nop
 8000782:	e7fd      	b.n	8000780 <HardFault_Handler+0x4>

08000784 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000784:	b480      	push	{r7}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000788:	bf00      	nop
 800078a:	e7fd      	b.n	8000788 <MemManage_Handler+0x4>

0800078c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800078c:	b480      	push	{r7}
 800078e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000790:	bf00      	nop
 8000792:	e7fd      	b.n	8000790 <BusFault_Handler+0x4>

08000794 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000794:	b480      	push	{r7}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000798:	bf00      	nop
 800079a:	e7fd      	b.n	8000798 <UsageFault_Handler+0x4>

0800079c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800079c:	b480      	push	{r7}
 800079e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80007a0:	bf00      	nop
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bc80      	pop	{r7}
 80007a6:	4770      	bx	lr

080007a8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007a8:	b480      	push	{r7}
 80007aa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007ac:	bf00      	nop
 80007ae:	46bd      	mov	sp, r7
 80007b0:	bc80      	pop	{r7}
 80007b2:	4770      	bx	lr

080007b4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007b8:	bf00      	nop
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bc80      	pop	{r7}
 80007be:	4770      	bx	lr

080007c0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007c0:	b580      	push	{r7, lr}
 80007c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007c4:	f000 fb30 	bl	8000e28 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007c8:	bf00      	nop
 80007ca:	bd80      	pop	{r7, pc}

080007cc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80007cc:	b580      	push	{r7, lr}
 80007ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80007d0:	4802      	ldr	r0, [pc, #8]	@ (80007dc <TIM3_IRQHandler+0x10>)
 80007d2:	f001 fc59 	bl	8002088 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80007d6:	bf00      	nop
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	2000008c 	.word	0x2000008c

080007e0 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 80007e0:	b580      	push	{r7, lr}
 80007e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 80007e4:	4802      	ldr	r0, [pc, #8]	@ (80007f0 <USART1_IRQHandler+0x10>)
 80007e6:	f002 fb87 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 80007ea:	bf00      	nop
 80007ec:	bd80      	pop	{r7, pc}
 80007ee:	bf00      	nop
 80007f0:	200000d4 	.word	0x200000d4

080007f4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80007f4:	b580      	push	{r7, lr}
 80007f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80007f8:	4802      	ldr	r0, [pc, #8]	@ (8000804 <USART2_IRQHandler+0x10>)
 80007fa:	f002 fb7d 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80007fe:	bf00      	nop
 8000800:	bd80      	pop	{r7, pc}
 8000802:	bf00      	nop
 8000804:	2000011c 	.word	0x2000011c

08000808 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800080c:	4802      	ldr	r0, [pc, #8]	@ (8000818 <USART3_IRQHandler+0x10>)
 800080e:	f002 fb73 	bl	8002ef8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000812:	bf00      	nop
 8000814:	bd80      	pop	{r7, pc}
 8000816:	bf00      	nop
 8000818:	20000164 	.word	0x20000164

0800081c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800081c:	b580      	push	{r7, lr}
 800081e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000820:	f44f 5000 	mov.w	r0, #8192	@ 0x2000
 8000824:	f000 feb4 	bl	8001590 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000828:	bf00      	nop
 800082a:	bd80      	pop	{r7, pc}

0800082c <_close>:
  }
  return len;
}

int _close(int file)
{
 800082c:	b480      	push	{r7}
 800082e:	b083      	sub	sp, #12
 8000830:	af00      	add	r7, sp, #0
 8000832:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000834:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000838:	4618      	mov	r0, r3
 800083a:	370c      	adds	r7, #12
 800083c:	46bd      	mov	sp, r7
 800083e:	bc80      	pop	{r7}
 8000840:	4770      	bx	lr

08000842 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000842:	b480      	push	{r7}
 8000844:	b083      	sub	sp, #12
 8000846:	af00      	add	r7, sp, #0
 8000848:	6078      	str	r0, [r7, #4]
 800084a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800084c:	683b      	ldr	r3, [r7, #0]
 800084e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000852:	605a      	str	r2, [r3, #4]
  return 0;
 8000854:	2300      	movs	r3, #0
}
 8000856:	4618      	mov	r0, r3
 8000858:	370c      	adds	r7, #12
 800085a:	46bd      	mov	sp, r7
 800085c:	bc80      	pop	{r7}
 800085e:	4770      	bx	lr

08000860 <_isatty>:

int _isatty(int file)
{
 8000860:	b480      	push	{r7}
 8000862:	b083      	sub	sp, #12
 8000864:	af00      	add	r7, sp, #0
 8000866:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000868:	2301      	movs	r3, #1
}
 800086a:	4618      	mov	r0, r3
 800086c:	370c      	adds	r7, #12
 800086e:	46bd      	mov	sp, r7
 8000870:	bc80      	pop	{r7}
 8000872:	4770      	bx	lr

08000874 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000874:	b480      	push	{r7}
 8000876:	b085      	sub	sp, #20
 8000878:	af00      	add	r7, sp, #0
 800087a:	60f8      	str	r0, [r7, #12]
 800087c:	60b9      	str	r1, [r7, #8]
 800087e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000880:	2300      	movs	r3, #0
}
 8000882:	4618      	mov	r0, r3
 8000884:	3714      	adds	r7, #20
 8000886:	46bd      	mov	sp, r7
 8000888:	bc80      	pop	{r7}
 800088a:	4770      	bx	lr

0800088c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800088c:	b580      	push	{r7, lr}
 800088e:	b086      	sub	sp, #24
 8000890:	af00      	add	r7, sp, #0
 8000892:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000894:	4a14      	ldr	r2, [pc, #80]	@ (80008e8 <_sbrk+0x5c>)
 8000896:	4b15      	ldr	r3, [pc, #84]	@ (80008ec <_sbrk+0x60>)
 8000898:	1ad3      	subs	r3, r2, r3
 800089a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80008a0:	4b13      	ldr	r3, [pc, #76]	@ (80008f0 <_sbrk+0x64>)
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	2b00      	cmp	r3, #0
 80008a6:	d102      	bne.n	80008ae <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80008a8:	4b11      	ldr	r3, [pc, #68]	@ (80008f0 <_sbrk+0x64>)
 80008aa:	4a12      	ldr	r2, [pc, #72]	@ (80008f4 <_sbrk+0x68>)
 80008ac:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80008ae:	4b10      	ldr	r3, [pc, #64]	@ (80008f0 <_sbrk+0x64>)
 80008b0:	681a      	ldr	r2, [r3, #0]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	4413      	add	r3, r2
 80008b6:	693a      	ldr	r2, [r7, #16]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d207      	bcs.n	80008cc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80008bc:	f003 faae 	bl	8003e1c <__errno>
 80008c0:	4603      	mov	r3, r0
 80008c2:	220c      	movs	r2, #12
 80008c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80008c6:	f04f 33ff 	mov.w	r3, #4294967295
 80008ca:	e009      	b.n	80008e0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80008cc:	4b08      	ldr	r3, [pc, #32]	@ (80008f0 <_sbrk+0x64>)
 80008ce:	681b      	ldr	r3, [r3, #0]
 80008d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80008d2:	4b07      	ldr	r3, [pc, #28]	@ (80008f0 <_sbrk+0x64>)
 80008d4:	681a      	ldr	r2, [r3, #0]
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	4413      	add	r3, r2
 80008da:	4a05      	ldr	r2, [pc, #20]	@ (80008f0 <_sbrk+0x64>)
 80008dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80008de:	68fb      	ldr	r3, [r7, #12]
}
 80008e0:	4618      	mov	r0, r3
 80008e2:	3718      	adds	r7, #24
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	20005000 	.word	0x20005000
 80008ec:	00000400 	.word	0x00000400
 80008f0:	20000088 	.word	0x20000088
 80008f4:	20000300 	.word	0x20000300

080008f8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80008f8:	b480      	push	{r7}
 80008fa:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80008fc:	bf00      	nop
 80008fe:	46bd      	mov	sp, r7
 8000900:	bc80      	pop	{r7}
 8000902:	4770      	bx	lr

08000904 <MX_TIM3_Init>:

TIM_HandleTypeDef htim3;

/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8000904:	b580      	push	{r7, lr}
 8000906:	b08e      	sub	sp, #56	@ 0x38
 8000908:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800090a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800090e:	2200      	movs	r2, #0
 8000910:	601a      	str	r2, [r3, #0]
 8000912:	605a      	str	r2, [r3, #4]
 8000914:	609a      	str	r2, [r3, #8]
 8000916:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000918:	f107 0320 	add.w	r3, r7, #32
 800091c:	2200      	movs	r2, #0
 800091e:	601a      	str	r2, [r3, #0]
 8000920:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000922:	1d3b      	adds	r3, r7, #4
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
 800092a:	609a      	str	r2, [r3, #8]
 800092c:	60da      	str	r2, [r3, #12]
 800092e:	611a      	str	r2, [r3, #16]
 8000930:	615a      	str	r2, [r3, #20]
 8000932:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000934:	4b2d      	ldr	r3, [pc, #180]	@ (80009ec <MX_TIM3_Init+0xe8>)
 8000936:	4a2e      	ldr	r2, [pc, #184]	@ (80009f0 <MX_TIM3_Init+0xec>)
 8000938:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1280-1;
 800093a:	4b2c      	ldr	r3, [pc, #176]	@ (80009ec <MX_TIM3_Init+0xe8>)
 800093c:	f240 42ff 	movw	r2, #1279	@ 0x4ff
 8000940:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000942:	4b2a      	ldr	r3, [pc, #168]	@ (80009ec <MX_TIM3_Init+0xe8>)
 8000944:	2200      	movs	r2, #0
 8000946:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 1000-1;
 8000948:	4b28      	ldr	r3, [pc, #160]	@ (80009ec <MX_TIM3_Init+0xe8>)
 800094a:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800094e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000950:	4b26      	ldr	r3, [pc, #152]	@ (80009ec <MX_TIM3_Init+0xe8>)
 8000952:	2200      	movs	r2, #0
 8000954:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000956:	4b25      	ldr	r3, [pc, #148]	@ (80009ec <MX_TIM3_Init+0xe8>)
 8000958:	2200      	movs	r2, #0
 800095a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800095c:	4823      	ldr	r0, [pc, #140]	@ (80009ec <MX_TIM3_Init+0xe8>)
 800095e:	f001 fa49 	bl	8001df4 <HAL_TIM_Base_Init>
 8000962:	4603      	mov	r3, r0
 8000964:	2b00      	cmp	r3, #0
 8000966:	d001      	beq.n	800096c <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 8000968:	f7ff fecc 	bl	8000704 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800096c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000970:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000972:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000976:	4619      	mov	r1, r3
 8000978:	481c      	ldr	r0, [pc, #112]	@ (80009ec <MX_TIM3_Init+0xe8>)
 800097a:	f001 fd4f 	bl	800241c <HAL_TIM_ConfigClockSource>
 800097e:	4603      	mov	r3, r0
 8000980:	2b00      	cmp	r3, #0
 8000982:	d001      	beq.n	8000988 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 8000984:	f7ff febe 	bl	8000704 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000988:	4818      	ldr	r0, [pc, #96]	@ (80009ec <MX_TIM3_Init+0xe8>)
 800098a:	f001 fa82 	bl	8001e92 <HAL_TIM_PWM_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 8000994:	f7ff feb6 	bl	8000704 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000998:	2300      	movs	r3, #0
 800099a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a0:	f107 0320 	add.w	r3, r7, #32
 80009a4:	4619      	mov	r1, r3
 80009a6:	4811      	ldr	r0, [pc, #68]	@ (80009ec <MX_TIM3_Init+0xe8>)
 80009a8:	f002 f8d0 	bl	8002b4c <HAL_TIMEx_MasterConfigSynchronization>
 80009ac:	4603      	mov	r3, r0
 80009ae:	2b00      	cmp	r3, #0
 80009b0:	d001      	beq.n	80009b6 <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 80009b2:	f7ff fea7 	bl	8000704 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009b6:	2360      	movs	r3, #96	@ 0x60
 80009b8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80009ba:	2300      	movs	r3, #0
 80009bc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80009be:	2300      	movs	r3, #0
 80009c0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c2:	2300      	movs	r3, #0
 80009c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80009c6:	1d3b      	adds	r3, r7, #4
 80009c8:	2204      	movs	r2, #4
 80009ca:	4619      	mov	r1, r3
 80009cc:	4807      	ldr	r0, [pc, #28]	@ (80009ec <MX_TIM3_Init+0xe8>)
 80009ce:	f001 fc63 	bl	8002298 <HAL_TIM_PWM_ConfigChannel>
 80009d2:	4603      	mov	r3, r0
 80009d4:	2b00      	cmp	r3, #0
 80009d6:	d001      	beq.n	80009dc <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 80009d8:	f7ff fe94 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009dc:	4803      	ldr	r0, [pc, #12]	@ (80009ec <MX_TIM3_Init+0xe8>)
 80009de:	f000 f82f 	bl	8000a40 <HAL_TIM_MspPostInit>

}
 80009e2:	bf00      	nop
 80009e4:	3738      	adds	r7, #56	@ 0x38
 80009e6:	46bd      	mov	sp, r7
 80009e8:	bd80      	pop	{r7, pc}
 80009ea:	bf00      	nop
 80009ec:	2000008c 	.word	0x2000008c
 80009f0:	40000400 	.word	0x40000400

080009f4 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80009f4:	b580      	push	{r7, lr}
 80009f6:	b084      	sub	sp, #16
 80009f8:	af00      	add	r7, sp, #0
 80009fa:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM3)
 80009fc:	687b      	ldr	r3, [r7, #4]
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	4a0d      	ldr	r2, [pc, #52]	@ (8000a38 <HAL_TIM_Base_MspInit+0x44>)
 8000a02:	4293      	cmp	r3, r2
 8000a04:	d113      	bne.n	8000a2e <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000a06:	4b0d      	ldr	r3, [pc, #52]	@ (8000a3c <HAL_TIM_Base_MspInit+0x48>)
 8000a08:	69db      	ldr	r3, [r3, #28]
 8000a0a:	4a0c      	ldr	r2, [pc, #48]	@ (8000a3c <HAL_TIM_Base_MspInit+0x48>)
 8000a0c:	f043 0302 	orr.w	r3, r3, #2
 8000a10:	61d3      	str	r3, [r2, #28]
 8000a12:	4b0a      	ldr	r3, [pc, #40]	@ (8000a3c <HAL_TIM_Base_MspInit+0x48>)
 8000a14:	69db      	ldr	r3, [r3, #28]
 8000a16:	f003 0302 	and.w	r3, r3, #2
 8000a1a:	60fb      	str	r3, [r7, #12]
 8000a1c:	68fb      	ldr	r3, [r7, #12]

    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000a1e:	2200      	movs	r2, #0
 8000a20:	2100      	movs	r1, #0
 8000a22:	201d      	movs	r0, #29
 8000a24:	f000 fb17 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000a28:	201d      	movs	r0, #29
 8000a2a:	f000 fb30 	bl	800108e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8000a2e:	bf00      	nop
 8000a30:	3710      	adds	r7, #16
 8000a32:	46bd      	mov	sp, r7
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	40000400 	.word	0x40000400
 8000a3c:	40021000 	.word	0x40021000

08000a40 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b088      	sub	sp, #32
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a48:	f107 0310 	add.w	r3, r7, #16
 8000a4c:	2200      	movs	r2, #0
 8000a4e:	601a      	str	r2, [r3, #0]
 8000a50:	605a      	str	r2, [r3, #4]
 8000a52:	609a      	str	r2, [r3, #8]
 8000a54:	60da      	str	r2, [r3, #12]
  if(timHandle->Instance==TIM3)
 8000a56:	687b      	ldr	r3, [r7, #4]
 8000a58:	681b      	ldr	r3, [r3, #0]
 8000a5a:	4a0f      	ldr	r2, [pc, #60]	@ (8000a98 <HAL_TIM_MspPostInit+0x58>)
 8000a5c:	4293      	cmp	r3, r2
 8000a5e:	d117      	bne.n	8000a90 <HAL_TIM_MspPostInit+0x50>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a60:	4b0e      	ldr	r3, [pc, #56]	@ (8000a9c <HAL_TIM_MspPostInit+0x5c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	4a0d      	ldr	r2, [pc, #52]	@ (8000a9c <HAL_TIM_MspPostInit+0x5c>)
 8000a66:	f043 0304 	orr.w	r3, r3, #4
 8000a6a:	6193      	str	r3, [r2, #24]
 8000a6c:	4b0b      	ldr	r3, [pc, #44]	@ (8000a9c <HAL_TIM_MspPostInit+0x5c>)
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	f003 0304 	and.w	r3, r3, #4
 8000a74:	60fb      	str	r3, [r7, #12]
 8000a76:	68fb      	ldr	r3, [r7, #12]
    /**TIM3 GPIO Configuration
    PA7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8000a78:	2380      	movs	r3, #128	@ 0x80
 8000a7a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7c:	2302      	movs	r3, #2
 8000a7e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a80:	2302      	movs	r3, #2
 8000a82:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a84:	f107 0310 	add.w	r3, r7, #16
 8000a88:	4619      	mov	r1, r3
 8000a8a:	4805      	ldr	r0, [pc, #20]	@ (8000aa0 <HAL_TIM_MspPostInit+0x60>)
 8000a8c:	f000 fbcc 	bl	8001228 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000a90:	bf00      	nop
 8000a92:	3720      	adds	r7, #32
 8000a94:	46bd      	mov	sp, r7
 8000a96:	bd80      	pop	{r7, pc}
 8000a98:	40000400 	.word	0x40000400
 8000a9c:	40021000 	.word	0x40021000
 8000aa0:	40010800 	.word	0x40010800

08000aa4 <MX_USART1_UART_Init>:
UART_HandleTypeDef huart3;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000aa8:	4b11      	ldr	r3, [pc, #68]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aaa:	4a12      	ldr	r2, [pc, #72]	@ (8000af4 <MX_USART1_UART_Init+0x50>)
 8000aac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000aae:	4b10      	ldr	r3, [pc, #64]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab0:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ab4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ab6:	4b0e      	ldr	r3, [pc, #56]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ab8:	2200      	movs	r2, #0
 8000aba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000abc:	4b0c      	ldr	r3, [pc, #48]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000abe:	2200      	movs	r2, #0
 8000ac0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ac2:	4b0b      	ldr	r3, [pc, #44]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ac8:	4b09      	ldr	r3, [pc, #36]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000aca:	220c      	movs	r2, #12
 8000acc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000ace:	4b08      	ldr	r3, [pc, #32]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000ad4:	4b06      	ldr	r3, [pc, #24]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000ada:	4805      	ldr	r0, [pc, #20]	@ (8000af0 <MX_USART1_UART_Init+0x4c>)
 8000adc:	f002 f8a6 	bl	8002c2c <HAL_UART_Init>
 8000ae0:	4603      	mov	r3, r0
 8000ae2:	2b00      	cmp	r3, #0
 8000ae4:	d001      	beq.n	8000aea <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000ae6:	f7ff fe0d 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000aea:	bf00      	nop
 8000aec:	bd80      	pop	{r7, pc}
 8000aee:	bf00      	nop
 8000af0:	200000d4 	.word	0x200000d4
 8000af4:	40013800 	.word	0x40013800

08000af8 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8000af8:	b580      	push	{r7, lr}
 8000afa:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000afc:	4b11      	ldr	r3, [pc, #68]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000afe:	4a12      	ldr	r2, [pc, #72]	@ (8000b48 <MX_USART2_UART_Init+0x50>)
 8000b00:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b02:	4b10      	ldr	r3, [pc, #64]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b04:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b08:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b0a:	4b0e      	ldr	r3, [pc, #56]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b10:	4b0c      	ldr	r3, [pc, #48]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b12:	2200      	movs	r2, #0
 8000b14:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b16:	4b0b      	ldr	r3, [pc, #44]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b18:	2200      	movs	r2, #0
 8000b1a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b1c:	4b09      	ldr	r3, [pc, #36]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b1e:	220c      	movs	r2, #12
 8000b20:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b22:	4b08      	ldr	r3, [pc, #32]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b28:	4b06      	ldr	r3, [pc, #24]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b2e:	4805      	ldr	r0, [pc, #20]	@ (8000b44 <MX_USART2_UART_Init+0x4c>)
 8000b30:	f002 f87c 	bl	8002c2c <HAL_UART_Init>
 8000b34:	4603      	mov	r3, r0
 8000b36:	2b00      	cmp	r3, #0
 8000b38:	d001      	beq.n	8000b3e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000b3a:	f7ff fde3 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b3e:	bf00      	nop
 8000b40:	bd80      	pop	{r7, pc}
 8000b42:	bf00      	nop
 8000b44:	2000011c 	.word	0x2000011c
 8000b48:	40004400 	.word	0x40004400

08000b4c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8000b50:	4b11      	ldr	r3, [pc, #68]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b52:	4a12      	ldr	r2, [pc, #72]	@ (8000b9c <MX_USART3_UART_Init+0x50>)
 8000b54:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8000b56:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b58:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000b5c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8000b5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b60:	2200      	movs	r2, #0
 8000b62:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8000b64:	4b0c      	ldr	r3, [pc, #48]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b66:	2200      	movs	r2, #0
 8000b68:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000b6a:	4b0b      	ldr	r3, [pc, #44]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b6c:	2200      	movs	r2, #0
 8000b6e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000b70:	4b09      	ldr	r3, [pc, #36]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b72:	220c      	movs	r2, #12
 8000b74:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b78:	2200      	movs	r2, #0
 8000b7a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b7c:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b7e:	2200      	movs	r2, #0
 8000b80:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000b82:	4805      	ldr	r0, [pc, #20]	@ (8000b98 <MX_USART3_UART_Init+0x4c>)
 8000b84:	f002 f852 	bl	8002c2c <HAL_UART_Init>
 8000b88:	4603      	mov	r3, r0
 8000b8a:	2b00      	cmp	r3, #0
 8000b8c:	d001      	beq.n	8000b92 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8000b8e:	f7ff fdb9 	bl	8000704 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000b92:	bf00      	nop
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	20000164 	.word	0x20000164
 8000b9c:	40004800 	.word	0x40004800

08000ba0 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b08c      	sub	sp, #48	@ 0x30
 8000ba4:	af00      	add	r7, sp, #0
 8000ba6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ba8:	f107 0320 	add.w	r3, r7, #32
 8000bac:	2200      	movs	r2, #0
 8000bae:	601a      	str	r2, [r3, #0]
 8000bb0:	605a      	str	r2, [r3, #4]
 8000bb2:	609a      	str	r2, [r3, #8]
 8000bb4:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	681b      	ldr	r3, [r3, #0]
 8000bba:	4a5f      	ldr	r2, [pc, #380]	@ (8000d38 <HAL_UART_MspInit+0x198>)
 8000bbc:	4293      	cmp	r3, r2
 8000bbe:	d13a      	bne.n	8000c36 <HAL_UART_MspInit+0x96>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000bc0:	4b5e      	ldr	r3, [pc, #376]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000bc2:	699b      	ldr	r3, [r3, #24]
 8000bc4:	4a5d      	ldr	r2, [pc, #372]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000bc6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000bca:	6193      	str	r3, [r2, #24]
 8000bcc:	4b5b      	ldr	r3, [pc, #364]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000bce:	699b      	ldr	r3, [r3, #24]
 8000bd0:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000bd4:	61fb      	str	r3, [r7, #28]
 8000bd6:	69fb      	ldr	r3, [r7, #28]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bd8:	4b58      	ldr	r3, [pc, #352]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000bda:	699b      	ldr	r3, [r3, #24]
 8000bdc:	4a57      	ldr	r2, [pc, #348]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000bde:	f043 0304 	orr.w	r3, r3, #4
 8000be2:	6193      	str	r3, [r2, #24]
 8000be4:	4b55      	ldr	r3, [pc, #340]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000be6:	699b      	ldr	r3, [r3, #24]
 8000be8:	f003 0304 	and.w	r3, r3, #4
 8000bec:	61bb      	str	r3, [r7, #24]
 8000bee:	69bb      	ldr	r3, [r7, #24]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000bf0:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000bf4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bf6:	2302      	movs	r3, #2
 8000bf8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000bfa:	2303      	movs	r3, #3
 8000bfc:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bfe:	f107 0320 	add.w	r3, r7, #32
 8000c02:	4619      	mov	r1, r3
 8000c04:	484e      	ldr	r0, [pc, #312]	@ (8000d40 <HAL_UART_MspInit+0x1a0>)
 8000c06:	f000 fb0f 	bl	8001228 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000c0a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c10:	2300      	movs	r3, #0
 8000c12:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c14:	2300      	movs	r3, #0
 8000c16:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0320 	add.w	r3, r7, #32
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4848      	ldr	r0, [pc, #288]	@ (8000d40 <HAL_UART_MspInit+0x1a0>)
 8000c20:	f000 fb02 	bl	8001228 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000c24:	2200      	movs	r2, #0
 8000c26:	2100      	movs	r1, #0
 8000c28:	2025      	movs	r0, #37	@ 0x25
 8000c2a:	f000 fa14 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000c2e:	2025      	movs	r0, #37	@ 0x25
 8000c30:	f000 fa2d 	bl	800108e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8000c34:	e07c      	b.n	8000d30 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART2)
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4a42      	ldr	r2, [pc, #264]	@ (8000d44 <HAL_UART_MspInit+0x1a4>)
 8000c3c:	4293      	cmp	r3, r2
 8000c3e:	d138      	bne.n	8000cb2 <HAL_UART_MspInit+0x112>
    __HAL_RCC_USART2_CLK_ENABLE();
 8000c40:	4b3e      	ldr	r3, [pc, #248]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c42:	69db      	ldr	r3, [r3, #28]
 8000c44:	4a3d      	ldr	r2, [pc, #244]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c46:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000c4a:	61d3      	str	r3, [r2, #28]
 8000c4c:	4b3b      	ldr	r3, [pc, #236]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c4e:	69db      	ldr	r3, [r3, #28]
 8000c50:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000c54:	617b      	str	r3, [r7, #20]
 8000c56:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c58:	4b38      	ldr	r3, [pc, #224]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c5a:	699b      	ldr	r3, [r3, #24]
 8000c5c:	4a37      	ldr	r2, [pc, #220]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c5e:	f043 0304 	orr.w	r3, r3, #4
 8000c62:	6193      	str	r3, [r2, #24]
 8000c64:	4b35      	ldr	r3, [pc, #212]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000c66:	699b      	ldr	r3, [r3, #24]
 8000c68:	f003 0304 	and.w	r3, r3, #4
 8000c6c:	613b      	str	r3, [r7, #16]
 8000c6e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000c70:	2304      	movs	r3, #4
 8000c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c74:	2302      	movs	r3, #2
 8000c76:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c78:	2303      	movs	r3, #3
 8000c7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c7c:	f107 0320 	add.w	r3, r7, #32
 8000c80:	4619      	mov	r1, r3
 8000c82:	482f      	ldr	r0, [pc, #188]	@ (8000d40 <HAL_UART_MspInit+0x1a0>)
 8000c84:	f000 fad0 	bl	8001228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c88:	2308      	movs	r3, #8
 8000c8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c94:	f107 0320 	add.w	r3, r7, #32
 8000c98:	4619      	mov	r1, r3
 8000c9a:	4829      	ldr	r0, [pc, #164]	@ (8000d40 <HAL_UART_MspInit+0x1a0>)
 8000c9c:	f000 fac4 	bl	8001228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2100      	movs	r1, #0
 8000ca4:	2026      	movs	r0, #38	@ 0x26
 8000ca6:	f000 f9d6 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000caa:	2026      	movs	r0, #38	@ 0x26
 8000cac:	f000 f9ef 	bl	800108e <HAL_NVIC_EnableIRQ>
}
 8000cb0:	e03e      	b.n	8000d30 <HAL_UART_MspInit+0x190>
  else if(uartHandle->Instance==USART3)
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	681b      	ldr	r3, [r3, #0]
 8000cb6:	4a24      	ldr	r2, [pc, #144]	@ (8000d48 <HAL_UART_MspInit+0x1a8>)
 8000cb8:	4293      	cmp	r3, r2
 8000cba:	d139      	bne.n	8000d30 <HAL_UART_MspInit+0x190>
    __HAL_RCC_USART3_CLK_ENABLE();
 8000cbc:	4b1f      	ldr	r3, [pc, #124]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000cbe:	69db      	ldr	r3, [r3, #28]
 8000cc0:	4a1e      	ldr	r2, [pc, #120]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000cc2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000cc6:	61d3      	str	r3, [r2, #28]
 8000cc8:	4b1c      	ldr	r3, [pc, #112]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000cca:	69db      	ldr	r3, [r3, #28]
 8000ccc:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8000cd0:	60fb      	str	r3, [r7, #12]
 8000cd2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000cd4:	4b19      	ldr	r3, [pc, #100]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	4a18      	ldr	r2, [pc, #96]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000cda:	f043 0308 	orr.w	r3, r3, #8
 8000cde:	6193      	str	r3, [r2, #24]
 8000ce0:	4b16      	ldr	r3, [pc, #88]	@ (8000d3c <HAL_UART_MspInit+0x19c>)
 8000ce2:	699b      	ldr	r3, [r3, #24]
 8000ce4:	f003 0308 	and.w	r3, r3, #8
 8000ce8:	60bb      	str	r3, [r7, #8]
 8000cea:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cec:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000cf0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cf2:	2302      	movs	r3, #2
 8000cf4:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000cf6:	2303      	movs	r3, #3
 8000cf8:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000cfa:	f107 0320 	add.w	r3, r7, #32
 8000cfe:	4619      	mov	r1, r3
 8000d00:	4812      	ldr	r0, [pc, #72]	@ (8000d4c <HAL_UART_MspInit+0x1ac>)
 8000d02:	f000 fa91 	bl	8001228 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8000d06:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000d0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d10:	2300      	movs	r3, #0
 8000d12:	62bb      	str	r3, [r7, #40]	@ 0x28
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d14:	f107 0320 	add.w	r3, r7, #32
 8000d18:	4619      	mov	r1, r3
 8000d1a:	480c      	ldr	r0, [pc, #48]	@ (8000d4c <HAL_UART_MspInit+0x1ac>)
 8000d1c:	f000 fa84 	bl	8001228 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 8000d20:	2200      	movs	r2, #0
 8000d22:	2100      	movs	r1, #0
 8000d24:	2027      	movs	r0, #39	@ 0x27
 8000d26:	f000 f996 	bl	8001056 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000d2a:	2027      	movs	r0, #39	@ 0x27
 8000d2c:	f000 f9af 	bl	800108e <HAL_NVIC_EnableIRQ>
}
 8000d30:	bf00      	nop
 8000d32:	3730      	adds	r7, #48	@ 0x30
 8000d34:	46bd      	mov	sp, r7
 8000d36:	bd80      	pop	{r7, pc}
 8000d38:	40013800 	.word	0x40013800
 8000d3c:	40021000 	.word	0x40021000
 8000d40:	40010800 	.word	0x40010800
 8000d44:	40004400 	.word	0x40004400
 8000d48:	40004800 	.word	0x40004800
 8000d4c:	40010c00 	.word	0x40010c00

08000d50 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000d50:	f7ff fdd2 	bl	80008f8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000d54:	480b      	ldr	r0, [pc, #44]	@ (8000d84 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000d56:	490c      	ldr	r1, [pc, #48]	@ (8000d88 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000d58:	4a0c      	ldr	r2, [pc, #48]	@ (8000d8c <LoopFillZerobss+0x16>)
  movs r3, #0
 8000d5a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000d5c:	e002      	b.n	8000d64 <LoopCopyDataInit>

08000d5e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000d5e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000d60:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000d62:	3304      	adds	r3, #4

08000d64 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000d64:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000d66:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000d68:	d3f9      	bcc.n	8000d5e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000d6a:	4a09      	ldr	r2, [pc, #36]	@ (8000d90 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000d6c:	4c09      	ldr	r4, [pc, #36]	@ (8000d94 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000d6e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000d70:	e001      	b.n	8000d76 <LoopFillZerobss>

08000d72 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000d72:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000d74:	3204      	adds	r2, #4

08000d76 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000d76:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000d78:	d3fb      	bcc.n	8000d72 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000d7a:	f003 f855 	bl	8003e28 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000d7e:	f7ff fa7b 	bl	8000278 <main>
  bx lr
 8000d82:	4770      	bx	lr
  ldr r0, =_sdata
 8000d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000d88:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000d8c:	08004fc0 	.word	0x08004fc0
  ldr r2, =_sbss
 8000d90:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000d94:	200002fc 	.word	0x200002fc

08000d98 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000d98:	e7fe      	b.n	8000d98 <ADC1_2_IRQHandler>
	...

08000d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000d9c:	b580      	push	{r7, lr}
 8000d9e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000da0:	4b08      	ldr	r3, [pc, #32]	@ (8000dc4 <HAL_Init+0x28>)
 8000da2:	681b      	ldr	r3, [r3, #0]
 8000da4:	4a07      	ldr	r2, [pc, #28]	@ (8000dc4 <HAL_Init+0x28>)
 8000da6:	f043 0310 	orr.w	r3, r3, #16
 8000daa:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000dac:	2003      	movs	r0, #3
 8000dae:	f000 f947 	bl	8001040 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000db2:	2000      	movs	r0, #0
 8000db4:	f000 f808 	bl	8000dc8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000db8:	f7ff fcaa 	bl	8000710 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000dbc:	2300      	movs	r3, #0
}
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	bd80      	pop	{r7, pc}
 8000dc2:	bf00      	nop
 8000dc4:	40022000 	.word	0x40022000

08000dc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	b082      	sub	sp, #8
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000dd0:	4b12      	ldr	r3, [pc, #72]	@ (8000e1c <HAL_InitTick+0x54>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b12      	ldr	r3, [pc, #72]	@ (8000e20 <HAL_InitTick+0x58>)
 8000dd6:	781b      	ldrb	r3, [r3, #0]
 8000dd8:	4619      	mov	r1, r3
 8000dda:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000dde:	fbb3 f3f1 	udiv	r3, r3, r1
 8000de2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000de6:	4618      	mov	r0, r3
 8000de8:	f000 f95f 	bl	80010aa <HAL_SYSTICK_Config>
 8000dec:	4603      	mov	r3, r0
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d001      	beq.n	8000df6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e00e      	b.n	8000e14 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	2b0f      	cmp	r3, #15
 8000dfa:	d80a      	bhi.n	8000e12 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000dfc:	2200      	movs	r2, #0
 8000dfe:	6879      	ldr	r1, [r7, #4]
 8000e00:	f04f 30ff 	mov.w	r0, #4294967295
 8000e04:	f000 f927 	bl	8001056 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e08:	4a06      	ldr	r2, [pc, #24]	@ (8000e24 <HAL_InitTick+0x5c>)
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e0e:	2300      	movs	r3, #0
 8000e10:	e000      	b.n	8000e14 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e12:	2301      	movs	r3, #1
}
 8000e14:	4618      	mov	r0, r3
 8000e16:	3708      	adds	r7, #8
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	bd80      	pop	{r7, pc}
 8000e1c:	20000000 	.word	0x20000000
 8000e20:	20000008 	.word	0x20000008
 8000e24:	20000004 	.word	0x20000004

08000e28 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e28:	b480      	push	{r7}
 8000e2a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e2c:	4b05      	ldr	r3, [pc, #20]	@ (8000e44 <HAL_IncTick+0x1c>)
 8000e2e:	781b      	ldrb	r3, [r3, #0]
 8000e30:	461a      	mov	r2, r3
 8000e32:	4b05      	ldr	r3, [pc, #20]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e34:	681b      	ldr	r3, [r3, #0]
 8000e36:	4413      	add	r3, r2
 8000e38:	4a03      	ldr	r2, [pc, #12]	@ (8000e48 <HAL_IncTick+0x20>)
 8000e3a:	6013      	str	r3, [r2, #0]
}
 8000e3c:	bf00      	nop
 8000e3e:	46bd      	mov	sp, r7
 8000e40:	bc80      	pop	{r7}
 8000e42:	4770      	bx	lr
 8000e44:	20000008 	.word	0x20000008
 8000e48:	200001ac 	.word	0x200001ac

08000e4c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  return uwTick;
 8000e50:	4b02      	ldr	r3, [pc, #8]	@ (8000e5c <HAL_GetTick+0x10>)
 8000e52:	681b      	ldr	r3, [r3, #0]
}
 8000e54:	4618      	mov	r0, r3
 8000e56:	46bd      	mov	sp, r7
 8000e58:	bc80      	pop	{r7}
 8000e5a:	4770      	bx	lr
 8000e5c:	200001ac 	.word	0x200001ac

08000e60 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b084      	sub	sp, #16
 8000e64:	af00      	add	r7, sp, #0
 8000e66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000e68:	f7ff fff0 	bl	8000e4c <HAL_GetTick>
 8000e6c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000e72:	68fb      	ldr	r3, [r7, #12]
 8000e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000e78:	d005      	beq.n	8000e86 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000e7a:	4b0a      	ldr	r3, [pc, #40]	@ (8000ea4 <HAL_Delay+0x44>)
 8000e7c:	781b      	ldrb	r3, [r3, #0]
 8000e7e:	461a      	mov	r2, r3
 8000e80:	68fb      	ldr	r3, [r7, #12]
 8000e82:	4413      	add	r3, r2
 8000e84:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000e86:	bf00      	nop
 8000e88:	f7ff ffe0 	bl	8000e4c <HAL_GetTick>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	68bb      	ldr	r3, [r7, #8]
 8000e90:	1ad3      	subs	r3, r2, r3
 8000e92:	68fa      	ldr	r2, [r7, #12]
 8000e94:	429a      	cmp	r2, r3
 8000e96:	d8f7      	bhi.n	8000e88 <HAL_Delay+0x28>
  {
  }
}
 8000e98:	bf00      	nop
 8000e9a:	bf00      	nop
 8000e9c:	3710      	adds	r7, #16
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	20000008 	.word	0x20000008

08000ea8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	b085      	sub	sp, #20
 8000eac:	af00      	add	r7, sp, #0
 8000eae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000eb0:	687b      	ldr	r3, [r7, #4]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000eb8:	4b0c      	ldr	r3, [pc, #48]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000eba:	68db      	ldr	r3, [r3, #12]
 8000ebc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ebe:	68ba      	ldr	r2, [r7, #8]
 8000ec0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ec4:	4013      	ands	r3, r2
 8000ec6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000ec8:	68fb      	ldr	r3, [r7, #12]
 8000eca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ed0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ed4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000ed8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eda:	4a04      	ldr	r2, [pc, #16]	@ (8000eec <__NVIC_SetPriorityGrouping+0x44>)
 8000edc:	68bb      	ldr	r3, [r7, #8]
 8000ede:	60d3      	str	r3, [r2, #12]
}
 8000ee0:	bf00      	nop
 8000ee2:	3714      	adds	r7, #20
 8000ee4:	46bd      	mov	sp, r7
 8000ee6:	bc80      	pop	{r7}
 8000ee8:	4770      	bx	lr
 8000eea:	bf00      	nop
 8000eec:	e000ed00 	.word	0xe000ed00

08000ef0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000ef0:	b480      	push	{r7}
 8000ef2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000ef4:	4b04      	ldr	r3, [pc, #16]	@ (8000f08 <__NVIC_GetPriorityGrouping+0x18>)
 8000ef6:	68db      	ldr	r3, [r3, #12]
 8000ef8:	0a1b      	lsrs	r3, r3, #8
 8000efa:	f003 0307 	and.w	r3, r3, #7
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	46bd      	mov	sp, r7
 8000f02:	bc80      	pop	{r7}
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	e000ed00 	.word	0xe000ed00

08000f0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f0c:	b480      	push	{r7}
 8000f0e:	b083      	sub	sp, #12
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	4603      	mov	r3, r0
 8000f14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f1a:	2b00      	cmp	r3, #0
 8000f1c:	db0b      	blt.n	8000f36 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f1e:	79fb      	ldrb	r3, [r7, #7]
 8000f20:	f003 021f 	and.w	r2, r3, #31
 8000f24:	4906      	ldr	r1, [pc, #24]	@ (8000f40 <__NVIC_EnableIRQ+0x34>)
 8000f26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2a:	095b      	lsrs	r3, r3, #5
 8000f2c:	2001      	movs	r0, #1
 8000f2e:	fa00 f202 	lsl.w	r2, r0, r2
 8000f32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f36:	bf00      	nop
 8000f38:	370c      	adds	r7, #12
 8000f3a:	46bd      	mov	sp, r7
 8000f3c:	bc80      	pop	{r7}
 8000f3e:	4770      	bx	lr
 8000f40:	e000e100 	.word	0xe000e100

08000f44 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f44:	b480      	push	{r7}
 8000f46:	b083      	sub	sp, #12
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	6039      	str	r1, [r7, #0]
 8000f4e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	db0a      	blt.n	8000f6e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f58:	683b      	ldr	r3, [r7, #0]
 8000f5a:	b2da      	uxtb	r2, r3
 8000f5c:	490c      	ldr	r1, [pc, #48]	@ (8000f90 <__NVIC_SetPriority+0x4c>)
 8000f5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f62:	0112      	lsls	r2, r2, #4
 8000f64:	b2d2      	uxtb	r2, r2
 8000f66:	440b      	add	r3, r1
 8000f68:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f6c:	e00a      	b.n	8000f84 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6e:	683b      	ldr	r3, [r7, #0]
 8000f70:	b2da      	uxtb	r2, r3
 8000f72:	4908      	ldr	r1, [pc, #32]	@ (8000f94 <__NVIC_SetPriority+0x50>)
 8000f74:	79fb      	ldrb	r3, [r7, #7]
 8000f76:	f003 030f 	and.w	r3, r3, #15
 8000f7a:	3b04      	subs	r3, #4
 8000f7c:	0112      	lsls	r2, r2, #4
 8000f7e:	b2d2      	uxtb	r2, r2
 8000f80:	440b      	add	r3, r1
 8000f82:	761a      	strb	r2, [r3, #24]
}
 8000f84:	bf00      	nop
 8000f86:	370c      	adds	r7, #12
 8000f88:	46bd      	mov	sp, r7
 8000f8a:	bc80      	pop	{r7}
 8000f8c:	4770      	bx	lr
 8000f8e:	bf00      	nop
 8000f90:	e000e100 	.word	0xe000e100
 8000f94:	e000ed00 	.word	0xe000ed00

08000f98 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000f98:	b480      	push	{r7}
 8000f9a:	b089      	sub	sp, #36	@ 0x24
 8000f9c:	af00      	add	r7, sp, #0
 8000f9e:	60f8      	str	r0, [r7, #12]
 8000fa0:	60b9      	str	r1, [r7, #8]
 8000fa2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fa4:	68fb      	ldr	r3, [r7, #12]
 8000fa6:	f003 0307 	and.w	r3, r3, #7
 8000faa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fac:	69fb      	ldr	r3, [r7, #28]
 8000fae:	f1c3 0307 	rsb	r3, r3, #7
 8000fb2:	2b04      	cmp	r3, #4
 8000fb4:	bf28      	it	cs
 8000fb6:	2304      	movcs	r3, #4
 8000fb8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fba:	69fb      	ldr	r3, [r7, #28]
 8000fbc:	3304      	adds	r3, #4
 8000fbe:	2b06      	cmp	r3, #6
 8000fc0:	d902      	bls.n	8000fc8 <NVIC_EncodePriority+0x30>
 8000fc2:	69fb      	ldr	r3, [r7, #28]
 8000fc4:	3b03      	subs	r3, #3
 8000fc6:	e000      	b.n	8000fca <NVIC_EncodePriority+0x32>
 8000fc8:	2300      	movs	r3, #0
 8000fca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8000fd0:	69bb      	ldr	r3, [r7, #24]
 8000fd2:	fa02 f303 	lsl.w	r3, r2, r3
 8000fd6:	43da      	mvns	r2, r3
 8000fd8:	68bb      	ldr	r3, [r7, #8]
 8000fda:	401a      	ands	r2, r3
 8000fdc:	697b      	ldr	r3, [r7, #20]
 8000fde:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000fe0:	f04f 31ff 	mov.w	r1, #4294967295
 8000fe4:	697b      	ldr	r3, [r7, #20]
 8000fe6:	fa01 f303 	lsl.w	r3, r1, r3
 8000fea:	43d9      	mvns	r1, r3
 8000fec:	687b      	ldr	r3, [r7, #4]
 8000fee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ff0:	4313      	orrs	r3, r2
         );
}
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	3724      	adds	r7, #36	@ 0x24
 8000ff6:	46bd      	mov	sp, r7
 8000ff8:	bc80      	pop	{r7}
 8000ffa:	4770      	bx	lr

08000ffc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ffc:	b580      	push	{r7, lr}
 8000ffe:	b082      	sub	sp, #8
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	3b01      	subs	r3, #1
 8001008:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800100c:	d301      	bcc.n	8001012 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800100e:	2301      	movs	r3, #1
 8001010:	e00f      	b.n	8001032 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001012:	4a0a      	ldr	r2, [pc, #40]	@ (800103c <SysTick_Config+0x40>)
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	3b01      	subs	r3, #1
 8001018:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800101a:	210f      	movs	r1, #15
 800101c:	f04f 30ff 	mov.w	r0, #4294967295
 8001020:	f7ff ff90 	bl	8000f44 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001024:	4b05      	ldr	r3, [pc, #20]	@ (800103c <SysTick_Config+0x40>)
 8001026:	2200      	movs	r2, #0
 8001028:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800102a:	4b04      	ldr	r3, [pc, #16]	@ (800103c <SysTick_Config+0x40>)
 800102c:	2207      	movs	r2, #7
 800102e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001030:	2300      	movs	r3, #0
}
 8001032:	4618      	mov	r0, r3
 8001034:	3708      	adds	r7, #8
 8001036:	46bd      	mov	sp, r7
 8001038:	bd80      	pop	{r7, pc}
 800103a:	bf00      	nop
 800103c:	e000e010 	.word	0xe000e010

08001040 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	b082      	sub	sp, #8
 8001044:	af00      	add	r7, sp, #0
 8001046:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001048:	6878      	ldr	r0, [r7, #4]
 800104a:	f7ff ff2d 	bl	8000ea8 <__NVIC_SetPriorityGrouping>
}
 800104e:	bf00      	nop
 8001050:	3708      	adds	r7, #8
 8001052:	46bd      	mov	sp, r7
 8001054:	bd80      	pop	{r7, pc}

08001056 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001056:	b580      	push	{r7, lr}
 8001058:	b086      	sub	sp, #24
 800105a:	af00      	add	r7, sp, #0
 800105c:	4603      	mov	r3, r0
 800105e:	60b9      	str	r1, [r7, #8]
 8001060:	607a      	str	r2, [r7, #4]
 8001062:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001064:	2300      	movs	r3, #0
 8001066:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001068:	f7ff ff42 	bl	8000ef0 <__NVIC_GetPriorityGrouping>
 800106c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800106e:	687a      	ldr	r2, [r7, #4]
 8001070:	68b9      	ldr	r1, [r7, #8]
 8001072:	6978      	ldr	r0, [r7, #20]
 8001074:	f7ff ff90 	bl	8000f98 <NVIC_EncodePriority>
 8001078:	4602      	mov	r2, r0
 800107a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800107e:	4611      	mov	r1, r2
 8001080:	4618      	mov	r0, r3
 8001082:	f7ff ff5f 	bl	8000f44 <__NVIC_SetPriority>
}
 8001086:	bf00      	nop
 8001088:	3718      	adds	r7, #24
 800108a:	46bd      	mov	sp, r7
 800108c:	bd80      	pop	{r7, pc}

0800108e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800108e:	b580      	push	{r7, lr}
 8001090:	b082      	sub	sp, #8
 8001092:	af00      	add	r7, sp, #0
 8001094:	4603      	mov	r3, r0
 8001096:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001098:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800109c:	4618      	mov	r0, r3
 800109e:	f7ff ff35 	bl	8000f0c <__NVIC_EnableIRQ>
}
 80010a2:	bf00      	nop
 80010a4:	3708      	adds	r7, #8
 80010a6:	46bd      	mov	sp, r7
 80010a8:	bd80      	pop	{r7, pc}

080010aa <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010aa:	b580      	push	{r7, lr}
 80010ac:	b082      	sub	sp, #8
 80010ae:	af00      	add	r7, sp, #0
 80010b0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010b2:	6878      	ldr	r0, [r7, #4]
 80010b4:	f7ff ffa2 	bl	8000ffc <SysTick_Config>
 80010b8:	4603      	mov	r3, r0
}
 80010ba:	4618      	mov	r0, r3
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80010c2:	b480      	push	{r7}
 80010c4:	b085      	sub	sp, #20
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80010ce:	687b      	ldr	r3, [r7, #4]
 80010d0:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80010d4:	b2db      	uxtb	r3, r3
 80010d6:	2b02      	cmp	r3, #2
 80010d8:	d008      	beq.n	80010ec <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80010da:	687b      	ldr	r3, [r7, #4]
 80010dc:	2204      	movs	r2, #4
 80010de:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2200      	movs	r2, #0
 80010e4:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 80010e8:	2301      	movs	r3, #1
 80010ea:	e020      	b.n	800112e <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	681a      	ldr	r2, [r3, #0]
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	f022 020e 	bic.w	r2, r2, #14
 80010fa:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80010fc:	687b      	ldr	r3, [r7, #4]
 80010fe:	681b      	ldr	r3, [r3, #0]
 8001100:	681a      	ldr	r2, [r3, #0]
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	f022 0201 	bic.w	r2, r2, #1
 800110a:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001114:	2101      	movs	r1, #1
 8001116:	fa01 f202 	lsl.w	r2, r1, r2
 800111a:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	2201      	movs	r2, #1
 8001120:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001124:	687b      	ldr	r3, [r7, #4]
 8001126:	2200      	movs	r2, #0
 8001128:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800112c:	7bfb      	ldrb	r3, [r7, #15]
}
 800112e:	4618      	mov	r0, r3
 8001130:	3714      	adds	r7, #20
 8001132:	46bd      	mov	sp, r7
 8001134:	bc80      	pop	{r7}
 8001136:	4770      	bx	lr

08001138 <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af00      	add	r7, sp, #0
 800113e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001140:	2300      	movs	r3, #0
 8001142:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800114a:	b2db      	uxtb	r3, r3
 800114c:	2b02      	cmp	r3, #2
 800114e:	d005      	beq.n	800115c <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001150:	687b      	ldr	r3, [r7, #4]
 8001152:	2204      	movs	r2, #4
 8001154:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 8001156:	2301      	movs	r3, #1
 8001158:	73fb      	strb	r3, [r7, #15]
 800115a:	e051      	b.n	8001200 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	f022 020e 	bic.w	r2, r2, #14
 800116a:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	681b      	ldr	r3, [r3, #0]
 8001170:	681a      	ldr	r2, [r3, #0]
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f022 0201 	bic.w	r2, r2, #1
 800117a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4a22      	ldr	r2, [pc, #136]	@ (800120c <HAL_DMA_Abort_IT+0xd4>)
 8001182:	4293      	cmp	r3, r2
 8001184:	d029      	beq.n	80011da <HAL_DMA_Abort_IT+0xa2>
 8001186:	687b      	ldr	r3, [r7, #4]
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4a21      	ldr	r2, [pc, #132]	@ (8001210 <HAL_DMA_Abort_IT+0xd8>)
 800118c:	4293      	cmp	r3, r2
 800118e:	d022      	beq.n	80011d6 <HAL_DMA_Abort_IT+0x9e>
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	681b      	ldr	r3, [r3, #0]
 8001194:	4a1f      	ldr	r2, [pc, #124]	@ (8001214 <HAL_DMA_Abort_IT+0xdc>)
 8001196:	4293      	cmp	r3, r2
 8001198:	d01a      	beq.n	80011d0 <HAL_DMA_Abort_IT+0x98>
 800119a:	687b      	ldr	r3, [r7, #4]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	4a1e      	ldr	r2, [pc, #120]	@ (8001218 <HAL_DMA_Abort_IT+0xe0>)
 80011a0:	4293      	cmp	r3, r2
 80011a2:	d012      	beq.n	80011ca <HAL_DMA_Abort_IT+0x92>
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	4a1c      	ldr	r2, [pc, #112]	@ (800121c <HAL_DMA_Abort_IT+0xe4>)
 80011aa:	4293      	cmp	r3, r2
 80011ac:	d00a      	beq.n	80011c4 <HAL_DMA_Abort_IT+0x8c>
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	681b      	ldr	r3, [r3, #0]
 80011b2:	4a1b      	ldr	r2, [pc, #108]	@ (8001220 <HAL_DMA_Abort_IT+0xe8>)
 80011b4:	4293      	cmp	r3, r2
 80011b6:	d102      	bne.n	80011be <HAL_DMA_Abort_IT+0x86>
 80011b8:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80011bc:	e00e      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011be:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80011c2:	e00b      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011c4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80011c8:	e008      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011ca:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80011ce:	e005      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011d0:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80011d4:	e002      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011d6:	2310      	movs	r3, #16
 80011d8:	e000      	b.n	80011dc <HAL_DMA_Abort_IT+0xa4>
 80011da:	2301      	movs	r3, #1
 80011dc:	4a11      	ldr	r2, [pc, #68]	@ (8001224 <HAL_DMA_Abort_IT+0xec>)
 80011de:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2201      	movs	r2, #1
 80011e4:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	2200      	movs	r2, #0
 80011ec:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d003      	beq.n	8001200 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80011fc:	6878      	ldr	r0, [r7, #4]
 80011fe:	4798      	blx	r3
    } 
  }
  return status;
 8001200:	7bfb      	ldrb	r3, [r7, #15]
}
 8001202:	4618      	mov	r0, r3
 8001204:	3710      	adds	r7, #16
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	40020008 	.word	0x40020008
 8001210:	4002001c 	.word	0x4002001c
 8001214:	40020030 	.word	0x40020030
 8001218:	40020044 	.word	0x40020044
 800121c:	40020058 	.word	0x40020058
 8001220:	4002006c 	.word	0x4002006c
 8001224:	40020000 	.word	0x40020000

08001228 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001228:	b480      	push	{r7}
 800122a:	b08b      	sub	sp, #44	@ 0x2c
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
 8001230:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001232:	2300      	movs	r3, #0
 8001234:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001236:	2300      	movs	r3, #0
 8001238:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800123a:	e169      	b.n	8001510 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 800123c:	2201      	movs	r2, #1
 800123e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001240:	fa02 f303 	lsl.w	r3, r2, r3
 8001244:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001246:	683b      	ldr	r3, [r7, #0]
 8001248:	681b      	ldr	r3, [r3, #0]
 800124a:	69fa      	ldr	r2, [r7, #28]
 800124c:	4013      	ands	r3, r2
 800124e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001250:	69ba      	ldr	r2, [r7, #24]
 8001252:	69fb      	ldr	r3, [r7, #28]
 8001254:	429a      	cmp	r2, r3
 8001256:	f040 8158 	bne.w	800150a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800125a:	683b      	ldr	r3, [r7, #0]
 800125c:	685b      	ldr	r3, [r3, #4]
 800125e:	4a9a      	ldr	r2, [pc, #616]	@ (80014c8 <HAL_GPIO_Init+0x2a0>)
 8001260:	4293      	cmp	r3, r2
 8001262:	d05e      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
 8001264:	4a98      	ldr	r2, [pc, #608]	@ (80014c8 <HAL_GPIO_Init+0x2a0>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d875      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 800126a:	4a98      	ldr	r2, [pc, #608]	@ (80014cc <HAL_GPIO_Init+0x2a4>)
 800126c:	4293      	cmp	r3, r2
 800126e:	d058      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
 8001270:	4a96      	ldr	r2, [pc, #600]	@ (80014cc <HAL_GPIO_Init+0x2a4>)
 8001272:	4293      	cmp	r3, r2
 8001274:	d86f      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 8001276:	4a96      	ldr	r2, [pc, #600]	@ (80014d0 <HAL_GPIO_Init+0x2a8>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d052      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
 800127c:	4a94      	ldr	r2, [pc, #592]	@ (80014d0 <HAL_GPIO_Init+0x2a8>)
 800127e:	4293      	cmp	r3, r2
 8001280:	d869      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 8001282:	4a94      	ldr	r2, [pc, #592]	@ (80014d4 <HAL_GPIO_Init+0x2ac>)
 8001284:	4293      	cmp	r3, r2
 8001286:	d04c      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
 8001288:	4a92      	ldr	r2, [pc, #584]	@ (80014d4 <HAL_GPIO_Init+0x2ac>)
 800128a:	4293      	cmp	r3, r2
 800128c:	d863      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 800128e:	4a92      	ldr	r2, [pc, #584]	@ (80014d8 <HAL_GPIO_Init+0x2b0>)
 8001290:	4293      	cmp	r3, r2
 8001292:	d046      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
 8001294:	4a90      	ldr	r2, [pc, #576]	@ (80014d8 <HAL_GPIO_Init+0x2b0>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d85d      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 800129a:	2b12      	cmp	r3, #18
 800129c:	d82a      	bhi.n	80012f4 <HAL_GPIO_Init+0xcc>
 800129e:	2b12      	cmp	r3, #18
 80012a0:	d859      	bhi.n	8001356 <HAL_GPIO_Init+0x12e>
 80012a2:	a201      	add	r2, pc, #4	@ (adr r2, 80012a8 <HAL_GPIO_Init+0x80>)
 80012a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80012a8:	08001323 	.word	0x08001323
 80012ac:	080012fd 	.word	0x080012fd
 80012b0:	0800130f 	.word	0x0800130f
 80012b4:	08001351 	.word	0x08001351
 80012b8:	08001357 	.word	0x08001357
 80012bc:	08001357 	.word	0x08001357
 80012c0:	08001357 	.word	0x08001357
 80012c4:	08001357 	.word	0x08001357
 80012c8:	08001357 	.word	0x08001357
 80012cc:	08001357 	.word	0x08001357
 80012d0:	08001357 	.word	0x08001357
 80012d4:	08001357 	.word	0x08001357
 80012d8:	08001357 	.word	0x08001357
 80012dc:	08001357 	.word	0x08001357
 80012e0:	08001357 	.word	0x08001357
 80012e4:	08001357 	.word	0x08001357
 80012e8:	08001357 	.word	0x08001357
 80012ec:	08001305 	.word	0x08001305
 80012f0:	08001319 	.word	0x08001319
 80012f4:	4a79      	ldr	r2, [pc, #484]	@ (80014dc <HAL_GPIO_Init+0x2b4>)
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d013      	beq.n	8001322 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80012fa:	e02c      	b.n	8001356 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80012fc:	683b      	ldr	r3, [r7, #0]
 80012fe:	68db      	ldr	r3, [r3, #12]
 8001300:	623b      	str	r3, [r7, #32]
          break;
 8001302:	e029      	b.n	8001358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	68db      	ldr	r3, [r3, #12]
 8001308:	3304      	adds	r3, #4
 800130a:	623b      	str	r3, [r7, #32]
          break;
 800130c:	e024      	b.n	8001358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800130e:	683b      	ldr	r3, [r7, #0]
 8001310:	68db      	ldr	r3, [r3, #12]
 8001312:	3308      	adds	r3, #8
 8001314:	623b      	str	r3, [r7, #32]
          break;
 8001316:	e01f      	b.n	8001358 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001318:	683b      	ldr	r3, [r7, #0]
 800131a:	68db      	ldr	r3, [r3, #12]
 800131c:	330c      	adds	r3, #12
 800131e:	623b      	str	r3, [r7, #32]
          break;
 8001320:	e01a      	b.n	8001358 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001322:	683b      	ldr	r3, [r7, #0]
 8001324:	689b      	ldr	r3, [r3, #8]
 8001326:	2b00      	cmp	r3, #0
 8001328:	d102      	bne.n	8001330 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800132a:	2304      	movs	r3, #4
 800132c:	623b      	str	r3, [r7, #32]
          break;
 800132e:	e013      	b.n	8001358 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001330:	683b      	ldr	r3, [r7, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	2b01      	cmp	r3, #1
 8001336:	d105      	bne.n	8001344 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001338:	2308      	movs	r3, #8
 800133a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	69fa      	ldr	r2, [r7, #28]
 8001340:	611a      	str	r2, [r3, #16]
          break;
 8001342:	e009      	b.n	8001358 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001344:	2308      	movs	r3, #8
 8001346:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	69fa      	ldr	r2, [r7, #28]
 800134c:	615a      	str	r2, [r3, #20]
          break;
 800134e:	e003      	b.n	8001358 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001350:	2300      	movs	r3, #0
 8001352:	623b      	str	r3, [r7, #32]
          break;
 8001354:	e000      	b.n	8001358 <HAL_GPIO_Init+0x130>
          break;
 8001356:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001358:	69bb      	ldr	r3, [r7, #24]
 800135a:	2bff      	cmp	r3, #255	@ 0xff
 800135c:	d801      	bhi.n	8001362 <HAL_GPIO_Init+0x13a>
 800135e:	687b      	ldr	r3, [r7, #4]
 8001360:	e001      	b.n	8001366 <HAL_GPIO_Init+0x13e>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	3304      	adds	r3, #4
 8001366:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001368:	69bb      	ldr	r3, [r7, #24]
 800136a:	2bff      	cmp	r3, #255	@ 0xff
 800136c:	d802      	bhi.n	8001374 <HAL_GPIO_Init+0x14c>
 800136e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	e002      	b.n	800137a <HAL_GPIO_Init+0x152>
 8001374:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001376:	3b08      	subs	r3, #8
 8001378:	009b      	lsls	r3, r3, #2
 800137a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800137c:	697b      	ldr	r3, [r7, #20]
 800137e:	681a      	ldr	r2, [r3, #0]
 8001380:	210f      	movs	r1, #15
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	fa01 f303 	lsl.w	r3, r1, r3
 8001388:	43db      	mvns	r3, r3
 800138a:	401a      	ands	r2, r3
 800138c:	6a39      	ldr	r1, [r7, #32]
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	fa01 f303 	lsl.w	r3, r1, r3
 8001394:	431a      	orrs	r2, r3
 8001396:	697b      	ldr	r3, [r7, #20]
 8001398:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800139a:	683b      	ldr	r3, [r7, #0]
 800139c:	685b      	ldr	r3, [r3, #4]
 800139e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	f000 80b1 	beq.w	800150a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80013a8:	4b4d      	ldr	r3, [pc, #308]	@ (80014e0 <HAL_GPIO_Init+0x2b8>)
 80013aa:	699b      	ldr	r3, [r3, #24]
 80013ac:	4a4c      	ldr	r2, [pc, #304]	@ (80014e0 <HAL_GPIO_Init+0x2b8>)
 80013ae:	f043 0301 	orr.w	r3, r3, #1
 80013b2:	6193      	str	r3, [r2, #24]
 80013b4:	4b4a      	ldr	r3, [pc, #296]	@ (80014e0 <HAL_GPIO_Init+0x2b8>)
 80013b6:	699b      	ldr	r3, [r3, #24]
 80013b8:	f003 0301 	and.w	r3, r3, #1
 80013bc:	60bb      	str	r3, [r7, #8]
 80013be:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 80013c0:	4a48      	ldr	r2, [pc, #288]	@ (80014e4 <HAL_GPIO_Init+0x2bc>)
 80013c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c4:	089b      	lsrs	r3, r3, #2
 80013c6:	3302      	adds	r3, #2
 80013c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80013cc:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 80013ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013d0:	f003 0303 	and.w	r3, r3, #3
 80013d4:	009b      	lsls	r3, r3, #2
 80013d6:	220f      	movs	r2, #15
 80013d8:	fa02 f303 	lsl.w	r3, r2, r3
 80013dc:	43db      	mvns	r3, r3
 80013de:	68fa      	ldr	r2, [r7, #12]
 80013e0:	4013      	ands	r3, r2
 80013e2:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	4a40      	ldr	r2, [pc, #256]	@ (80014e8 <HAL_GPIO_Init+0x2c0>)
 80013e8:	4293      	cmp	r3, r2
 80013ea:	d013      	beq.n	8001414 <HAL_GPIO_Init+0x1ec>
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	4a3f      	ldr	r2, [pc, #252]	@ (80014ec <HAL_GPIO_Init+0x2c4>)
 80013f0:	4293      	cmp	r3, r2
 80013f2:	d00d      	beq.n	8001410 <HAL_GPIO_Init+0x1e8>
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	4a3e      	ldr	r2, [pc, #248]	@ (80014f0 <HAL_GPIO_Init+0x2c8>)
 80013f8:	4293      	cmp	r3, r2
 80013fa:	d007      	beq.n	800140c <HAL_GPIO_Init+0x1e4>
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	4a3d      	ldr	r2, [pc, #244]	@ (80014f4 <HAL_GPIO_Init+0x2cc>)
 8001400:	4293      	cmp	r3, r2
 8001402:	d101      	bne.n	8001408 <HAL_GPIO_Init+0x1e0>
 8001404:	2303      	movs	r3, #3
 8001406:	e006      	b.n	8001416 <HAL_GPIO_Init+0x1ee>
 8001408:	2304      	movs	r3, #4
 800140a:	e004      	b.n	8001416 <HAL_GPIO_Init+0x1ee>
 800140c:	2302      	movs	r3, #2
 800140e:	e002      	b.n	8001416 <HAL_GPIO_Init+0x1ee>
 8001410:	2301      	movs	r3, #1
 8001412:	e000      	b.n	8001416 <HAL_GPIO_Init+0x1ee>
 8001414:	2300      	movs	r3, #0
 8001416:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001418:	f002 0203 	and.w	r2, r2, #3
 800141c:	0092      	lsls	r2, r2, #2
 800141e:	4093      	lsls	r3, r2
 8001420:	68fa      	ldr	r2, [r7, #12]
 8001422:	4313      	orrs	r3, r2
 8001424:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001426:	492f      	ldr	r1, [pc, #188]	@ (80014e4 <HAL_GPIO_Init+0x2bc>)
 8001428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800142a:	089b      	lsrs	r3, r3, #2
 800142c:	3302      	adds	r3, #2
 800142e:	68fa      	ldr	r2, [r7, #12]
 8001430:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001434:	683b      	ldr	r3, [r7, #0]
 8001436:	685b      	ldr	r3, [r3, #4]
 8001438:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800143c:	2b00      	cmp	r3, #0
 800143e:	d006      	beq.n	800144e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001440:	4b2d      	ldr	r3, [pc, #180]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001442:	689a      	ldr	r2, [r3, #8]
 8001444:	492c      	ldr	r1, [pc, #176]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001446:	69bb      	ldr	r3, [r7, #24]
 8001448:	4313      	orrs	r3, r2
 800144a:	608b      	str	r3, [r1, #8]
 800144c:	e006      	b.n	800145c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800144e:	4b2a      	ldr	r3, [pc, #168]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001450:	689a      	ldr	r2, [r3, #8]
 8001452:	69bb      	ldr	r3, [r7, #24]
 8001454:	43db      	mvns	r3, r3
 8001456:	4928      	ldr	r1, [pc, #160]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001458:	4013      	ands	r3, r2
 800145a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800145c:	683b      	ldr	r3, [r7, #0]
 800145e:	685b      	ldr	r3, [r3, #4]
 8001460:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001464:	2b00      	cmp	r3, #0
 8001466:	d006      	beq.n	8001476 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001468:	4b23      	ldr	r3, [pc, #140]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 800146a:	68da      	ldr	r2, [r3, #12]
 800146c:	4922      	ldr	r1, [pc, #136]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 800146e:	69bb      	ldr	r3, [r7, #24]
 8001470:	4313      	orrs	r3, r2
 8001472:	60cb      	str	r3, [r1, #12]
 8001474:	e006      	b.n	8001484 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001476:	4b20      	ldr	r3, [pc, #128]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001478:	68da      	ldr	r2, [r3, #12]
 800147a:	69bb      	ldr	r3, [r7, #24]
 800147c:	43db      	mvns	r3, r3
 800147e:	491e      	ldr	r1, [pc, #120]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001480:	4013      	ands	r3, r2
 8001482:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001484:	683b      	ldr	r3, [r7, #0]
 8001486:	685b      	ldr	r3, [r3, #4]
 8001488:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800148c:	2b00      	cmp	r3, #0
 800148e:	d006      	beq.n	800149e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001490:	4b19      	ldr	r3, [pc, #100]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001492:	685a      	ldr	r2, [r3, #4]
 8001494:	4918      	ldr	r1, [pc, #96]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 8001496:	69bb      	ldr	r3, [r7, #24]
 8001498:	4313      	orrs	r3, r2
 800149a:	604b      	str	r3, [r1, #4]
 800149c:	e006      	b.n	80014ac <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800149e:	4b16      	ldr	r3, [pc, #88]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	69bb      	ldr	r3, [r7, #24]
 80014a4:	43db      	mvns	r3, r3
 80014a6:	4914      	ldr	r1, [pc, #80]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014a8:	4013      	ands	r3, r2
 80014aa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80014ac:	683b      	ldr	r3, [r7, #0]
 80014ae:	685b      	ldr	r3, [r3, #4]
 80014b0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d021      	beq.n	80014fc <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80014b8:	4b0f      	ldr	r3, [pc, #60]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014ba:	681a      	ldr	r2, [r3, #0]
 80014bc:	490e      	ldr	r1, [pc, #56]	@ (80014f8 <HAL_GPIO_Init+0x2d0>)
 80014be:	69bb      	ldr	r3, [r7, #24]
 80014c0:	4313      	orrs	r3, r2
 80014c2:	600b      	str	r3, [r1, #0]
 80014c4:	e021      	b.n	800150a <HAL_GPIO_Init+0x2e2>
 80014c6:	bf00      	nop
 80014c8:	10320000 	.word	0x10320000
 80014cc:	10310000 	.word	0x10310000
 80014d0:	10220000 	.word	0x10220000
 80014d4:	10210000 	.word	0x10210000
 80014d8:	10120000 	.word	0x10120000
 80014dc:	10110000 	.word	0x10110000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40010000 	.word	0x40010000
 80014e8:	40010800 	.word	0x40010800
 80014ec:	40010c00 	.word	0x40010c00
 80014f0:	40011000 	.word	0x40011000
 80014f4:	40011400 	.word	0x40011400
 80014f8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80014fc:	4b0b      	ldr	r3, [pc, #44]	@ (800152c <HAL_GPIO_Init+0x304>)
 80014fe:	681a      	ldr	r2, [r3, #0]
 8001500:	69bb      	ldr	r3, [r7, #24]
 8001502:	43db      	mvns	r3, r3
 8001504:	4909      	ldr	r1, [pc, #36]	@ (800152c <HAL_GPIO_Init+0x304>)
 8001506:	4013      	ands	r3, r2
 8001508:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800150a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800150c:	3301      	adds	r3, #1
 800150e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001510:	683b      	ldr	r3, [r7, #0]
 8001512:	681a      	ldr	r2, [r3, #0]
 8001514:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001516:	fa22 f303 	lsr.w	r3, r2, r3
 800151a:	2b00      	cmp	r3, #0
 800151c:	f47f ae8e 	bne.w	800123c <HAL_GPIO_Init+0x14>
  }
}
 8001520:	bf00      	nop
 8001522:	bf00      	nop
 8001524:	372c      	adds	r7, #44	@ 0x2c
 8001526:	46bd      	mov	sp, r7
 8001528:	bc80      	pop	{r7}
 800152a:	4770      	bx	lr
 800152c:	40010400 	.word	0x40010400

08001530 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001530:	b480      	push	{r7}
 8001532:	b085      	sub	sp, #20
 8001534:	af00      	add	r7, sp, #0
 8001536:	6078      	str	r0, [r7, #4]
 8001538:	460b      	mov	r3, r1
 800153a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	689a      	ldr	r2, [r3, #8]
 8001540:	887b      	ldrh	r3, [r7, #2]
 8001542:	4013      	ands	r3, r2
 8001544:	2b00      	cmp	r3, #0
 8001546:	d002      	beq.n	800154e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001548:	2301      	movs	r3, #1
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e001      	b.n	8001552 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800154e:	2300      	movs	r3, #0
 8001550:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001552:	7bfb      	ldrb	r3, [r7, #15]
}
 8001554:	4618      	mov	r0, r3
 8001556:	3714      	adds	r7, #20
 8001558:	46bd      	mov	sp, r7
 800155a:	bc80      	pop	{r7}
 800155c:	4770      	bx	lr

0800155e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800155e:	b480      	push	{r7}
 8001560:	b083      	sub	sp, #12
 8001562:	af00      	add	r7, sp, #0
 8001564:	6078      	str	r0, [r7, #4]
 8001566:	460b      	mov	r3, r1
 8001568:	807b      	strh	r3, [r7, #2]
 800156a:	4613      	mov	r3, r2
 800156c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800156e:	787b      	ldrb	r3, [r7, #1]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001574:	887a      	ldrh	r2, [r7, #2]
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800157a:	e003      	b.n	8001584 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800157c:	887b      	ldrh	r3, [r7, #2]
 800157e:	041a      	lsls	r2, r3, #16
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	611a      	str	r2, [r3, #16]
}
 8001584:	bf00      	nop
 8001586:	370c      	adds	r7, #12
 8001588:	46bd      	mov	sp, r7
 800158a:	bc80      	pop	{r7}
 800158c:	4770      	bx	lr
	...

08001590 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001590:	b580      	push	{r7, lr}
 8001592:	b082      	sub	sp, #8
 8001594:	af00      	add	r7, sp, #0
 8001596:	4603      	mov	r3, r0
 8001598:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 800159a:	4b08      	ldr	r3, [pc, #32]	@ (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 800159c:	695a      	ldr	r2, [r3, #20]
 800159e:	88fb      	ldrh	r3, [r7, #6]
 80015a0:	4013      	ands	r3, r2
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d006      	beq.n	80015b4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80015a6:	4a05      	ldr	r2, [pc, #20]	@ (80015bc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80015a8:	88fb      	ldrh	r3, [r7, #6]
 80015aa:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80015ac:	88fb      	ldrh	r3, [r7, #6]
 80015ae:	4618      	mov	r0, r3
 80015b0:	f000 f806 	bl	80015c0 <HAL_GPIO_EXTI_Callback>
  }
}
 80015b4:	bf00      	nop
 80015b6:	3708      	adds	r7, #8
 80015b8:	46bd      	mov	sp, r7
 80015ba:	bd80      	pop	{r7, pc}
 80015bc:	40010400 	.word	0x40010400

080015c0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80015c0:	b480      	push	{r7}
 80015c2:	b083      	sub	sp, #12
 80015c4:	af00      	add	r7, sp, #0
 80015c6:	4603      	mov	r3, r0
 80015c8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80015ca:	bf00      	nop
 80015cc:	370c      	adds	r7, #12
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bc80      	pop	{r7}
 80015d2:	4770      	bx	lr

080015d4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b086      	sub	sp, #24
 80015d8:	af00      	add	r7, sp, #0
 80015da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	2b00      	cmp	r3, #0
 80015e0:	d101      	bne.n	80015e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015e2:	2301      	movs	r3, #1
 80015e4:	e272      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015e6:	687b      	ldr	r3, [r7, #4]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f003 0301 	and.w	r3, r3, #1
 80015ee:	2b00      	cmp	r3, #0
 80015f0:	f000 8087 	beq.w	8001702 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80015f4:	4b92      	ldr	r3, [pc, #584]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80015f6:	685b      	ldr	r3, [r3, #4]
 80015f8:	f003 030c 	and.w	r3, r3, #12
 80015fc:	2b04      	cmp	r3, #4
 80015fe:	d00c      	beq.n	800161a <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001600:	4b8f      	ldr	r3, [pc, #572]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001602:	685b      	ldr	r3, [r3, #4]
 8001604:	f003 030c 	and.w	r3, r3, #12
 8001608:	2b08      	cmp	r3, #8
 800160a:	d112      	bne.n	8001632 <HAL_RCC_OscConfig+0x5e>
 800160c:	4b8c      	ldr	r3, [pc, #560]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800160e:	685b      	ldr	r3, [r3, #4]
 8001610:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001614:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001618:	d10b      	bne.n	8001632 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800161a:	4b89      	ldr	r3, [pc, #548]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001622:	2b00      	cmp	r3, #0
 8001624:	d06c      	beq.n	8001700 <HAL_RCC_OscConfig+0x12c>
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	685b      	ldr	r3, [r3, #4]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d168      	bne.n	8001700 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800162e:	2301      	movs	r3, #1
 8001630:	e24c      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	685b      	ldr	r3, [r3, #4]
 8001636:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800163a:	d106      	bne.n	800164a <HAL_RCC_OscConfig+0x76>
 800163c:	4b80      	ldr	r3, [pc, #512]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	4a7f      	ldr	r2, [pc, #508]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001642:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e02e      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	685b      	ldr	r3, [r3, #4]
 800164e:	2b00      	cmp	r3, #0
 8001650:	d10c      	bne.n	800166c <HAL_RCC_OscConfig+0x98>
 8001652:	4b7b      	ldr	r3, [pc, #492]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a7a      	ldr	r2, [pc, #488]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001658:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	4b78      	ldr	r3, [pc, #480]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	4a77      	ldr	r2, [pc, #476]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001664:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001668:	6013      	str	r3, [r2, #0]
 800166a:	e01d      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	685b      	ldr	r3, [r3, #4]
 8001670:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001674:	d10c      	bne.n	8001690 <HAL_RCC_OscConfig+0xbc>
 8001676:	4b72      	ldr	r3, [pc, #456]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a71      	ldr	r2, [pc, #452]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800167c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	4b6f      	ldr	r3, [pc, #444]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	4a6e      	ldr	r2, [pc, #440]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001688:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800168c:	6013      	str	r3, [r2, #0]
 800168e:	e00b      	b.n	80016a8 <HAL_RCC_OscConfig+0xd4>
 8001690:	4b6b      	ldr	r3, [pc, #428]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a6a      	ldr	r2, [pc, #424]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001696:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800169a:	6013      	str	r3, [r2, #0]
 800169c:	4b68      	ldr	r3, [pc, #416]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	4a67      	ldr	r2, [pc, #412]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80016a6:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d013      	beq.n	80016d8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016b0:	f7ff fbcc 	bl	8000e4c <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016b6:	e008      	b.n	80016ca <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016b8:	f7ff fbc8 	bl	8000e4c <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	2b64      	cmp	r3, #100	@ 0x64
 80016c4:	d901      	bls.n	80016ca <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80016c6:	2303      	movs	r3, #3
 80016c8:	e200      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016ca:	4b5d      	ldr	r3, [pc, #372]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016d2:	2b00      	cmp	r3, #0
 80016d4:	d0f0      	beq.n	80016b8 <HAL_RCC_OscConfig+0xe4>
 80016d6:	e014      	b.n	8001702 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016d8:	f7ff fbb8 	bl	8000e4c <HAL_GetTick>
 80016dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016de:	e008      	b.n	80016f2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016e0:	f7ff fbb4 	bl	8000e4c <HAL_GetTick>
 80016e4:	4602      	mov	r2, r0
 80016e6:	693b      	ldr	r3, [r7, #16]
 80016e8:	1ad3      	subs	r3, r2, r3
 80016ea:	2b64      	cmp	r3, #100	@ 0x64
 80016ec:	d901      	bls.n	80016f2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80016ee:	2303      	movs	r3, #3
 80016f0:	e1ec      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016f2:	4b53      	ldr	r3, [pc, #332]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d1f0      	bne.n	80016e0 <HAL_RCC_OscConfig+0x10c>
 80016fe:	e000      	b.n	8001702 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001700:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f003 0302 	and.w	r3, r3, #2
 800170a:	2b00      	cmp	r3, #0
 800170c:	d063      	beq.n	80017d6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800170e:	4b4c      	ldr	r3, [pc, #304]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001710:	685b      	ldr	r3, [r3, #4]
 8001712:	f003 030c 	and.w	r3, r3, #12
 8001716:	2b00      	cmp	r3, #0
 8001718:	d00b      	beq.n	8001732 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800171a:	4b49      	ldr	r3, [pc, #292]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f003 030c 	and.w	r3, r3, #12
 8001722:	2b08      	cmp	r3, #8
 8001724:	d11c      	bne.n	8001760 <HAL_RCC_OscConfig+0x18c>
 8001726:	4b46      	ldr	r3, [pc, #280]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001728:	685b      	ldr	r3, [r3, #4]
 800172a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800172e:	2b00      	cmp	r3, #0
 8001730:	d116      	bne.n	8001760 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001732:	4b43      	ldr	r3, [pc, #268]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	f003 0302 	and.w	r3, r3, #2
 800173a:	2b00      	cmp	r3, #0
 800173c:	d005      	beq.n	800174a <HAL_RCC_OscConfig+0x176>
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	691b      	ldr	r3, [r3, #16]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d001      	beq.n	800174a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001746:	2301      	movs	r3, #1
 8001748:	e1c0      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800174a:	4b3d      	ldr	r3, [pc, #244]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	695b      	ldr	r3, [r3, #20]
 8001756:	00db      	lsls	r3, r3, #3
 8001758:	4939      	ldr	r1, [pc, #228]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800175a:	4313      	orrs	r3, r2
 800175c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800175e:	e03a      	b.n	80017d6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	691b      	ldr	r3, [r3, #16]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d020      	beq.n	80017aa <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001768:	4b36      	ldr	r3, [pc, #216]	@ (8001844 <HAL_RCC_OscConfig+0x270>)
 800176a:	2201      	movs	r2, #1
 800176c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800176e:	f7ff fb6d 	bl	8000e4c <HAL_GetTick>
 8001772:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001774:	e008      	b.n	8001788 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001776:	f7ff fb69 	bl	8000e4c <HAL_GetTick>
 800177a:	4602      	mov	r2, r0
 800177c:	693b      	ldr	r3, [r7, #16]
 800177e:	1ad3      	subs	r3, r2, r3
 8001780:	2b02      	cmp	r3, #2
 8001782:	d901      	bls.n	8001788 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001784:	2303      	movs	r3, #3
 8001786:	e1a1      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001788:	4b2d      	ldr	r3, [pc, #180]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f003 0302 	and.w	r3, r3, #2
 8001790:	2b00      	cmp	r3, #0
 8001792:	d0f0      	beq.n	8001776 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001794:	4b2a      	ldr	r3, [pc, #168]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	695b      	ldr	r3, [r3, #20]
 80017a0:	00db      	lsls	r3, r3, #3
 80017a2:	4927      	ldr	r1, [pc, #156]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80017a4:	4313      	orrs	r3, r2
 80017a6:	600b      	str	r3, [r1, #0]
 80017a8:	e015      	b.n	80017d6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80017aa:	4b26      	ldr	r3, [pc, #152]	@ (8001844 <HAL_RCC_OscConfig+0x270>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80017b0:	f7ff fb4c 	bl	8000e4c <HAL_GetTick>
 80017b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017b6:	e008      	b.n	80017ca <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017b8:	f7ff fb48 	bl	8000e4c <HAL_GetTick>
 80017bc:	4602      	mov	r2, r0
 80017be:	693b      	ldr	r3, [r7, #16]
 80017c0:	1ad3      	subs	r3, r2, r3
 80017c2:	2b02      	cmp	r3, #2
 80017c4:	d901      	bls.n	80017ca <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80017c6:	2303      	movs	r3, #3
 80017c8:	e180      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017ca:	4b1d      	ldr	r3, [pc, #116]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0302 	and.w	r3, r3, #2
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d1f0      	bne.n	80017b8 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0308 	and.w	r3, r3, #8
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d03a      	beq.n	8001858 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	699b      	ldr	r3, [r3, #24]
 80017e6:	2b00      	cmp	r3, #0
 80017e8:	d019      	beq.n	800181e <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017ea:	4b17      	ldr	r3, [pc, #92]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 80017ec:	2201      	movs	r2, #1
 80017ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017f0:	f7ff fb2c 	bl	8000e4c <HAL_GetTick>
 80017f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017f6:	e008      	b.n	800180a <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017f8:	f7ff fb28 	bl	8000e4c <HAL_GetTick>
 80017fc:	4602      	mov	r2, r0
 80017fe:	693b      	ldr	r3, [r7, #16]
 8001800:	1ad3      	subs	r3, r2, r3
 8001802:	2b02      	cmp	r3, #2
 8001804:	d901      	bls.n	800180a <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001806:	2303      	movs	r3, #3
 8001808:	e160      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800180a:	4b0d      	ldr	r3, [pc, #52]	@ (8001840 <HAL_RCC_OscConfig+0x26c>)
 800180c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800180e:	f003 0302 	and.w	r3, r3, #2
 8001812:	2b00      	cmp	r3, #0
 8001814:	d0f0      	beq.n	80017f8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001816:	2001      	movs	r0, #1
 8001818:	f000 face 	bl	8001db8 <RCC_Delay>
 800181c:	e01c      	b.n	8001858 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800181e:	4b0a      	ldr	r3, [pc, #40]	@ (8001848 <HAL_RCC_OscConfig+0x274>)
 8001820:	2200      	movs	r2, #0
 8001822:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001824:	f7ff fb12 	bl	8000e4c <HAL_GetTick>
 8001828:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800182a:	e00f      	b.n	800184c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800182c:	f7ff fb0e 	bl	8000e4c <HAL_GetTick>
 8001830:	4602      	mov	r2, r0
 8001832:	693b      	ldr	r3, [r7, #16]
 8001834:	1ad3      	subs	r3, r2, r3
 8001836:	2b02      	cmp	r3, #2
 8001838:	d908      	bls.n	800184c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800183a:	2303      	movs	r3, #3
 800183c:	e146      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
 800183e:	bf00      	nop
 8001840:	40021000 	.word	0x40021000
 8001844:	42420000 	.word	0x42420000
 8001848:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800184c:	4b92      	ldr	r3, [pc, #584]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800184e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001850:	f003 0302 	and.w	r3, r3, #2
 8001854:	2b00      	cmp	r3, #0
 8001856:	d1e9      	bne.n	800182c <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	f003 0304 	and.w	r3, r3, #4
 8001860:	2b00      	cmp	r3, #0
 8001862:	f000 80a6 	beq.w	80019b2 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001866:	2300      	movs	r3, #0
 8001868:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800186a:	4b8b      	ldr	r3, [pc, #556]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800186c:	69db      	ldr	r3, [r3, #28]
 800186e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d10d      	bne.n	8001892 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001876:	4b88      	ldr	r3, [pc, #544]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001878:	69db      	ldr	r3, [r3, #28]
 800187a:	4a87      	ldr	r2, [pc, #540]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800187c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001880:	61d3      	str	r3, [r2, #28]
 8001882:	4b85      	ldr	r3, [pc, #532]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001884:	69db      	ldr	r3, [r3, #28]
 8001886:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800188e:	2301      	movs	r3, #1
 8001890:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001892:	4b82      	ldr	r3, [pc, #520]	@ (8001a9c <HAL_RCC_OscConfig+0x4c8>)
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800189a:	2b00      	cmp	r3, #0
 800189c:	d118      	bne.n	80018d0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800189e:	4b7f      	ldr	r3, [pc, #508]	@ (8001a9c <HAL_RCC_OscConfig+0x4c8>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a7e      	ldr	r2, [pc, #504]	@ (8001a9c <HAL_RCC_OscConfig+0x4c8>)
 80018a4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80018a8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80018aa:	f7ff facf 	bl	8000e4c <HAL_GetTick>
 80018ae:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b0:	e008      	b.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018b2:	f7ff facb 	bl	8000e4c <HAL_GetTick>
 80018b6:	4602      	mov	r2, r0
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	1ad3      	subs	r3, r2, r3
 80018bc:	2b64      	cmp	r3, #100	@ 0x64
 80018be:	d901      	bls.n	80018c4 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80018c0:	2303      	movs	r3, #3
 80018c2:	e103      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018c4:	4b75      	ldr	r3, [pc, #468]	@ (8001a9c <HAL_RCC_OscConfig+0x4c8>)
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d0f0      	beq.n	80018b2 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018d0:	687b      	ldr	r3, [r7, #4]
 80018d2:	68db      	ldr	r3, [r3, #12]
 80018d4:	2b01      	cmp	r3, #1
 80018d6:	d106      	bne.n	80018e6 <HAL_RCC_OscConfig+0x312>
 80018d8:	4b6f      	ldr	r3, [pc, #444]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80018da:	6a1b      	ldr	r3, [r3, #32]
 80018dc:	4a6e      	ldr	r2, [pc, #440]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80018de:	f043 0301 	orr.w	r3, r3, #1
 80018e2:	6213      	str	r3, [r2, #32]
 80018e4:	e02d      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	68db      	ldr	r3, [r3, #12]
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d10c      	bne.n	8001908 <HAL_RCC_OscConfig+0x334>
 80018ee:	4b6a      	ldr	r3, [pc, #424]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80018f0:	6a1b      	ldr	r3, [r3, #32]
 80018f2:	4a69      	ldr	r2, [pc, #420]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80018f4:	f023 0301 	bic.w	r3, r3, #1
 80018f8:	6213      	str	r3, [r2, #32]
 80018fa:	4b67      	ldr	r3, [pc, #412]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80018fc:	6a1b      	ldr	r3, [r3, #32]
 80018fe:	4a66      	ldr	r2, [pc, #408]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001900:	f023 0304 	bic.w	r3, r3, #4
 8001904:	6213      	str	r3, [r2, #32]
 8001906:	e01c      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	2b05      	cmp	r3, #5
 800190e:	d10c      	bne.n	800192a <HAL_RCC_OscConfig+0x356>
 8001910:	4b61      	ldr	r3, [pc, #388]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001912:	6a1b      	ldr	r3, [r3, #32]
 8001914:	4a60      	ldr	r2, [pc, #384]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001916:	f043 0304 	orr.w	r3, r3, #4
 800191a:	6213      	str	r3, [r2, #32]
 800191c:	4b5e      	ldr	r3, [pc, #376]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800191e:	6a1b      	ldr	r3, [r3, #32]
 8001920:	4a5d      	ldr	r2, [pc, #372]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001922:	f043 0301 	orr.w	r3, r3, #1
 8001926:	6213      	str	r3, [r2, #32]
 8001928:	e00b      	b.n	8001942 <HAL_RCC_OscConfig+0x36e>
 800192a:	4b5b      	ldr	r3, [pc, #364]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800192c:	6a1b      	ldr	r3, [r3, #32]
 800192e:	4a5a      	ldr	r2, [pc, #360]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001930:	f023 0301 	bic.w	r3, r3, #1
 8001934:	6213      	str	r3, [r2, #32]
 8001936:	4b58      	ldr	r3, [pc, #352]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001938:	6a1b      	ldr	r3, [r3, #32]
 800193a:	4a57      	ldr	r2, [pc, #348]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800193c:	f023 0304 	bic.w	r3, r3, #4
 8001940:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68db      	ldr	r3, [r3, #12]
 8001946:	2b00      	cmp	r3, #0
 8001948:	d015      	beq.n	8001976 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800194a:	f7ff fa7f 	bl	8000e4c <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001950:	e00a      	b.n	8001968 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001952:	f7ff fa7b 	bl	8000e4c <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001960:	4293      	cmp	r3, r2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e0b1      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001968:	4b4b      	ldr	r3, [pc, #300]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 800196a:	6a1b      	ldr	r3, [r3, #32]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0ee      	beq.n	8001952 <HAL_RCC_OscConfig+0x37e>
 8001974:	e014      	b.n	80019a0 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001976:	f7ff fa69 	bl	8000e4c <HAL_GetTick>
 800197a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800197c:	e00a      	b.n	8001994 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800197e:	f7ff fa65 	bl	8000e4c <HAL_GetTick>
 8001982:	4602      	mov	r2, r0
 8001984:	693b      	ldr	r3, [r7, #16]
 8001986:	1ad3      	subs	r3, r2, r3
 8001988:	f241 3288 	movw	r2, #5000	@ 0x1388
 800198c:	4293      	cmp	r3, r2
 800198e:	d901      	bls.n	8001994 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8001990:	2303      	movs	r3, #3
 8001992:	e09b      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001994:	4b40      	ldr	r3, [pc, #256]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001996:	6a1b      	ldr	r3, [r3, #32]
 8001998:	f003 0302 	and.w	r3, r3, #2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d1ee      	bne.n	800197e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80019a0:	7dfb      	ldrb	r3, [r7, #23]
 80019a2:	2b01      	cmp	r3, #1
 80019a4:	d105      	bne.n	80019b2 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80019a6:	4b3c      	ldr	r3, [pc, #240]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80019a8:	69db      	ldr	r3, [r3, #28]
 80019aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80019ac:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80019b0:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	69db      	ldr	r3, [r3, #28]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	f000 8087 	beq.w	8001aca <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80019bc:	4b36      	ldr	r3, [pc, #216]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80019be:	685b      	ldr	r3, [r3, #4]
 80019c0:	f003 030c 	and.w	r3, r3, #12
 80019c4:	2b08      	cmp	r3, #8
 80019c6:	d061      	beq.n	8001a8c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	69db      	ldr	r3, [r3, #28]
 80019cc:	2b02      	cmp	r3, #2
 80019ce:	d146      	bne.n	8001a5e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80019d0:	4b33      	ldr	r3, [pc, #204]	@ (8001aa0 <HAL_RCC_OscConfig+0x4cc>)
 80019d2:	2200      	movs	r2, #0
 80019d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019d6:	f7ff fa39 	bl	8000e4c <HAL_GetTick>
 80019da:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019dc:	e008      	b.n	80019f0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019de:	f7ff fa35 	bl	8000e4c <HAL_GetTick>
 80019e2:	4602      	mov	r2, r0
 80019e4:	693b      	ldr	r3, [r7, #16]
 80019e6:	1ad3      	subs	r3, r2, r3
 80019e8:	2b02      	cmp	r3, #2
 80019ea:	d901      	bls.n	80019f0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80019ec:	2303      	movs	r3, #3
 80019ee:	e06d      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80019f0:	4b29      	ldr	r3, [pc, #164]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 80019f2:	681b      	ldr	r3, [r3, #0]
 80019f4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d1f0      	bne.n	80019de <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6a1b      	ldr	r3, [r3, #32]
 8001a00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001a04:	d108      	bne.n	8001a18 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001a06:	4b24      	ldr	r3, [pc, #144]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a08:	685b      	ldr	r3, [r3, #4]
 8001a0a:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	689b      	ldr	r3, [r3, #8]
 8001a12:	4921      	ldr	r1, [pc, #132]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a14:	4313      	orrs	r3, r2
 8001a16:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001a18:	4b1f      	ldr	r3, [pc, #124]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	6a19      	ldr	r1, [r3, #32]
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001a28:	430b      	orrs	r3, r1
 8001a2a:	491b      	ldr	r1, [pc, #108]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a2c:	4313      	orrs	r3, r2
 8001a2e:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001a30:	4b1b      	ldr	r3, [pc, #108]	@ (8001aa0 <HAL_RCC_OscConfig+0x4cc>)
 8001a32:	2201      	movs	r2, #1
 8001a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a36:	f7ff fa09 	bl	8000e4c <HAL_GetTick>
 8001a3a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a3c:	e008      	b.n	8001a50 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a3e:	f7ff fa05 	bl	8000e4c <HAL_GetTick>
 8001a42:	4602      	mov	r2, r0
 8001a44:	693b      	ldr	r3, [r7, #16]
 8001a46:	1ad3      	subs	r3, r2, r3
 8001a48:	2b02      	cmp	r3, #2
 8001a4a:	d901      	bls.n	8001a50 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	e03d      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001a50:	4b11      	ldr	r3, [pc, #68]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d0f0      	beq.n	8001a3e <HAL_RCC_OscConfig+0x46a>
 8001a5c:	e035      	b.n	8001aca <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a5e:	4b10      	ldr	r3, [pc, #64]	@ (8001aa0 <HAL_RCC_OscConfig+0x4cc>)
 8001a60:	2200      	movs	r2, #0
 8001a62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a64:	f7ff f9f2 	bl	8000e4c <HAL_GetTick>
 8001a68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a6a:	e008      	b.n	8001a7e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a6c:	f7ff f9ee 	bl	8000e4c <HAL_GetTick>
 8001a70:	4602      	mov	r2, r0
 8001a72:	693b      	ldr	r3, [r7, #16]
 8001a74:	1ad3      	subs	r3, r2, r3
 8001a76:	2b02      	cmp	r3, #2
 8001a78:	d901      	bls.n	8001a7e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8001a7a:	2303      	movs	r3, #3
 8001a7c:	e026      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001a7e:	4b06      	ldr	r3, [pc, #24]	@ (8001a98 <HAL_RCC_OscConfig+0x4c4>)
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d1f0      	bne.n	8001a6c <HAL_RCC_OscConfig+0x498>
 8001a8a:	e01e      	b.n	8001aca <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	69db      	ldr	r3, [r3, #28]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d107      	bne.n	8001aa4 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8001a94:	2301      	movs	r3, #1
 8001a96:	e019      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
 8001a98:	40021000 	.word	0x40021000
 8001a9c:	40007000 	.word	0x40007000
 8001aa0:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8001aa4:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad4 <HAL_RCC_OscConfig+0x500>)
 8001aa6:	685b      	ldr	r3, [r3, #4]
 8001aa8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001aaa:	68fb      	ldr	r3, [r7, #12]
 8001aac:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	6a1b      	ldr	r3, [r3, #32]
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d106      	bne.n	8001ac6 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d001      	beq.n	8001aca <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001ac6:	2301      	movs	r3, #1
 8001ac8:	e000      	b.n	8001acc <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001aca:	2300      	movs	r3, #0
}
 8001acc:	4618      	mov	r0, r3
 8001ace:	3718      	adds	r7, #24
 8001ad0:	46bd      	mov	sp, r7
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	40021000 	.word	0x40021000

08001ad8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
 8001ae0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e0d0      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001aec:	4b6a      	ldr	r3, [pc, #424]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001aee:	681b      	ldr	r3, [r3, #0]
 8001af0:	f003 0307 	and.w	r3, r3, #7
 8001af4:	683a      	ldr	r2, [r7, #0]
 8001af6:	429a      	cmp	r2, r3
 8001af8:	d910      	bls.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afa:	4b67      	ldr	r3, [pc, #412]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	f023 0207 	bic.w	r2, r3, #7
 8001b02:	4965      	ldr	r1, [pc, #404]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b04:	683b      	ldr	r3, [r7, #0]
 8001b06:	4313      	orrs	r3, r2
 8001b08:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b0a:	4b63      	ldr	r3, [pc, #396]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	f003 0307 	and.w	r3, r3, #7
 8001b12:	683a      	ldr	r2, [r7, #0]
 8001b14:	429a      	cmp	r2, r3
 8001b16:	d001      	beq.n	8001b1c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001b18:	2301      	movs	r3, #1
 8001b1a:	e0b8      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	f003 0302 	and.w	r3, r3, #2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d020      	beq.n	8001b6a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	f003 0304 	and.w	r3, r3, #4
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d005      	beq.n	8001b40 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b34:	4b59      	ldr	r3, [pc, #356]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b36:	685b      	ldr	r3, [r3, #4]
 8001b38:	4a58      	ldr	r2, [pc, #352]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b3a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8001b3e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f003 0308 	and.w	r3, r3, #8
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d005      	beq.n	8001b58 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b4c:	4b53      	ldr	r3, [pc, #332]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b4e:	685b      	ldr	r3, [r3, #4]
 8001b50:	4a52      	ldr	r2, [pc, #328]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b52:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001b56:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b58:	4b50      	ldr	r3, [pc, #320]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b5a:	685b      	ldr	r3, [r3, #4]
 8001b5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	689b      	ldr	r3, [r3, #8]
 8001b64:	494d      	ldr	r1, [pc, #308]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b66:	4313      	orrs	r3, r2
 8001b68:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	f003 0301 	and.w	r3, r3, #1
 8001b72:	2b00      	cmp	r3, #0
 8001b74:	d040      	beq.n	8001bf8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	2b01      	cmp	r3, #1
 8001b7c:	d107      	bne.n	8001b8e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7e:	4b47      	ldr	r3, [pc, #284]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d115      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b8a:	2301      	movs	r3, #1
 8001b8c:	e07f      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	685b      	ldr	r3, [r3, #4]
 8001b92:	2b02      	cmp	r3, #2
 8001b94:	d107      	bne.n	8001ba6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b96:	4b41      	ldr	r3, [pc, #260]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001b98:	681b      	ldr	r3, [r3, #0]
 8001b9a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d109      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba2:	2301      	movs	r3, #1
 8001ba4:	e073      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ba6:	4b3d      	ldr	r3, [pc, #244]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f003 0302 	and.w	r3, r3, #2
 8001bae:	2b00      	cmp	r3, #0
 8001bb0:	d101      	bne.n	8001bb6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb2:	2301      	movs	r3, #1
 8001bb4:	e06b      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bb6:	4b39      	ldr	r3, [pc, #228]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001bb8:	685b      	ldr	r3, [r3, #4]
 8001bba:	f023 0203 	bic.w	r2, r3, #3
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	4936      	ldr	r1, [pc, #216]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001bc4:	4313      	orrs	r3, r2
 8001bc6:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bc8:	f7ff f940 	bl	8000e4c <HAL_GetTick>
 8001bcc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bce:	e00a      	b.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd0:	f7ff f93c 	bl	8000e4c <HAL_GetTick>
 8001bd4:	4602      	mov	r2, r0
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	1ad3      	subs	r3, r2, r3
 8001bda:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001bde:	4293      	cmp	r3, r2
 8001be0:	d901      	bls.n	8001be6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be2:	2303      	movs	r3, #3
 8001be4:	e053      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001be6:	4b2d      	ldr	r3, [pc, #180]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f003 020c 	and.w	r2, r3, #12
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	685b      	ldr	r3, [r3, #4]
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d1eb      	bne.n	8001bd0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bf8:	4b27      	ldr	r3, [pc, #156]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	f003 0307 	and.w	r3, r3, #7
 8001c00:	683a      	ldr	r2, [r7, #0]
 8001c02:	429a      	cmp	r2, r3
 8001c04:	d210      	bcs.n	8001c28 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c06:	4b24      	ldr	r3, [pc, #144]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c08:	681b      	ldr	r3, [r3, #0]
 8001c0a:	f023 0207 	bic.w	r2, r3, #7
 8001c0e:	4922      	ldr	r1, [pc, #136]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	4313      	orrs	r3, r2
 8001c14:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c16:	4b20      	ldr	r3, [pc, #128]	@ (8001c98 <HAL_RCC_ClockConfig+0x1c0>)
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f003 0307 	and.w	r3, r3, #7
 8001c1e:	683a      	ldr	r2, [r7, #0]
 8001c20:	429a      	cmp	r2, r3
 8001c22:	d001      	beq.n	8001c28 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001c24:	2301      	movs	r3, #1
 8001c26:	e032      	b.n	8001c8e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	681b      	ldr	r3, [r3, #0]
 8001c2c:	f003 0304 	and.w	r3, r3, #4
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d008      	beq.n	8001c46 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c34:	4b19      	ldr	r3, [pc, #100]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c36:	685b      	ldr	r3, [r3, #4]
 8001c38:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	68db      	ldr	r3, [r3, #12]
 8001c40:	4916      	ldr	r1, [pc, #88]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c42:	4313      	orrs	r3, r2
 8001c44:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	681b      	ldr	r3, [r3, #0]
 8001c4a:	f003 0308 	and.w	r3, r3, #8
 8001c4e:	2b00      	cmp	r3, #0
 8001c50:	d009      	beq.n	8001c66 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001c52:	4b12      	ldr	r3, [pc, #72]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	691b      	ldr	r3, [r3, #16]
 8001c5e:	00db      	lsls	r3, r3, #3
 8001c60:	490e      	ldr	r1, [pc, #56]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c62:	4313      	orrs	r3, r2
 8001c64:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c66:	f000 f821 	bl	8001cac <HAL_RCC_GetSysClockFreq>
 8001c6a:	4602      	mov	r2, r0
 8001c6c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c4>)
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	490a      	ldr	r1, [pc, #40]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	5ccb      	ldrb	r3, [r1, r3]
 8001c7a:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7e:	4a09      	ldr	r2, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1cc>)
 8001c80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001c82:	4b09      	ldr	r3, [pc, #36]	@ (8001ca8 <HAL_RCC_ClockConfig+0x1d0>)
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	4618      	mov	r0, r3
 8001c88:	f7ff f89e 	bl	8000dc8 <HAL_InitTick>

  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40022000 	.word	0x40022000
 8001c9c:	40021000 	.word	0x40021000
 8001ca0:	08004e50 	.word	0x08004e50
 8001ca4:	20000000 	.word	0x20000000
 8001ca8:	20000004 	.word	0x20000004

08001cac <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	b087      	sub	sp, #28
 8001cb0:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	60fb      	str	r3, [r7, #12]
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	60bb      	str	r3, [r7, #8]
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001cc6:	4b1e      	ldr	r3, [pc, #120]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cc8:	685b      	ldr	r3, [r3, #4]
 8001cca:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	f003 030c 	and.w	r3, r3, #12
 8001cd2:	2b04      	cmp	r3, #4
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x30>
 8001cd6:	2b08      	cmp	r3, #8
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x36>
 8001cda:	e027      	b.n	8001d2c <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001cdc:	4b19      	ldr	r3, [pc, #100]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001cde:	613b      	str	r3, [r7, #16]
      break;
 8001ce0:	e027      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	0c9b      	lsrs	r3, r3, #18
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	4a17      	ldr	r2, [pc, #92]	@ (8001d48 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001cec:	5cd3      	ldrb	r3, [r2, r3]
 8001cee:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001cf0:	68fb      	ldr	r3, [r7, #12]
 8001cf2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d010      	beq.n	8001d1c <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001cfa:	4b11      	ldr	r3, [pc, #68]	@ (8001d40 <HAL_RCC_GetSysClockFreq+0x94>)
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	0c5b      	lsrs	r3, r3, #17
 8001d00:	f003 0301 	and.w	r3, r3, #1
 8001d04:	4a11      	ldr	r2, [pc, #68]	@ (8001d4c <HAL_RCC_GetSysClockFreq+0xa0>)
 8001d06:	5cd3      	ldrb	r3, [r2, r3]
 8001d08:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	4a0d      	ldr	r2, [pc, #52]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d0e:	fb03 f202 	mul.w	r2, r3, r2
 8001d12:	68bb      	ldr	r3, [r7, #8]
 8001d14:	fbb2 f3f3 	udiv	r3, r2, r3
 8001d18:	617b      	str	r3, [r7, #20]
 8001d1a:	e004      	b.n	8001d26 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a0c      	ldr	r2, [pc, #48]	@ (8001d50 <HAL_RCC_GetSysClockFreq+0xa4>)
 8001d20:	fb02 f303 	mul.w	r3, r2, r3
 8001d24:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001d26:	697b      	ldr	r3, [r7, #20]
 8001d28:	613b      	str	r3, [r7, #16]
      break;
 8001d2a:	e002      	b.n	8001d32 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001d2c:	4b05      	ldr	r3, [pc, #20]	@ (8001d44 <HAL_RCC_GetSysClockFreq+0x98>)
 8001d2e:	613b      	str	r3, [r7, #16]
      break;
 8001d30:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001d32:	693b      	ldr	r3, [r7, #16]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	371c      	adds	r7, #28
 8001d38:	46bd      	mov	sp, r7
 8001d3a:	bc80      	pop	{r7}
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	40021000 	.word	0x40021000
 8001d44:	007a1200 	.word	0x007a1200
 8001d48:	08004e68 	.word	0x08004e68
 8001d4c:	08004e78 	.word	0x08004e78
 8001d50:	003d0900 	.word	0x003d0900

08001d54 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001d54:	b480      	push	{r7}
 8001d56:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001d58:	4b02      	ldr	r3, [pc, #8]	@ (8001d64 <HAL_RCC_GetHCLKFreq+0x10>)
 8001d5a:	681b      	ldr	r3, [r3, #0]
}
 8001d5c:	4618      	mov	r0, r3
 8001d5e:	46bd      	mov	sp, r7
 8001d60:	bc80      	pop	{r7}
 8001d62:	4770      	bx	lr
 8001d64:	20000000 	.word	0x20000000

08001d68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001d68:	b580      	push	{r7, lr}
 8001d6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001d6c:	f7ff fff2 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d70:	4602      	mov	r2, r0
 8001d72:	4b05      	ldr	r3, [pc, #20]	@ (8001d88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001d74:	685b      	ldr	r3, [r3, #4]
 8001d76:	0a1b      	lsrs	r3, r3, #8
 8001d78:	f003 0307 	and.w	r3, r3, #7
 8001d7c:	4903      	ldr	r1, [pc, #12]	@ (8001d8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001d7e:	5ccb      	ldrb	r3, [r1, r3]
 8001d80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001d84:	4618      	mov	r0, r3
 8001d86:	bd80      	pop	{r7, pc}
 8001d88:	40021000 	.word	0x40021000
 8001d8c:	08004e60 	.word	0x08004e60

08001d90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001d90:	b580      	push	{r7, lr}
 8001d92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001d94:	f7ff ffde 	bl	8001d54 <HAL_RCC_GetHCLKFreq>
 8001d98:	4602      	mov	r2, r0
 8001d9a:	4b05      	ldr	r3, [pc, #20]	@ (8001db0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001d9c:	685b      	ldr	r3, [r3, #4]
 8001d9e:	0adb      	lsrs	r3, r3, #11
 8001da0:	f003 0307 	and.w	r3, r3, #7
 8001da4:	4903      	ldr	r1, [pc, #12]	@ (8001db4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001da6:	5ccb      	ldrb	r3, [r1, r3]
 8001da8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001dac:	4618      	mov	r0, r3
 8001dae:	bd80      	pop	{r7, pc}
 8001db0:	40021000 	.word	0x40021000
 8001db4:	08004e60 	.word	0x08004e60

08001db8 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001db8:	b480      	push	{r7}
 8001dba:	b085      	sub	sp, #20
 8001dbc:	af00      	add	r7, sp, #0
 8001dbe:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001dc0:	4b0a      	ldr	r3, [pc, #40]	@ (8001dec <RCC_Delay+0x34>)
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	4a0a      	ldr	r2, [pc, #40]	@ (8001df0 <RCC_Delay+0x38>)
 8001dc6:	fba2 2303 	umull	r2, r3, r2, r3
 8001dca:	0a5b      	lsrs	r3, r3, #9
 8001dcc:	687a      	ldr	r2, [r7, #4]
 8001dce:	fb02 f303 	mul.w	r3, r2, r3
 8001dd2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001dd4:	bf00      	nop
  }
  while (Delay --);
 8001dd6:	68fb      	ldr	r3, [r7, #12]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	60fa      	str	r2, [r7, #12]
 8001ddc:	2b00      	cmp	r3, #0
 8001dde:	d1f9      	bne.n	8001dd4 <RCC_Delay+0x1c>
}
 8001de0:	bf00      	nop
 8001de2:	bf00      	nop
 8001de4:	3714      	adds	r7, #20
 8001de6:	46bd      	mov	sp, r7
 8001de8:	bc80      	pop	{r7}
 8001dea:	4770      	bx	lr
 8001dec:	20000000 	.word	0x20000000
 8001df0:	10624dd3 	.word	0x10624dd3

08001df4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001df4:	b580      	push	{r7, lr}
 8001df6:	b082      	sub	sp, #8
 8001df8:	af00      	add	r7, sp, #0
 8001dfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2b00      	cmp	r3, #0
 8001e00:	d101      	bne.n	8001e06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e041      	b.n	8001e8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d106      	bne.n	8001e20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	2200      	movs	r2, #0
 8001e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001e1a:	6878      	ldr	r0, [r7, #4]
 8001e1c:	f7fe fdea 	bl	80009f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2202      	movs	r2, #2
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	3304      	adds	r3, #4
 8001e30:	4619      	mov	r1, r3
 8001e32:	4610      	mov	r0, r2
 8001e34:	f000 fbe6 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	2201      	movs	r2, #1
 8001e3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	2201      	movs	r2, #1
 8001e44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	2201      	movs	r2, #1
 8001e54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	2201      	movs	r2, #1
 8001e5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	2201      	movs	r2, #1
 8001e64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	2201      	movs	r2, #1
 8001e6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	2201      	movs	r2, #1
 8001e74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	2201      	movs	r2, #1
 8001e7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	2201      	movs	r2, #1
 8001e84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001e88:	2300      	movs	r3, #0
}
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	3708      	adds	r7, #8
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}

08001e92 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e92:	b580      	push	{r7, lr}
 8001e94:	b082      	sub	sp, #8
 8001e96:	af00      	add	r7, sp, #0
 8001e98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d101      	bne.n	8001ea4 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	e041      	b.n	8001f28 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001eaa:	b2db      	uxtb	r3, r3
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d106      	bne.n	8001ebe <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	2200      	movs	r2, #0
 8001eb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001eb8:	6878      	ldr	r0, [r7, #4]
 8001eba:	f000 f839 	bl	8001f30 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	2202      	movs	r2, #2
 8001ec2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	681a      	ldr	r2, [r3, #0]
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	3304      	adds	r3, #4
 8001ece:	4619      	mov	r1, r3
 8001ed0:	4610      	mov	r0, r2
 8001ed2:	f000 fb97 	bl	8002604 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	2201      	movs	r2, #1
 8001eea:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2201      	movs	r2, #1
 8001ef2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2201      	movs	r2, #1
 8001f0a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	2201      	movs	r2, #1
 8001f12:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	2201      	movs	r2, #1
 8001f1a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001f1e:	687b      	ldr	r3, [r7, #4]
 8001f20:	2201      	movs	r2, #1
 8001f22:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}

08001f30 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001f30:	b480      	push	{r7}
 8001f32:	b083      	sub	sp, #12
 8001f34:	af00      	add	r7, sp, #0
 8001f36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001f38:	bf00      	nop
 8001f3a:	370c      	adds	r7, #12
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	bc80      	pop	{r7}
 8001f40:	4770      	bx	lr
	...

08001f44 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001f44:	b580      	push	{r7, lr}
 8001f46:	b084      	sub	sp, #16
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d109      	bne.n	8001f68 <HAL_TIM_PWM_Start+0x24>
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001f5a:	b2db      	uxtb	r3, r3
 8001f5c:	2b01      	cmp	r3, #1
 8001f5e:	bf14      	ite	ne
 8001f60:	2301      	movne	r3, #1
 8001f62:	2300      	moveq	r3, #0
 8001f64:	b2db      	uxtb	r3, r3
 8001f66:	e022      	b.n	8001fae <HAL_TIM_PWM_Start+0x6a>
 8001f68:	683b      	ldr	r3, [r7, #0]
 8001f6a:	2b04      	cmp	r3, #4
 8001f6c:	d109      	bne.n	8001f82 <HAL_TIM_PWM_Start+0x3e>
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001f74:	b2db      	uxtb	r3, r3
 8001f76:	2b01      	cmp	r3, #1
 8001f78:	bf14      	ite	ne
 8001f7a:	2301      	movne	r3, #1
 8001f7c:	2300      	moveq	r3, #0
 8001f7e:	b2db      	uxtb	r3, r3
 8001f80:	e015      	b.n	8001fae <HAL_TIM_PWM_Start+0x6a>
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	2b08      	cmp	r3, #8
 8001f86:	d109      	bne.n	8001f9c <HAL_TIM_PWM_Start+0x58>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f8e:	b2db      	uxtb	r3, r3
 8001f90:	2b01      	cmp	r3, #1
 8001f92:	bf14      	ite	ne
 8001f94:	2301      	movne	r3, #1
 8001f96:	2300      	moveq	r3, #0
 8001f98:	b2db      	uxtb	r3, r3
 8001f9a:	e008      	b.n	8001fae <HAL_TIM_PWM_Start+0x6a>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	bf14      	ite	ne
 8001fa8:	2301      	movne	r3, #1
 8001faa:	2300      	moveq	r3, #0
 8001fac:	b2db      	uxtb	r3, r3
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d001      	beq.n	8001fb6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001fb2:	2301      	movs	r3, #1
 8001fb4:	e05e      	b.n	8002074 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d104      	bne.n	8001fc6 <HAL_TIM_PWM_Start+0x82>
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2202      	movs	r2, #2
 8001fc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001fc4:	e013      	b.n	8001fee <HAL_TIM_PWM_Start+0xaa>
 8001fc6:	683b      	ldr	r3, [r7, #0]
 8001fc8:	2b04      	cmp	r3, #4
 8001fca:	d104      	bne.n	8001fd6 <HAL_TIM_PWM_Start+0x92>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	2202      	movs	r2, #2
 8001fd0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001fd4:	e00b      	b.n	8001fee <HAL_TIM_PWM_Start+0xaa>
 8001fd6:	683b      	ldr	r3, [r7, #0]
 8001fd8:	2b08      	cmp	r3, #8
 8001fda:	d104      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0xa2>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	2202      	movs	r2, #2
 8001fe0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001fe4:	e003      	b.n	8001fee <HAL_TIM_PWM_Start+0xaa>
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2202      	movs	r2, #2
 8001fea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	2201      	movs	r2, #1
 8001ff4:	6839      	ldr	r1, [r7, #0]
 8001ff6:	4618      	mov	r0, r3
 8001ff8:	f000 fd84 	bl	8002b04 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a1e      	ldr	r2, [pc, #120]	@ (800207c <HAL_TIM_PWM_Start+0x138>)
 8002002:	4293      	cmp	r3, r2
 8002004:	d107      	bne.n	8002016 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002014:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	4a18      	ldr	r2, [pc, #96]	@ (800207c <HAL_TIM_PWM_Start+0x138>)
 800201c:	4293      	cmp	r3, r2
 800201e:	d00e      	beq.n	800203e <HAL_TIM_PWM_Start+0xfa>
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002028:	d009      	beq.n	800203e <HAL_TIM_PWM_Start+0xfa>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	4a14      	ldr	r2, [pc, #80]	@ (8002080 <HAL_TIM_PWM_Start+0x13c>)
 8002030:	4293      	cmp	r3, r2
 8002032:	d004      	beq.n	800203e <HAL_TIM_PWM_Start+0xfa>
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	4a12      	ldr	r2, [pc, #72]	@ (8002084 <HAL_TIM_PWM_Start+0x140>)
 800203a:	4293      	cmp	r3, r2
 800203c:	d111      	bne.n	8002062 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	689b      	ldr	r3, [r3, #8]
 8002044:	f003 0307 	and.w	r3, r3, #7
 8002048:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2b06      	cmp	r3, #6
 800204e:	d010      	beq.n	8002072 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	681a      	ldr	r2, [r3, #0]
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	681b      	ldr	r3, [r3, #0]
 800205a:	f042 0201 	orr.w	r2, r2, #1
 800205e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002060:	e007      	b.n	8002072 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	681a      	ldr	r2, [r3, #0]
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	f042 0201 	orr.w	r2, r2, #1
 8002070:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002072:	2300      	movs	r3, #0
}
 8002074:	4618      	mov	r0, r3
 8002076:	3710      	adds	r7, #16
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	40012c00 	.word	0x40012c00
 8002080:	40000400 	.word	0x40000400
 8002084:	40000800 	.word	0x40000800

08002088 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	f003 0302 	and.w	r3, r3, #2
 800209a:	2b02      	cmp	r3, #2
 800209c:	d122      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b02      	cmp	r3, #2
 80020aa:	d11b      	bne.n	80020e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f06f 0202 	mvn.w	r2, #2
 80020b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2201      	movs	r2, #1
 80020ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	f003 0303 	and.w	r3, r3, #3
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	d003      	beq.n	80020d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80020ca:	6878      	ldr	r0, [r7, #4]
 80020cc:	f000 fa7f 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 80020d0:	e005      	b.n	80020de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80020d2:	6878      	ldr	r0, [r7, #4]
 80020d4:	f000 fa72 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020d8:	6878      	ldr	r0, [r7, #4]
 80020da:	f000 fa81 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2200      	movs	r2, #0
 80020e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	691b      	ldr	r3, [r3, #16]
 80020ea:	f003 0304 	and.w	r3, r3, #4
 80020ee:	2b04      	cmp	r3, #4
 80020f0:	d122      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	68db      	ldr	r3, [r3, #12]
 80020f8:	f003 0304 	and.w	r3, r3, #4
 80020fc:	2b04      	cmp	r3, #4
 80020fe:	d11b      	bne.n	8002138 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	f06f 0204 	mvn.w	r2, #4
 8002108:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2202      	movs	r2, #2
 800210e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	699b      	ldr	r3, [r3, #24]
 8002116:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800211a:	2b00      	cmp	r3, #0
 800211c:	d003      	beq.n	8002126 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800211e:	6878      	ldr	r0, [r7, #4]
 8002120:	f000 fa55 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002124:	e005      	b.n	8002132 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002126:	6878      	ldr	r0, [r7, #4]
 8002128:	f000 fa48 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800212c:	6878      	ldr	r0, [r7, #4]
 800212e:	f000 fa57 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2200      	movs	r2, #0
 8002136:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	691b      	ldr	r3, [r3, #16]
 800213e:	f003 0308 	and.w	r3, r3, #8
 8002142:	2b08      	cmp	r3, #8
 8002144:	d122      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	68db      	ldr	r3, [r3, #12]
 800214c:	f003 0308 	and.w	r3, r3, #8
 8002150:	2b08      	cmp	r3, #8
 8002152:	d11b      	bne.n	800218c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	f06f 0208 	mvn.w	r2, #8
 800215c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2204      	movs	r2, #4
 8002162:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	69db      	ldr	r3, [r3, #28]
 800216a:	f003 0303 	and.w	r3, r3, #3
 800216e:	2b00      	cmp	r3, #0
 8002170:	d003      	beq.n	800217a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f000 fa2b 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 8002178:	e005      	b.n	8002186 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f000 fa1e 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	f000 fa2d 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	2200      	movs	r2, #0
 800218a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	691b      	ldr	r3, [r3, #16]
 8002192:	f003 0310 	and.w	r3, r3, #16
 8002196:	2b10      	cmp	r3, #16
 8002198:	d122      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	68db      	ldr	r3, [r3, #12]
 80021a0:	f003 0310 	and.w	r3, r3, #16
 80021a4:	2b10      	cmp	r3, #16
 80021a6:	d11b      	bne.n	80021e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	f06f 0210 	mvn.w	r2, #16
 80021b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	2208      	movs	r2, #8
 80021b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80021b8:	687b      	ldr	r3, [r7, #4]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	69db      	ldr	r3, [r3, #28]
 80021be:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d003      	beq.n	80021ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80021c6:	6878      	ldr	r0, [r7, #4]
 80021c8:	f000 fa01 	bl	80025ce <HAL_TIM_IC_CaptureCallback>
 80021cc:	e005      	b.n	80021da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80021ce:	6878      	ldr	r0, [r7, #4]
 80021d0:	f000 f9f4 	bl	80025bc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80021d4:	6878      	ldr	r0, [r7, #4]
 80021d6:	f000 fa03 	bl	80025e0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	2200      	movs	r2, #0
 80021de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	691b      	ldr	r3, [r3, #16]
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	2b01      	cmp	r3, #1
 80021ec:	d10e      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	f003 0301 	and.w	r3, r3, #1
 80021f8:	2b01      	cmp	r3, #1
 80021fa:	d107      	bne.n	800220c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	f06f 0201 	mvn.w	r2, #1
 8002204:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002206:	6878      	ldr	r0, [r7, #4]
 8002208:	f000 f9cf 	bl	80025aa <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	691b      	ldr	r3, [r3, #16]
 8002212:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002216:	2b80      	cmp	r3, #128	@ 0x80
 8002218:	d10e      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	68db      	ldr	r3, [r3, #12]
 8002220:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002224:	2b80      	cmp	r3, #128	@ 0x80
 8002226:	d107      	bne.n	8002238 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002230:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002232:	6878      	ldr	r0, [r7, #4]
 8002234:	f000 fcf1 	bl	8002c1a <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	691b      	ldr	r3, [r3, #16]
 800223e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002242:	2b40      	cmp	r3, #64	@ 0x40
 8002244:	d10e      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	68db      	ldr	r3, [r3, #12]
 800224c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002250:	2b40      	cmp	r3, #64	@ 0x40
 8002252:	d107      	bne.n	8002264 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 800225c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800225e:	6878      	ldr	r0, [r7, #4]
 8002260:	f000 f9c7 	bl	80025f2 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	681b      	ldr	r3, [r3, #0]
 8002268:	691b      	ldr	r3, [r3, #16]
 800226a:	f003 0320 	and.w	r3, r3, #32
 800226e:	2b20      	cmp	r3, #32
 8002270:	d10e      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	68db      	ldr	r3, [r3, #12]
 8002278:	f003 0320 	and.w	r3, r3, #32
 800227c:	2b20      	cmp	r3, #32
 800227e:	d107      	bne.n	8002290 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f06f 0220 	mvn.w	r2, #32
 8002288:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800228a:	6878      	ldr	r0, [r7, #4]
 800228c:	f000 fcbc 	bl	8002c08 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002290:	bf00      	nop
 8002292:	3708      	adds	r7, #8
 8002294:	46bd      	mov	sp, r7
 8002296:	bd80      	pop	{r7, pc}

08002298 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	60f8      	str	r0, [r7, #12]
 80022a0:	60b9      	str	r1, [r7, #8]
 80022a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80022a4:	2300      	movs	r3, #0
 80022a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80022a8:	68fb      	ldr	r3, [r7, #12]
 80022aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80022ae:	2b01      	cmp	r3, #1
 80022b0:	d101      	bne.n	80022b6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80022b2:	2302      	movs	r3, #2
 80022b4:	e0ae      	b.n	8002414 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	2201      	movs	r2, #1
 80022ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	2b0c      	cmp	r3, #12
 80022c2:	f200 809f 	bhi.w	8002404 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80022c6:	a201      	add	r2, pc, #4	@ (adr r2, 80022cc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80022c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022cc:	08002301 	.word	0x08002301
 80022d0:	08002405 	.word	0x08002405
 80022d4:	08002405 	.word	0x08002405
 80022d8:	08002405 	.word	0x08002405
 80022dc:	08002341 	.word	0x08002341
 80022e0:	08002405 	.word	0x08002405
 80022e4:	08002405 	.word	0x08002405
 80022e8:	08002405 	.word	0x08002405
 80022ec:	08002383 	.word	0x08002383
 80022f0:	08002405 	.word	0x08002405
 80022f4:	08002405 	.word	0x08002405
 80022f8:	08002405 	.word	0x08002405
 80022fc:	080023c3 	.word	0x080023c3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002300:	68fb      	ldr	r3, [r7, #12]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	68b9      	ldr	r1, [r7, #8]
 8002306:	4618      	mov	r0, r3
 8002308:	f000 f9de 	bl	80026c8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	699a      	ldr	r2, [r3, #24]
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f042 0208 	orr.w	r2, r2, #8
 800231a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	699a      	ldr	r2, [r3, #24]
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f022 0204 	bic.w	r2, r2, #4
 800232a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	6999      	ldr	r1, [r3, #24]
 8002332:	68bb      	ldr	r3, [r7, #8]
 8002334:	691a      	ldr	r2, [r3, #16]
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	430a      	orrs	r2, r1
 800233c:	619a      	str	r2, [r3, #24]
      break;
 800233e:	e064      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68b9      	ldr	r1, [r7, #8]
 8002346:	4618      	mov	r0, r3
 8002348:	f000 fa24 	bl	8002794 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	699a      	ldr	r2, [r3, #24]
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800235a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681b      	ldr	r3, [r3, #0]
 8002360:	699a      	ldr	r2, [r3, #24]
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800236a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	6999      	ldr	r1, [r3, #24]
 8002372:	68bb      	ldr	r3, [r7, #8]
 8002374:	691b      	ldr	r3, [r3, #16]
 8002376:	021a      	lsls	r2, r3, #8
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	430a      	orrs	r2, r1
 800237e:	619a      	str	r2, [r3, #24]
      break;
 8002380:	e043      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002382:	68fb      	ldr	r3, [r7, #12]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	68b9      	ldr	r1, [r7, #8]
 8002388:	4618      	mov	r0, r3
 800238a:	f000 fa6d 	bl	8002868 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	69da      	ldr	r2, [r3, #28]
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f042 0208 	orr.w	r2, r2, #8
 800239c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	69da      	ldr	r2, [r3, #28]
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	f022 0204 	bic.w	r2, r2, #4
 80023ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80023ae:	68fb      	ldr	r3, [r7, #12]
 80023b0:	681b      	ldr	r3, [r3, #0]
 80023b2:	69d9      	ldr	r1, [r3, #28]
 80023b4:	68bb      	ldr	r3, [r7, #8]
 80023b6:	691a      	ldr	r2, [r3, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	430a      	orrs	r2, r1
 80023be:	61da      	str	r2, [r3, #28]
      break;
 80023c0:	e023      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	68b9      	ldr	r1, [r7, #8]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f000 fab7 	bl	800293c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80023ce:	68fb      	ldr	r3, [r7, #12]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	69da      	ldr	r2, [r3, #28]
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80023dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80023de:	68fb      	ldr	r3, [r7, #12]
 80023e0:	681b      	ldr	r3, [r3, #0]
 80023e2:	69da      	ldr	r2, [r3, #28]
 80023e4:	68fb      	ldr	r3, [r7, #12]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80023ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	69d9      	ldr	r1, [r3, #28]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	021a      	lsls	r2, r3, #8
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	430a      	orrs	r2, r1
 8002400:	61da      	str	r2, [r3, #28]
      break;
 8002402:	e002      	b.n	800240a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002404:	2301      	movs	r3, #1
 8002406:	75fb      	strb	r3, [r7, #23]
      break;
 8002408:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	2200      	movs	r2, #0
 800240e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002412:	7dfb      	ldrb	r3, [r7, #23]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}

0800241c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800241c:	b580      	push	{r7, lr}
 800241e:	b084      	sub	sp, #16
 8002420:	af00      	add	r7, sp, #0
 8002422:	6078      	str	r0, [r7, #4]
 8002424:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002426:	2300      	movs	r3, #0
 8002428:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002430:	2b01      	cmp	r3, #1
 8002432:	d101      	bne.n	8002438 <HAL_TIM_ConfigClockSource+0x1c>
 8002434:	2302      	movs	r3, #2
 8002436:	e0b4      	b.n	80025a2 <HAL_TIM_ConfigClockSource+0x186>
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	2201      	movs	r2, #1
 800243c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	2202      	movs	r2, #2
 8002444:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	681b      	ldr	r3, [r3, #0]
 800244c:	689b      	ldr	r3, [r3, #8]
 800244e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002450:	68bb      	ldr	r3, [r7, #8]
 8002452:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002456:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002458:	68bb      	ldr	r3, [r7, #8]
 800245a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800245e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	68ba      	ldr	r2, [r7, #8]
 8002466:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002470:	d03e      	beq.n	80024f0 <HAL_TIM_ConfigClockSource+0xd4>
 8002472:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002476:	f200 8087 	bhi.w	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 800247a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800247e:	f000 8086 	beq.w	800258e <HAL_TIM_ConfigClockSource+0x172>
 8002482:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002486:	d87f      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 8002488:	2b70      	cmp	r3, #112	@ 0x70
 800248a:	d01a      	beq.n	80024c2 <HAL_TIM_ConfigClockSource+0xa6>
 800248c:	2b70      	cmp	r3, #112	@ 0x70
 800248e:	d87b      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 8002490:	2b60      	cmp	r3, #96	@ 0x60
 8002492:	d050      	beq.n	8002536 <HAL_TIM_ConfigClockSource+0x11a>
 8002494:	2b60      	cmp	r3, #96	@ 0x60
 8002496:	d877      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 8002498:	2b50      	cmp	r3, #80	@ 0x50
 800249a:	d03c      	beq.n	8002516 <HAL_TIM_ConfigClockSource+0xfa>
 800249c:	2b50      	cmp	r3, #80	@ 0x50
 800249e:	d873      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 80024a0:	2b40      	cmp	r3, #64	@ 0x40
 80024a2:	d058      	beq.n	8002556 <HAL_TIM_ConfigClockSource+0x13a>
 80024a4:	2b40      	cmp	r3, #64	@ 0x40
 80024a6:	d86f      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 80024a8:	2b30      	cmp	r3, #48	@ 0x30
 80024aa:	d064      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15a>
 80024ac:	2b30      	cmp	r3, #48	@ 0x30
 80024ae:	d86b      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 80024b0:	2b20      	cmp	r3, #32
 80024b2:	d060      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15a>
 80024b4:	2b20      	cmp	r3, #32
 80024b6:	d867      	bhi.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
 80024b8:	2b00      	cmp	r3, #0
 80024ba:	d05c      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15a>
 80024bc:	2b10      	cmp	r3, #16
 80024be:	d05a      	beq.n	8002576 <HAL_TIM_ConfigClockSource+0x15a>
 80024c0:	e062      	b.n	8002588 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024c6:	683b      	ldr	r3, [r7, #0]
 80024c8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024ca:	683b      	ldr	r3, [r7, #0]
 80024cc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80024d2:	f000 faf8 	bl	8002ac6 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	689b      	ldr	r3, [r3, #8]
 80024dc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80024de:	68bb      	ldr	r3, [r7, #8]
 80024e0:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80024e4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	68ba      	ldr	r2, [r7, #8]
 80024ec:	609a      	str	r2, [r3, #8]
      break;
 80024ee:	e04f      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80024f4:	683b      	ldr	r3, [r7, #0]
 80024f6:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80024f8:	683b      	ldr	r3, [r7, #0]
 80024fa:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002500:	f000 fae1 	bl	8002ac6 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	689a      	ldr	r2, [r3, #8]
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002512:	609a      	str	r2, [r3, #8]
      break;
 8002514:	e03c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800251a:	683b      	ldr	r3, [r7, #0]
 800251c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800251e:	683b      	ldr	r3, [r7, #0]
 8002520:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002522:	461a      	mov	r2, r3
 8002524:	f000 fa58 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002528:	687b      	ldr	r3, [r7, #4]
 800252a:	681b      	ldr	r3, [r3, #0]
 800252c:	2150      	movs	r1, #80	@ 0x50
 800252e:	4618      	mov	r0, r3
 8002530:	f000 faaf 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002534:	e02c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800253a:	683b      	ldr	r3, [r7, #0]
 800253c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002542:	461a      	mov	r2, r3
 8002544:	f000 fa76 	bl	8002a34 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	2160      	movs	r1, #96	@ 0x60
 800254e:	4618      	mov	r0, r3
 8002550:	f000 fa9f 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002554:	e01c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800255a:	683b      	ldr	r3, [r7, #0]
 800255c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002562:	461a      	mov	r2, r3
 8002564:	f000 fa38 	bl	80029d8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	2140      	movs	r1, #64	@ 0x40
 800256e:	4618      	mov	r0, r3
 8002570:	f000 fa8f 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002574:	e00c      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	681a      	ldr	r2, [r3, #0]
 800257a:	683b      	ldr	r3, [r7, #0]
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	4619      	mov	r1, r3
 8002580:	4610      	mov	r0, r2
 8002582:	f000 fa86 	bl	8002a92 <TIM_ITRx_SetConfig>
      break;
 8002586:	e003      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002588:	2301      	movs	r3, #1
 800258a:	73fb      	strb	r3, [r7, #15]
      break;
 800258c:	e000      	b.n	8002590 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800258e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2201      	movs	r2, #1
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80025a0:	7bfb      	ldrb	r3, [r7, #15]
}
 80025a2:	4618      	mov	r0, r3
 80025a4:	3710      	adds	r7, #16
 80025a6:	46bd      	mov	sp, r7
 80025a8:	bd80      	pop	{r7, pc}

080025aa <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025aa:	b480      	push	{r7}
 80025ac:	b083      	sub	sp, #12
 80025ae:	af00      	add	r7, sp, #0
 80025b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80025b2:	bf00      	nop
 80025b4:	370c      	adds	r7, #12
 80025b6:	46bd      	mov	sp, r7
 80025b8:	bc80      	pop	{r7}
 80025ba:	4770      	bx	lr

080025bc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80025bc:	b480      	push	{r7}
 80025be:	b083      	sub	sp, #12
 80025c0:	af00      	add	r7, sp, #0
 80025c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80025c4:	bf00      	nop
 80025c6:	370c      	adds	r7, #12
 80025c8:	46bd      	mov	sp, r7
 80025ca:	bc80      	pop	{r7}
 80025cc:	4770      	bx	lr

080025ce <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80025ce:	b480      	push	{r7}
 80025d0:	b083      	sub	sp, #12
 80025d2:	af00      	add	r7, sp, #0
 80025d4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80025d6:	bf00      	nop
 80025d8:	370c      	adds	r7, #12
 80025da:	46bd      	mov	sp, r7
 80025dc:	bc80      	pop	{r7}
 80025de:	4770      	bx	lr

080025e0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80025e0:	b480      	push	{r7}
 80025e2:	b083      	sub	sp, #12
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80025e8:	bf00      	nop
 80025ea:	370c      	adds	r7, #12
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bc80      	pop	{r7}
 80025f0:	4770      	bx	lr

080025f2 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80025f2:	b480      	push	{r7}
 80025f4:	b083      	sub	sp, #12
 80025f6:	af00      	add	r7, sp, #0
 80025f8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80025fa:	bf00      	nop
 80025fc:	370c      	adds	r7, #12
 80025fe:	46bd      	mov	sp, r7
 8002600:	bc80      	pop	{r7}
 8002602:	4770      	bx	lr

08002604 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002604:	b480      	push	{r7}
 8002606:	b085      	sub	sp, #20
 8002608:	af00      	add	r7, sp, #0
 800260a:	6078      	str	r0, [r7, #4]
 800260c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800260e:	687b      	ldr	r3, [r7, #4]
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	4a29      	ldr	r2, [pc, #164]	@ (80026bc <TIM_Base_SetConfig+0xb8>)
 8002618:	4293      	cmp	r3, r2
 800261a:	d00b      	beq.n	8002634 <TIM_Base_SetConfig+0x30>
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002622:	d007      	beq.n	8002634 <TIM_Base_SetConfig+0x30>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	4a26      	ldr	r2, [pc, #152]	@ (80026c0 <TIM_Base_SetConfig+0xbc>)
 8002628:	4293      	cmp	r3, r2
 800262a:	d003      	beq.n	8002634 <TIM_Base_SetConfig+0x30>
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	4a25      	ldr	r2, [pc, #148]	@ (80026c4 <TIM_Base_SetConfig+0xc0>)
 8002630:	4293      	cmp	r3, r2
 8002632:	d108      	bne.n	8002646 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800263a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800263c:	683b      	ldr	r3, [r7, #0]
 800263e:	685b      	ldr	r3, [r3, #4]
 8002640:	68fa      	ldr	r2, [r7, #12]
 8002642:	4313      	orrs	r3, r2
 8002644:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	4a1c      	ldr	r2, [pc, #112]	@ (80026bc <TIM_Base_SetConfig+0xb8>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d00b      	beq.n	8002666 <TIM_Base_SetConfig+0x62>
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002654:	d007      	beq.n	8002666 <TIM_Base_SetConfig+0x62>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	4a19      	ldr	r2, [pc, #100]	@ (80026c0 <TIM_Base_SetConfig+0xbc>)
 800265a:	4293      	cmp	r3, r2
 800265c:	d003      	beq.n	8002666 <TIM_Base_SetConfig+0x62>
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	4a18      	ldr	r2, [pc, #96]	@ (80026c4 <TIM_Base_SetConfig+0xc0>)
 8002662:	4293      	cmp	r3, r2
 8002664:	d108      	bne.n	8002678 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002666:	68fb      	ldr	r3, [r7, #12]
 8002668:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800266c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800266e:	683b      	ldr	r3, [r7, #0]
 8002670:	68db      	ldr	r3, [r3, #12]
 8002672:	68fa      	ldr	r2, [r7, #12]
 8002674:	4313      	orrs	r3, r2
 8002676:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002678:	68fb      	ldr	r3, [r7, #12]
 800267a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	695b      	ldr	r3, [r3, #20]
 8002682:	4313      	orrs	r3, r2
 8002684:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800268c:	683b      	ldr	r3, [r7, #0]
 800268e:	689a      	ldr	r2, [r3, #8]
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681a      	ldr	r2, [r3, #0]
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	4a07      	ldr	r2, [pc, #28]	@ (80026bc <TIM_Base_SetConfig+0xb8>)
 80026a0:	4293      	cmp	r3, r2
 80026a2:	d103      	bne.n	80026ac <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	691a      	ldr	r2, [r3, #16]
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	2201      	movs	r2, #1
 80026b0:	615a      	str	r2, [r3, #20]
}
 80026b2:	bf00      	nop
 80026b4:	3714      	adds	r7, #20
 80026b6:	46bd      	mov	sp, r7
 80026b8:	bc80      	pop	{r7}
 80026ba:	4770      	bx	lr
 80026bc:	40012c00 	.word	0x40012c00
 80026c0:	40000400 	.word	0x40000400
 80026c4:	40000800 	.word	0x40000800

080026c8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80026c8:	b480      	push	{r7}
 80026ca:	b087      	sub	sp, #28
 80026cc:	af00      	add	r7, sp, #0
 80026ce:	6078      	str	r0, [r7, #4]
 80026d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a1b      	ldr	r3, [r3, #32]
 80026d6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	6a1b      	ldr	r3, [r3, #32]
 80026dc:	f023 0201 	bic.w	r2, r3, #1
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	699b      	ldr	r3, [r3, #24]
 80026ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80026f0:	68fb      	ldr	r3, [r7, #12]
 80026f2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80026f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	f023 0303 	bic.w	r3, r3, #3
 80026fe:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002700:	683b      	ldr	r3, [r7, #0]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	68fa      	ldr	r2, [r7, #12]
 8002706:	4313      	orrs	r3, r2
 8002708:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800270a:	697b      	ldr	r3, [r7, #20]
 800270c:	f023 0302 	bic.w	r3, r3, #2
 8002710:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	689b      	ldr	r3, [r3, #8]
 8002716:	697a      	ldr	r2, [r7, #20]
 8002718:	4313      	orrs	r3, r2
 800271a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	4a1c      	ldr	r2, [pc, #112]	@ (8002790 <TIM_OC1_SetConfig+0xc8>)
 8002720:	4293      	cmp	r3, r2
 8002722:	d10c      	bne.n	800273e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002724:	697b      	ldr	r3, [r7, #20]
 8002726:	f023 0308 	bic.w	r3, r3, #8
 800272a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	68db      	ldr	r3, [r3, #12]
 8002730:	697a      	ldr	r2, [r7, #20]
 8002732:	4313      	orrs	r3, r2
 8002734:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002736:	697b      	ldr	r3, [r7, #20]
 8002738:	f023 0304 	bic.w	r3, r3, #4
 800273c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	4a13      	ldr	r2, [pc, #76]	@ (8002790 <TIM_OC1_SetConfig+0xc8>)
 8002742:	4293      	cmp	r3, r2
 8002744:	d111      	bne.n	800276a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002746:	693b      	ldr	r3, [r7, #16]
 8002748:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800274c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800274e:	693b      	ldr	r3, [r7, #16]
 8002750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002754:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	695b      	ldr	r3, [r3, #20]
 800275a:	693a      	ldr	r2, [r7, #16]
 800275c:	4313      	orrs	r3, r2
 800275e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002760:	683b      	ldr	r3, [r7, #0]
 8002762:	699b      	ldr	r3, [r3, #24]
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	4313      	orrs	r3, r2
 8002768:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	693a      	ldr	r2, [r7, #16]
 800276e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	68fa      	ldr	r2, [r7, #12]
 8002774:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002776:	683b      	ldr	r3, [r7, #0]
 8002778:	685a      	ldr	r2, [r3, #4]
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	697a      	ldr	r2, [r7, #20]
 8002782:	621a      	str	r2, [r3, #32]
}
 8002784:	bf00      	nop
 8002786:	371c      	adds	r7, #28
 8002788:	46bd      	mov	sp, r7
 800278a:	bc80      	pop	{r7}
 800278c:	4770      	bx	lr
 800278e:	bf00      	nop
 8002790:	40012c00 	.word	0x40012c00

08002794 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002794:	b480      	push	{r7}
 8002796:	b087      	sub	sp, #28
 8002798:	af00      	add	r7, sp, #0
 800279a:	6078      	str	r0, [r7, #4]
 800279c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	6a1b      	ldr	r3, [r3, #32]
 80027a2:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6a1b      	ldr	r3, [r3, #32]
 80027a8:	f023 0210 	bic.w	r2, r3, #16
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	699b      	ldr	r3, [r3, #24]
 80027ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80027c2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80027c4:	68fb      	ldr	r3, [r7, #12]
 80027c6:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80027ca:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	021b      	lsls	r3, r3, #8
 80027d2:	68fa      	ldr	r2, [r7, #12]
 80027d4:	4313      	orrs	r3, r2
 80027d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80027d8:	697b      	ldr	r3, [r7, #20]
 80027da:	f023 0320 	bic.w	r3, r3, #32
 80027de:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80027e0:	683b      	ldr	r3, [r7, #0]
 80027e2:	689b      	ldr	r3, [r3, #8]
 80027e4:	011b      	lsls	r3, r3, #4
 80027e6:	697a      	ldr	r2, [r7, #20]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	4a1d      	ldr	r2, [pc, #116]	@ (8002864 <TIM_OC2_SetConfig+0xd0>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	d10d      	bne.n	8002810 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80027f4:	697b      	ldr	r3, [r7, #20]
 80027f6:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80027fa:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	68db      	ldr	r3, [r3, #12]
 8002800:	011b      	lsls	r3, r3, #4
 8002802:	697a      	ldr	r2, [r7, #20]
 8002804:	4313      	orrs	r3, r2
 8002806:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002808:	697b      	ldr	r3, [r7, #20]
 800280a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800280e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	4a14      	ldr	r2, [pc, #80]	@ (8002864 <TIM_OC2_SetConfig+0xd0>)
 8002814:	4293      	cmp	r3, r2
 8002816:	d113      	bne.n	8002840 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002818:	693b      	ldr	r3, [r7, #16]
 800281a:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800281e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002820:	693b      	ldr	r3, [r7, #16]
 8002822:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002826:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002828:	683b      	ldr	r3, [r7, #0]
 800282a:	695b      	ldr	r3, [r3, #20]
 800282c:	009b      	lsls	r3, r3, #2
 800282e:	693a      	ldr	r2, [r7, #16]
 8002830:	4313      	orrs	r3, r2
 8002832:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	699b      	ldr	r3, [r3, #24]
 8002838:	009b      	lsls	r3, r3, #2
 800283a:	693a      	ldr	r2, [r7, #16]
 800283c:	4313      	orrs	r3, r2
 800283e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002840:	687b      	ldr	r3, [r7, #4]
 8002842:	693a      	ldr	r2, [r7, #16]
 8002844:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	68fa      	ldr	r2, [r7, #12]
 800284a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800284c:	683b      	ldr	r3, [r7, #0]
 800284e:	685a      	ldr	r2, [r3, #4]
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	697a      	ldr	r2, [r7, #20]
 8002858:	621a      	str	r2, [r3, #32]
}
 800285a:	bf00      	nop
 800285c:	371c      	adds	r7, #28
 800285e:	46bd      	mov	sp, r7
 8002860:	bc80      	pop	{r7}
 8002862:	4770      	bx	lr
 8002864:	40012c00 	.word	0x40012c00

08002868 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002868:	b480      	push	{r7}
 800286a:	b087      	sub	sp, #28
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6a1b      	ldr	r3, [r3, #32]
 8002876:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	6a1b      	ldr	r3, [r3, #32]
 800287c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	69db      	ldr	r3, [r3, #28]
 800288e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002896:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	f023 0303 	bic.w	r3, r3, #3
 800289e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80028a0:	683b      	ldr	r3, [r7, #0]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	68fa      	ldr	r2, [r7, #12]
 80028a6:	4313      	orrs	r3, r2
 80028a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80028b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	021b      	lsls	r3, r3, #8
 80028b8:	697a      	ldr	r2, [r7, #20]
 80028ba:	4313      	orrs	r3, r2
 80028bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	4a1d      	ldr	r2, [pc, #116]	@ (8002938 <TIM_OC3_SetConfig+0xd0>)
 80028c2:	4293      	cmp	r3, r2
 80028c4:	d10d      	bne.n	80028e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80028c6:	697b      	ldr	r3, [r7, #20]
 80028c8:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80028cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80028ce:	683b      	ldr	r3, [r7, #0]
 80028d0:	68db      	ldr	r3, [r3, #12]
 80028d2:	021b      	lsls	r3, r3, #8
 80028d4:	697a      	ldr	r2, [r7, #20]
 80028d6:	4313      	orrs	r3, r2
 80028d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80028e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	4a14      	ldr	r2, [pc, #80]	@ (8002938 <TIM_OC3_SetConfig+0xd0>)
 80028e6:	4293      	cmp	r3, r2
 80028e8:	d113      	bne.n	8002912 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80028ea:	693b      	ldr	r3, [r7, #16]
 80028ec:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80028f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80028f2:	693b      	ldr	r3, [r7, #16]
 80028f4:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80028f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	011b      	lsls	r3, r3, #4
 8002900:	693a      	ldr	r2, [r7, #16]
 8002902:	4313      	orrs	r3, r2
 8002904:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8002906:	683b      	ldr	r3, [r7, #0]
 8002908:	699b      	ldr	r3, [r3, #24]
 800290a:	011b      	lsls	r3, r3, #4
 800290c:	693a      	ldr	r2, [r7, #16]
 800290e:	4313      	orrs	r3, r2
 8002910:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	693a      	ldr	r2, [r7, #16]
 8002916:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	68fa      	ldr	r2, [r7, #12]
 800291c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800291e:	683b      	ldr	r3, [r7, #0]
 8002920:	685a      	ldr	r2, [r3, #4]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	697a      	ldr	r2, [r7, #20]
 800292a:	621a      	str	r2, [r3, #32]
}
 800292c:	bf00      	nop
 800292e:	371c      	adds	r7, #28
 8002930:	46bd      	mov	sp, r7
 8002932:	bc80      	pop	{r7}
 8002934:	4770      	bx	lr
 8002936:	bf00      	nop
 8002938:	40012c00 	.word	0x40012c00

0800293c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800293c:	b480      	push	{r7}
 800293e:	b087      	sub	sp, #28
 8002940:	af00      	add	r7, sp, #0
 8002942:	6078      	str	r0, [r7, #4]
 8002944:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	6a1b      	ldr	r3, [r3, #32]
 800294a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	6a1b      	ldr	r3, [r3, #32]
 8002950:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	685b      	ldr	r3, [r3, #4]
 800295c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	69db      	ldr	r3, [r3, #28]
 8002962:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800296a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800296c:	68fb      	ldr	r3, [r7, #12]
 800296e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002972:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002974:	683b      	ldr	r3, [r7, #0]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	021b      	lsls	r3, r3, #8
 800297a:	68fa      	ldr	r2, [r7, #12]
 800297c:	4313      	orrs	r3, r2
 800297e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002986:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	689b      	ldr	r3, [r3, #8]
 800298c:	031b      	lsls	r3, r3, #12
 800298e:	693a      	ldr	r2, [r7, #16]
 8002990:	4313      	orrs	r3, r2
 8002992:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	4a0f      	ldr	r2, [pc, #60]	@ (80029d4 <TIM_OC4_SetConfig+0x98>)
 8002998:	4293      	cmp	r3, r2
 800299a:	d109      	bne.n	80029b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800299c:	697b      	ldr	r3, [r7, #20]
 800299e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80029a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	019b      	lsls	r3, r3, #6
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	4313      	orrs	r3, r2
 80029ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	697a      	ldr	r2, [r7, #20]
 80029b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80029bc:	683b      	ldr	r3, [r7, #0]
 80029be:	685a      	ldr	r2, [r3, #4]
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	693a      	ldr	r2, [r7, #16]
 80029c8:	621a      	str	r2, [r3, #32]
}
 80029ca:	bf00      	nop
 80029cc:	371c      	adds	r7, #28
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bc80      	pop	{r7}
 80029d2:	4770      	bx	lr
 80029d4:	40012c00 	.word	0x40012c00

080029d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029d8:	b480      	push	{r7}
 80029da:	b087      	sub	sp, #28
 80029dc:	af00      	add	r7, sp, #0
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	60b9      	str	r1, [r7, #8]
 80029e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	6a1b      	ldr	r3, [r3, #32]
 80029e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	6a1b      	ldr	r3, [r3, #32]
 80029ee:	f023 0201 	bic.w	r2, r3, #1
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029f6:	68fb      	ldr	r3, [r7, #12]
 80029f8:	699b      	ldr	r3, [r3, #24]
 80029fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80029fc:	693b      	ldr	r3, [r7, #16]
 80029fe:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	011b      	lsls	r3, r3, #4
 8002a08:	693a      	ldr	r2, [r7, #16]
 8002a0a:	4313      	orrs	r3, r2
 8002a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002a0e:	697b      	ldr	r3, [r7, #20]
 8002a10:	f023 030a 	bic.w	r3, r3, #10
 8002a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8002a16:	697a      	ldr	r2, [r7, #20]
 8002a18:	68bb      	ldr	r3, [r7, #8]
 8002a1a:	4313      	orrs	r3, r2
 8002a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	693a      	ldr	r2, [r7, #16]
 8002a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a24:	68fb      	ldr	r3, [r7, #12]
 8002a26:	697a      	ldr	r2, [r7, #20]
 8002a28:	621a      	str	r2, [r3, #32]
}
 8002a2a:	bf00      	nop
 8002a2c:	371c      	adds	r7, #28
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bc80      	pop	{r7}
 8002a32:	4770      	bx	lr

08002a34 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002a34:	b480      	push	{r7}
 8002a36:	b087      	sub	sp, #28
 8002a38:	af00      	add	r7, sp, #0
 8002a3a:	60f8      	str	r0, [r7, #12]
 8002a3c:	60b9      	str	r1, [r7, #8]
 8002a3e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	6a1b      	ldr	r3, [r3, #32]
 8002a44:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002a46:	68fb      	ldr	r3, [r7, #12]
 8002a48:	6a1b      	ldr	r3, [r3, #32]
 8002a4a:	f023 0210 	bic.w	r2, r3, #16
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	699b      	ldr	r3, [r3, #24]
 8002a56:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002a58:	693b      	ldr	r3, [r7, #16]
 8002a5a:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002a5e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	031b      	lsls	r3, r3, #12
 8002a64:	693a      	ldr	r2, [r7, #16]
 8002a66:	4313      	orrs	r3, r2
 8002a68:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002a6a:	697b      	ldr	r3, [r7, #20]
 8002a6c:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8002a70:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8002a72:	68bb      	ldr	r3, [r7, #8]
 8002a74:	011b      	lsls	r3, r3, #4
 8002a76:	697a      	ldr	r2, [r7, #20]
 8002a78:	4313      	orrs	r3, r2
 8002a7a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	693a      	ldr	r2, [r7, #16]
 8002a80:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a82:	68fb      	ldr	r3, [r7, #12]
 8002a84:	697a      	ldr	r2, [r7, #20]
 8002a86:	621a      	str	r2, [r3, #32]
}
 8002a88:	bf00      	nop
 8002a8a:	371c      	adds	r7, #28
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	bc80      	pop	{r7}
 8002a90:	4770      	bx	lr

08002a92 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b085      	sub	sp, #20
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002aa8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002aaa:	683a      	ldr	r2, [r7, #0]
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	f043 0307 	orr.w	r3, r3, #7
 8002ab4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68fa      	ldr	r2, [r7, #12]
 8002aba:	609a      	str	r2, [r3, #8]
}
 8002abc:	bf00      	nop
 8002abe:	3714      	adds	r7, #20
 8002ac0:	46bd      	mov	sp, r7
 8002ac2:	bc80      	pop	{r7}
 8002ac4:	4770      	bx	lr

08002ac6 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002ac6:	b480      	push	{r7}
 8002ac8:	b087      	sub	sp, #28
 8002aca:	af00      	add	r7, sp, #0
 8002acc:	60f8      	str	r0, [r7, #12]
 8002ace:	60b9      	str	r1, [r7, #8]
 8002ad0:	607a      	str	r2, [r7, #4]
 8002ad2:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002ad4:	68fb      	ldr	r3, [r7, #12]
 8002ad6:	689b      	ldr	r3, [r3, #8]
 8002ad8:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002ada:	697b      	ldr	r3, [r7, #20]
 8002adc:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002ae0:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002ae2:	683b      	ldr	r3, [r7, #0]
 8002ae4:	021a      	lsls	r2, r3, #8
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	431a      	orrs	r2, r3
 8002aea:	68bb      	ldr	r3, [r7, #8]
 8002aec:	4313      	orrs	r3, r2
 8002aee:	697a      	ldr	r2, [r7, #20]
 8002af0:	4313      	orrs	r3, r2
 8002af2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002af4:	68fb      	ldr	r3, [r7, #12]
 8002af6:	697a      	ldr	r2, [r7, #20]
 8002af8:	609a      	str	r2, [r3, #8]
}
 8002afa:	bf00      	nop
 8002afc:	371c      	adds	r7, #28
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bc80      	pop	{r7}
 8002b02:	4770      	bx	lr

08002b04 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b087      	sub	sp, #28
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	60f8      	str	r0, [r7, #12]
 8002b0c:	60b9      	str	r1, [r7, #8]
 8002b0e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002b10:	68bb      	ldr	r3, [r7, #8]
 8002b12:	f003 031f 	and.w	r3, r3, #31
 8002b16:	2201      	movs	r2, #1
 8002b18:	fa02 f303 	lsl.w	r3, r2, r3
 8002b1c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	6a1a      	ldr	r2, [r3, #32]
 8002b22:	697b      	ldr	r3, [r7, #20]
 8002b24:	43db      	mvns	r3, r3
 8002b26:	401a      	ands	r2, r3
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002b2c:	68fb      	ldr	r3, [r7, #12]
 8002b2e:	6a1a      	ldr	r2, [r3, #32]
 8002b30:	68bb      	ldr	r3, [r7, #8]
 8002b32:	f003 031f 	and.w	r3, r3, #31
 8002b36:	6879      	ldr	r1, [r7, #4]
 8002b38:	fa01 f303 	lsl.w	r3, r1, r3
 8002b3c:	431a      	orrs	r2, r3
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	621a      	str	r2, [r3, #32]
}
 8002b42:	bf00      	nop
 8002b44:	371c      	adds	r7, #28
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bc80      	pop	{r7}
 8002b4a:	4770      	bx	lr

08002b4c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b085      	sub	sp, #20
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
 8002b54:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d101      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002b60:	2302      	movs	r3, #2
 8002b62:	e046      	b.n	8002bf2 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	689b      	ldr	r3, [r3, #8]
 8002b82:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b8a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	68fa      	ldr	r2, [r7, #12]
 8002b92:	4313      	orrs	r3, r2
 8002b94:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	68fa      	ldr	r2, [r7, #12]
 8002b9c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a16      	ldr	r2, [pc, #88]	@ (8002bfc <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d00e      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb0:	d009      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a12      	ldr	r2, [pc, #72]	@ (8002c00 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d004      	beq.n	8002bc6 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a10      	ldr	r2, [pc, #64]	@ (8002c04 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d10c      	bne.n	8002be0 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002bc6:	68bb      	ldr	r3, [r7, #8]
 8002bc8:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002bcc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	685b      	ldr	r3, [r3, #4]
 8002bd2:	68ba      	ldr	r2, [r7, #8]
 8002bd4:	4313      	orrs	r3, r2
 8002bd6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2201      	movs	r2, #1
 8002be4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2200      	movs	r2, #0
 8002bec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002bf0:	2300      	movs	r3, #0
}
 8002bf2:	4618      	mov	r0, r3
 8002bf4:	3714      	adds	r7, #20
 8002bf6:	46bd      	mov	sp, r7
 8002bf8:	bc80      	pop	{r7}
 8002bfa:	4770      	bx	lr
 8002bfc:	40012c00 	.word	0x40012c00
 8002c00:	40000400 	.word	0x40000400
 8002c04:	40000800 	.word	0x40000800

08002c08 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	b083      	sub	sp, #12
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bc80      	pop	{r7}
 8002c18:	4770      	bx	lr

08002c1a <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002c1a:	b480      	push	{r7}
 8002c1c:	b083      	sub	sp, #12
 8002c1e:	af00      	add	r7, sp, #0
 8002c20:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002c22:	bf00      	nop
 8002c24:	370c      	adds	r7, #12
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bc80      	pop	{r7}
 8002c2a:	4770      	bx	lr

08002c2c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002c2c:	b580      	push	{r7, lr}
 8002c2e:	b082      	sub	sp, #8
 8002c30:	af00      	add	r7, sp, #0
 8002c32:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d101      	bne.n	8002c3e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002c3a:	2301      	movs	r3, #1
 8002c3c:	e042      	b.n	8002cc4 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002c44:	b2db      	uxtb	r3, r3
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d106      	bne.n	8002c58 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8002c52:	6878      	ldr	r0, [r7, #4]
 8002c54:	f7fd ffa4 	bl	8000ba0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	2224      	movs	r2, #36	@ 0x24
 8002c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	68da      	ldr	r2, [r3, #12]
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002c6e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8002c70:	6878      	ldr	r0, [r7, #4]
 8002c72:	f000 fe03 	bl	800387c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	691a      	ldr	r2, [r3, #16]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8002c84:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	695a      	ldr	r2, [r3, #20]
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8002c94:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68da      	ldr	r2, [r3, #12]
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	681b      	ldr	r3, [r3, #0]
 8002ca0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002ca4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	2200      	movs	r2, #0
 8002caa:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	2220      	movs	r2, #32
 8002cb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	2220      	movs	r2, #32
 8002cb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	2200      	movs	r2, #0
 8002cc0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08a      	sub	sp, #40	@ 0x28
 8002cd0:	af02      	add	r7, sp, #8
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	603b      	str	r3, [r7, #0]
 8002cd8:	4613      	mov	r3, r2
 8002cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002cdc:	2300      	movs	r3, #0
 8002cde:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8002ce0:	68fb      	ldr	r3, [r7, #12]
 8002ce2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	2b20      	cmp	r3, #32
 8002cea:	d16d      	bne.n	8002dc8 <HAL_UART_Transmit+0xfc>
  {
    if ((pData == NULL) || (Size == 0U))
 8002cec:	68bb      	ldr	r3, [r7, #8]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d002      	beq.n	8002cf8 <HAL_UART_Transmit+0x2c>
 8002cf2:	88fb      	ldrh	r3, [r7, #6]
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d101      	bne.n	8002cfc <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e066      	b.n	8002dca <HAL_UART_Transmit+0xfe>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2221      	movs	r2, #33	@ 0x21
 8002d06:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002d0a:	f7fe f89f 	bl	8000e4c <HAL_GetTick>
 8002d0e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	88fa      	ldrh	r2, [r7, #6]
 8002d14:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	88fa      	ldrh	r2, [r7, #6]
 8002d1a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002d24:	d108      	bne.n	8002d38 <HAL_UART_Transmit+0x6c>
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	691b      	ldr	r3, [r3, #16]
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d104      	bne.n	8002d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8002d32:	68bb      	ldr	r3, [r7, #8]
 8002d34:	61bb      	str	r3, [r7, #24]
 8002d36:	e003      	b.n	8002d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002d38:	68bb      	ldr	r3, [r7, #8]
 8002d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002d3c:	2300      	movs	r3, #0
 8002d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8002d40:	e02a      	b.n	8002d98 <HAL_UART_Transmit+0xcc>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8002d42:	683b      	ldr	r3, [r7, #0]
 8002d44:	9300      	str	r3, [sp, #0]
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	2200      	movs	r2, #0
 8002d4a:	2180      	movs	r1, #128	@ 0x80
 8002d4c:	68f8      	ldr	r0, [r7, #12]
 8002d4e:	f000 fb8b 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 8002d52:	4603      	mov	r3, r0
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d001      	beq.n	8002d5c <HAL_UART_Transmit+0x90>
      {
        return HAL_TIMEOUT;
 8002d58:	2303      	movs	r3, #3
 8002d5a:	e036      	b.n	8002dca <HAL_UART_Transmit+0xfe>
      }
      if (pdata8bits == NULL)
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d10b      	bne.n	8002d7a <HAL_UART_Transmit+0xae>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002d62:	69bb      	ldr	r3, [r7, #24]
 8002d64:	881b      	ldrh	r3, [r3, #0]
 8002d66:	461a      	mov	r2, r3
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002d70:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002d72:	69bb      	ldr	r3, [r7, #24]
 8002d74:	3302      	adds	r3, #2
 8002d76:	61bb      	str	r3, [r7, #24]
 8002d78:	e007      	b.n	8002d8a <HAL_UART_Transmit+0xbe>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	781a      	ldrb	r2, [r3, #0]
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	3301      	adds	r3, #1
 8002d88:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d8e:	b29b      	uxth	r3, r3
 8002d90:	3b01      	subs	r3, #1
 8002d92:	b29a      	uxth	r2, r3
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8002d9c:	b29b      	uxth	r3, r3
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d1cf      	bne.n	8002d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	9300      	str	r3, [sp, #0]
 8002da6:	697b      	ldr	r3, [r7, #20]
 8002da8:	2200      	movs	r2, #0
 8002daa:	2140      	movs	r1, #64	@ 0x40
 8002dac:	68f8      	ldr	r0, [r7, #12]
 8002dae:	f000 fb5b 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 8002db2:	4603      	mov	r3, r0
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d001      	beq.n	8002dbc <HAL_UART_Transmit+0xf0>
    {
      return HAL_TIMEOUT;
 8002db8:	2303      	movs	r3, #3
 8002dba:	e006      	b.n	8002dca <HAL_UART_Transmit+0xfe>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	2220      	movs	r2, #32
 8002dc0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8002dc4:	2300      	movs	r3, #0
 8002dc6:	e000      	b.n	8002dca <HAL_UART_Transmit+0xfe>
  }
  else
  {
    return HAL_BUSY;
 8002dc8:	2302      	movs	r3, #2
  }
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3720      	adds	r7, #32
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b08a      	sub	sp, #40	@ 0x28
 8002dd6:	af02      	add	r7, sp, #8
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8002de2:	2300      	movs	r3, #0
 8002de4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8002dec:	b2db      	uxtb	r3, r3
 8002dee:	2b20      	cmp	r3, #32
 8002df0:	d17c      	bne.n	8002eec <HAL_UART_Receive+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8002df2:	68bb      	ldr	r3, [r7, #8]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d002      	beq.n	8002dfe <HAL_UART_Receive+0x2c>
 8002df8:	88fb      	ldrh	r3, [r7, #6]
 8002dfa:	2b00      	cmp	r3, #0
 8002dfc:	d101      	bne.n	8002e02 <HAL_UART_Receive+0x30>
    {
      return  HAL_ERROR;
 8002dfe:	2301      	movs	r3, #1
 8002e00:	e075      	b.n	8002eee <HAL_UART_Receive+0x11c>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2200      	movs	r2, #0
 8002e06:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2222      	movs	r2, #34	@ 0x22
 8002e0c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	2200      	movs	r2, #0
 8002e14:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002e16:	f7fe f819 	bl	8000e4c <HAL_GetTick>
 8002e1a:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	88fa      	ldrh	r2, [r7, #6]
 8002e20:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	88fa      	ldrh	r2, [r7, #6]
 8002e26:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	689b      	ldr	r3, [r3, #8]
 8002e2c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e30:	d108      	bne.n	8002e44 <HAL_UART_Receive+0x72>
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	691b      	ldr	r3, [r3, #16]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d104      	bne.n	8002e44 <HAL_UART_Receive+0x72>
    {
      pdata8bits  = NULL;
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8002e3e:	68bb      	ldr	r3, [r7, #8]
 8002e40:	61bb      	str	r3, [r7, #24]
 8002e42:	e003      	b.n	8002e4c <HAL_UART_Receive+0x7a>
    }
    else
    {
      pdata8bits  = pData;
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002e48:	2300      	movs	r3, #0
 8002e4a:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8002e4c:	e043      	b.n	8002ed6 <HAL_UART_Receive+0x104>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8002e4e:	683b      	ldr	r3, [r7, #0]
 8002e50:	9300      	str	r3, [sp, #0]
 8002e52:	697b      	ldr	r3, [r7, #20]
 8002e54:	2200      	movs	r2, #0
 8002e56:	2120      	movs	r1, #32
 8002e58:	68f8      	ldr	r0, [r7, #12]
 8002e5a:	f000 fb05 	bl	8003468 <UART_WaitOnFlagUntilTimeout>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d001      	beq.n	8002e68 <HAL_UART_Receive+0x96>
      {
        return HAL_TIMEOUT;
 8002e64:	2303      	movs	r3, #3
 8002e66:	e042      	b.n	8002eee <HAL_UART_Receive+0x11c>
      }
      if (pdata8bits == NULL)
 8002e68:	69fb      	ldr	r3, [r7, #28]
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d10c      	bne.n	8002e88 <HAL_UART_Receive+0xb6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	b29b      	uxth	r3, r3
 8002e76:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002e7a:	b29a      	uxth	r2, r3
 8002e7c:	69bb      	ldr	r3, [r7, #24]
 8002e7e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	3302      	adds	r3, #2
 8002e84:	61bb      	str	r3, [r7, #24]
 8002e86:	e01f      	b.n	8002ec8 <HAL_UART_Receive+0xf6>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002e90:	d007      	beq.n	8002ea2 <HAL_UART_Receive+0xd0>
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	689b      	ldr	r3, [r3, #8]
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d10a      	bne.n	8002eb0 <HAL_UART_Receive+0xde>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	691b      	ldr	r3, [r3, #16]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d106      	bne.n	8002eb0 <HAL_UART_Receive+0xde>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	b2da      	uxtb	r2, r3
 8002eaa:	69fb      	ldr	r3, [r7, #28]
 8002eac:	701a      	strb	r2, [r3, #0]
 8002eae:	e008      	b.n	8002ec2 <HAL_UART_Receive+0xf0>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	b2db      	uxtb	r3, r3
 8002eb8:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8002ec2:	69fb      	ldr	r3, [r7, #28]
 8002ec4:	3301      	adds	r3, #1
 8002ec6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002ecc:	b29b      	uxth	r3, r3
 8002ece:	3b01      	subs	r3, #1
 8002ed0:	b29a      	uxth	r2, r3
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1b6      	bne.n	8002e4e <HAL_UART_Receive+0x7c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	2220      	movs	r2, #32
 8002ee4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8002ee8:	2300      	movs	r3, #0
 8002eea:	e000      	b.n	8002eee <HAL_UART_Receive+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8002eec:	2302      	movs	r3, #2
  }
}
 8002eee:	4618      	mov	r0, r3
 8002ef0:	3720      	adds	r7, #32
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bd80      	pop	{r7, pc}
	...

08002ef8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b0ba      	sub	sp, #232	@ 0xe8
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68db      	ldr	r3, [r3, #12]
 8002f10:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	695b      	ldr	r3, [r3, #20]
 8002f1a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8002f1e:	2300      	movs	r3, #0
 8002f20:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002f24:	2300      	movs	r3, #0
 8002f26:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8002f2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f2e:	f003 030f 	and.w	r3, r3, #15
 8002f32:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8002f36:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f3a:	2b00      	cmp	r3, #0
 8002f3c:	d10f      	bne.n	8002f5e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002f3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f42:	f003 0320 	and.w	r3, r3, #32
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d009      	beq.n	8002f5e <HAL_UART_IRQHandler+0x66>
 8002f4a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f4e:	f003 0320 	and.w	r3, r3, #32
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d003      	beq.n	8002f5e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f000 fbd1 	bl	80036fe <UART_Receive_IT>
      return;
 8002f5c:	e25b      	b.n	8003416 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8002f5e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	f000 80de 	beq.w	8003124 <HAL_UART_IRQHandler+0x22c>
 8002f68:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002f6c:	f003 0301 	and.w	r3, r3, #1
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d106      	bne.n	8002f82 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8002f74:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f78:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	f000 80d1 	beq.w	8003124 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8002f82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002f86:	f003 0301 	and.w	r3, r3, #1
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_UART_IRQHandler+0xae>
 8002f8e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002f92:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d005      	beq.n	8002fa6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002faa:	f003 0304 	and.w	r3, r3, #4
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d00b      	beq.n	8002fca <HAL_UART_IRQHandler+0xd2>
 8002fb2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fb6:	f003 0301 	and.w	r3, r3, #1
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d005      	beq.n	8002fca <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fc2:	f043 0202 	orr.w	r2, r3, #2
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002fca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002fce:	f003 0302 	and.w	r3, r3, #2
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d00b      	beq.n	8002fee <HAL_UART_IRQHandler+0xf6>
 8002fd6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002fda:	f003 0301 	and.w	r3, r3, #1
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d005      	beq.n	8002fee <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fe6:	f043 0204 	orr.w	r2, r3, #4
 8002fea:	687b      	ldr	r3, [r7, #4]
 8002fec:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002fee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ff2:	f003 0308 	and.w	r3, r3, #8
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d011      	beq.n	800301e <HAL_UART_IRQHandler+0x126>
 8002ffa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002ffe:	f003 0320 	and.w	r3, r3, #32
 8003002:	2b00      	cmp	r3, #0
 8003004:	d105      	bne.n	8003012 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8003006:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800300a:	f003 0301 	and.w	r3, r3, #1
 800300e:	2b00      	cmp	r3, #0
 8003010:	d005      	beq.n	800301e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003016:	f043 0208 	orr.w	r2, r3, #8
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003022:	2b00      	cmp	r3, #0
 8003024:	f000 81f2 	beq.w	800340c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8003028:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800302c:	f003 0320 	and.w	r3, r3, #32
 8003030:	2b00      	cmp	r3, #0
 8003032:	d008      	beq.n	8003046 <HAL_UART_IRQHandler+0x14e>
 8003034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003038:	f003 0320 	and.w	r3, r3, #32
 800303c:	2b00      	cmp	r3, #0
 800303e:	d002      	beq.n	8003046 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8003040:	6878      	ldr	r0, [r7, #4]
 8003042:	f000 fb5c 	bl	80036fe <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	695b      	ldr	r3, [r3, #20]
 800304c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003050:	2b00      	cmp	r3, #0
 8003052:	bf14      	ite	ne
 8003054:	2301      	movne	r3, #1
 8003056:	2300      	moveq	r3, #0
 8003058:	b2db      	uxtb	r3, r3
 800305a:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003062:	f003 0308 	and.w	r3, r3, #8
 8003066:	2b00      	cmp	r3, #0
 8003068:	d103      	bne.n	8003072 <HAL_UART_IRQHandler+0x17a>
 800306a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800306e:	2b00      	cmp	r3, #0
 8003070:	d04f      	beq.n	8003112 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8003072:	6878      	ldr	r0, [r7, #4]
 8003074:	f000 fa66 	bl	8003544 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	695b      	ldr	r3, [r3, #20]
 800307e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003082:	2b00      	cmp	r3, #0
 8003084:	d041      	beq.n	800310a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	681b      	ldr	r3, [r3, #0]
 800308a:	3314      	adds	r3, #20
 800308c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003090:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003094:	e853 3f00 	ldrex	r3, [r3]
 8003098:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800309c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80030a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80030a4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	3314      	adds	r3, #20
 80030ae:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80030b2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80030b6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80030ba:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80030be:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80030c2:	e841 2300 	strex	r3, r2, [r1]
 80030c6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80030ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d1d9      	bne.n	8003086 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d013      	beq.n	8003102 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030de:	4a7e      	ldr	r2, [pc, #504]	@ (80032d8 <HAL_UART_IRQHandler+0x3e0>)
 80030e0:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030e6:	4618      	mov	r0, r3
 80030e8:	f7fe f826 	bl	8001138 <HAL_DMA_Abort_IT>
 80030ec:	4603      	mov	r3, r0
 80030ee:	2b00      	cmp	r3, #0
 80030f0:	d016      	beq.n	8003120 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80030f6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80030f8:	687a      	ldr	r2, [r7, #4]
 80030fa:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80030fc:	4610      	mov	r0, r2
 80030fe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003100:	e00e      	b.n	8003120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8003102:	6878      	ldr	r0, [r7, #4]
 8003104:	f000 f99c 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003108:	e00a      	b.n	8003120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800310a:	6878      	ldr	r0, [r7, #4]
 800310c:	f000 f998 	bl	8003440 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003110:	e006      	b.n	8003120 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8003112:	6878      	ldr	r0, [r7, #4]
 8003114:	f000 f994 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	2200      	movs	r2, #0
 800311c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800311e:	e175      	b.n	800340c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003120:	bf00      	nop
    return;
 8003122:	e173      	b.n	800340c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003128:	2b01      	cmp	r3, #1
 800312a:	f040 814f 	bne.w	80033cc <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800312e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8003132:	f003 0310 	and.w	r3, r3, #16
 8003136:	2b00      	cmp	r3, #0
 8003138:	f000 8148 	beq.w	80033cc <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800313c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8003140:	f003 0310 	and.w	r3, r3, #16
 8003144:	2b00      	cmp	r3, #0
 8003146:	f000 8141 	beq.w	80033cc <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800314a:	2300      	movs	r3, #0
 800314c:	60bb      	str	r3, [r7, #8]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	60bb      	str	r3, [r7, #8]
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	685b      	ldr	r3, [r3, #4]
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800316a:	2b00      	cmp	r3, #0
 800316c:	f000 80b6 	beq.w	80032dc <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003174:	681b      	ldr	r3, [r3, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800317c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8003180:	2b00      	cmp	r3, #0
 8003182:	f000 8145 	beq.w	8003410 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800318a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800318e:	429a      	cmp	r2, r3
 8003190:	f080 813e 	bcs.w	8003410 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800319a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80031a0:	699b      	ldr	r3, [r3, #24]
 80031a2:	2b20      	cmp	r3, #32
 80031a4:	f000 8088 	beq.w	80032b8 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	330c      	adds	r3, #12
 80031ae:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031b2:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80031b6:	e853 3f00 	ldrex	r3, [r3]
 80031ba:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80031be:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80031c2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80031c6:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	330c      	adds	r3, #12
 80031d0:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80031d4:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80031d8:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80031dc:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80031e0:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80031e4:	e841 2300 	strex	r3, r2, [r1]
 80031e8:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80031ec:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d1d9      	bne.n	80031a8 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	3314      	adds	r3, #20
 80031fa:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80031fc:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80031fe:	e853 3f00 	ldrex	r3, [r3]
 8003202:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8003204:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8003206:	f023 0301 	bic.w	r3, r3, #1
 800320a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	3314      	adds	r3, #20
 8003214:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8003218:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800321c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800321e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8003220:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8003224:	e841 2300 	strex	r3, r2, [r1]
 8003228:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 800322a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800322c:	2b00      	cmp	r3, #0
 800322e:	d1e1      	bne.n	80031f4 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	3314      	adds	r3, #20
 8003236:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8003240:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003242:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003246:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	3314      	adds	r3, #20
 8003250:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8003254:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8003256:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003258:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 800325a:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800325c:	e841 2300 	strex	r3, r2, [r1]
 8003260:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8003262:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8003264:	2b00      	cmp	r3, #0
 8003266:	d1e3      	bne.n	8003230 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2220      	movs	r2, #32
 800326c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	2200      	movs	r2, #0
 8003274:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	330c      	adds	r3, #12
 800327c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800327e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8003280:	e853 3f00 	ldrex	r3, [r3]
 8003284:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8003286:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003288:	f023 0310 	bic.w	r3, r3, #16
 800328c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	330c      	adds	r3, #12
 8003296:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800329a:	65ba      	str	r2, [r7, #88]	@ 0x58
 800329c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800329e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80032a0:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80032a2:	e841 2300 	strex	r3, r2, [r1]
 80032a6:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80032a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d1e3      	bne.n	8003276 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80032b2:	4618      	mov	r0, r3
 80032b4:	f7fd ff05 	bl	80010c2 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2202      	movs	r2, #2
 80032bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032c6:	b29b      	uxth	r3, r3
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	b29b      	uxth	r3, r3
 80032cc:	4619      	mov	r1, r3
 80032ce:	6878      	ldr	r0, [r7, #4]
 80032d0:	f000 f8bf 	bl	8003452 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80032d4:	e09c      	b.n	8003410 <HAL_UART_IRQHandler+0x518>
 80032d6:	bf00      	nop
 80032d8:	08003609 	.word	0x08003609
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032e4:	b29b      	uxth	r3, r3
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80032f0:	b29b      	uxth	r3, r3
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	f000 808e 	beq.w	8003414 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80032f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	f000 8089 	beq.w	8003414 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	330c      	adds	r3, #12
 8003308:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800330a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800330c:	e853 3f00 	ldrex	r3, [r3]
 8003310:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8003312:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003314:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003318:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681b      	ldr	r3, [r3, #0]
 8003320:	330c      	adds	r3, #12
 8003322:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8003326:	647a      	str	r2, [r7, #68]	@ 0x44
 8003328:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800332a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 800332c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800332e:	e841 2300 	strex	r3, r2, [r1]
 8003332:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8003334:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1e3      	bne.n	8003302 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800333a:	687b      	ldr	r3, [r7, #4]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	3314      	adds	r3, #20
 8003340:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003342:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003344:	e853 3f00 	ldrex	r3, [r3]
 8003348:	623b      	str	r3, [r7, #32]
   return(result);
 800334a:	6a3b      	ldr	r3, [r7, #32]
 800334c:	f023 0301 	bic.w	r3, r3, #1
 8003350:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	3314      	adds	r3, #20
 800335a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800335e:	633a      	str	r2, [r7, #48]	@ 0x30
 8003360:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003362:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8003364:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003366:	e841 2300 	strex	r3, r2, [r1]
 800336a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 800336c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800336e:	2b00      	cmp	r3, #0
 8003370:	d1e3      	bne.n	800333a <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	2220      	movs	r2, #32
 8003376:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	2200      	movs	r2, #0
 800337e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	330c      	adds	r3, #12
 8003386:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003388:	693b      	ldr	r3, [r7, #16]
 800338a:	e853 3f00 	ldrex	r3, [r3]
 800338e:	60fb      	str	r3, [r7, #12]
   return(result);
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f023 0310 	bic.w	r3, r3, #16
 8003396:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	330c      	adds	r3, #12
 80033a0:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80033a4:	61fa      	str	r2, [r7, #28]
 80033a6:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80033a8:	69b9      	ldr	r1, [r7, #24]
 80033aa:	69fa      	ldr	r2, [r7, #28]
 80033ac:	e841 2300 	strex	r3, r2, [r1]
 80033b0:	617b      	str	r3, [r7, #20]
   return(result);
 80033b2:	697b      	ldr	r3, [r7, #20]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d1e3      	bne.n	8003380 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2202      	movs	r2, #2
 80033bc:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80033be:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80033c2:	4619      	mov	r1, r3
 80033c4:	6878      	ldr	r0, [r7, #4]
 80033c6:	f000 f844 	bl	8003452 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80033ca:	e023      	b.n	8003414 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80033cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033d0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d009      	beq.n	80033ec <HAL_UART_IRQHandler+0x4f4>
 80033d8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	d003      	beq.n	80033ec <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80033e4:	6878      	ldr	r0, [r7, #4]
 80033e6:	f000 f923 	bl	8003630 <UART_Transmit_IT>
    return;
 80033ea:	e014      	b.n	8003416 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80033ec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80033f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d00e      	beq.n	8003416 <HAL_UART_IRQHandler+0x51e>
 80033f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80033fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d008      	beq.n	8003416 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f000 f962 	bl	80036ce <UART_EndTransmit_IT>
    return;
 800340a:	e004      	b.n	8003416 <HAL_UART_IRQHandler+0x51e>
    return;
 800340c:	bf00      	nop
 800340e:	e002      	b.n	8003416 <HAL_UART_IRQHandler+0x51e>
      return;
 8003410:	bf00      	nop
 8003412:	e000      	b.n	8003416 <HAL_UART_IRQHandler+0x51e>
      return;
 8003414:	bf00      	nop
  }
}
 8003416:	37e8      	adds	r7, #232	@ 0xe8
 8003418:	46bd      	mov	sp, r7
 800341a:	bd80      	pop	{r7, pc}

0800341c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800341c:	b480      	push	{r7}
 800341e:	b083      	sub	sp, #12
 8003420:	af00      	add	r7, sp, #0
 8003422:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8003424:	bf00      	nop
 8003426:	370c      	adds	r7, #12
 8003428:	46bd      	mov	sp, r7
 800342a:	bc80      	pop	{r7}
 800342c:	4770      	bx	lr

0800342e <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800342e:	b480      	push	{r7}
 8003430:	b083      	sub	sp, #12
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8003436:	bf00      	nop
 8003438:	370c      	adds	r7, #12
 800343a:	46bd      	mov	sp, r7
 800343c:	bc80      	pop	{r7}
 800343e:	4770      	bx	lr

08003440 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8003440:	b480      	push	{r7}
 8003442:	b083      	sub	sp, #12
 8003444:	af00      	add	r7, sp, #0
 8003446:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8003448:	bf00      	nop
 800344a:	370c      	adds	r7, #12
 800344c:	46bd      	mov	sp, r7
 800344e:	bc80      	pop	{r7}
 8003450:	4770      	bx	lr

08003452 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8003452:	b480      	push	{r7}
 8003454:	b083      	sub	sp, #12
 8003456:	af00      	add	r7, sp, #0
 8003458:	6078      	str	r0, [r7, #4]
 800345a:	460b      	mov	r3, r1
 800345c:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800345e:	bf00      	nop
 8003460:	370c      	adds	r7, #12
 8003462:	46bd      	mov	sp, r7
 8003464:	bc80      	pop	{r7}
 8003466:	4770      	bx	lr

08003468 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b090      	sub	sp, #64	@ 0x40
 800346c:	af00      	add	r7, sp, #0
 800346e:	60f8      	str	r0, [r7, #12]
 8003470:	60b9      	str	r1, [r7, #8]
 8003472:	603b      	str	r3, [r7, #0]
 8003474:	4613      	mov	r3, r2
 8003476:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003478:	e050      	b.n	800351c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800347a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d04c      	beq.n	800351c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8003482:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003484:	2b00      	cmp	r3, #0
 8003486:	d007      	beq.n	8003498 <UART_WaitOnFlagUntilTimeout+0x30>
 8003488:	f7fd fce0 	bl	8000e4c <HAL_GetTick>
 800348c:	4602      	mov	r2, r0
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	1ad3      	subs	r3, r2, r3
 8003492:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8003494:	429a      	cmp	r2, r3
 8003496:	d241      	bcs.n	800351c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	330c      	adds	r3, #12
 800349e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80034a2:	e853 3f00 	ldrex	r3, [r3]
 80034a6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80034a8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034aa:	f423 73d0 	bic.w	r3, r3, #416	@ 0x1a0
 80034ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	330c      	adds	r3, #12
 80034b6:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80034b8:	637a      	str	r2, [r7, #52]	@ 0x34
 80034ba:	633b      	str	r3, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034bc:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80034be:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80034c0:	e841 2300 	strex	r3, r2, [r1]
 80034c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80034c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d1e5      	bne.n	8003498 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	3314      	adds	r3, #20
 80034d2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80034d4:	697b      	ldr	r3, [r7, #20]
 80034d6:	e853 3f00 	ldrex	r3, [r3]
 80034da:	613b      	str	r3, [r7, #16]
   return(result);
 80034dc:	693b      	ldr	r3, [r7, #16]
 80034de:	f023 0301 	bic.w	r3, r3, #1
 80034e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	3314      	adds	r3, #20
 80034ea:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 80034ec:	623a      	str	r2, [r7, #32]
 80034ee:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80034f0:	69f9      	ldr	r1, [r7, #28]
 80034f2:	6a3a      	ldr	r2, [r7, #32]
 80034f4:	e841 2300 	strex	r3, r2, [r1]
 80034f8:	61bb      	str	r3, [r7, #24]
   return(result);
 80034fa:	69bb      	ldr	r3, [r7, #24]
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	d1e5      	bne.n	80034cc <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	2220      	movs	r2, #32
 8003504:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
        huart->RxState = HAL_UART_STATE_READY;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	2220      	movs	r2, #32
 800350c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8003510:	68fb      	ldr	r3, [r7, #12]
 8003512:	2200      	movs	r2, #0
 8003514:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

        return HAL_TIMEOUT;
 8003518:	2303      	movs	r3, #3
 800351a:	e00f      	b.n	800353c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	681a      	ldr	r2, [r3, #0]
 8003522:	68bb      	ldr	r3, [r7, #8]
 8003524:	4013      	ands	r3, r2
 8003526:	68ba      	ldr	r2, [r7, #8]
 8003528:	429a      	cmp	r2, r3
 800352a:	bf0c      	ite	eq
 800352c:	2301      	moveq	r3, #1
 800352e:	2300      	movne	r3, #0
 8003530:	b2db      	uxtb	r3, r3
 8003532:	461a      	mov	r2, r3
 8003534:	79fb      	ldrb	r3, [r7, #7]
 8003536:	429a      	cmp	r2, r3
 8003538:	d09f      	beq.n	800347a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800353a:	2300      	movs	r3, #0
}
 800353c:	4618      	mov	r0, r3
 800353e:	3740      	adds	r7, #64	@ 0x40
 8003540:	46bd      	mov	sp, r7
 8003542:	bd80      	pop	{r7, pc}

08003544 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003544:	b480      	push	{r7}
 8003546:	b095      	sub	sp, #84	@ 0x54
 8003548:	af00      	add	r7, sp, #0
 800354a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	330c      	adds	r3, #12
 8003552:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003554:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003556:	e853 3f00 	ldrex	r3, [r3]
 800355a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800355c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800355e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8003562:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	330c      	adds	r3, #12
 800356a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800356c:	643a      	str	r2, [r7, #64]	@ 0x40
 800356e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003570:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8003572:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8003574:	e841 2300 	strex	r3, r2, [r1]
 8003578:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800357a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800357c:	2b00      	cmp	r3, #0
 800357e:	d1e5      	bne.n	800354c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	3314      	adds	r3, #20
 8003586:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003588:	6a3b      	ldr	r3, [r7, #32]
 800358a:	e853 3f00 	ldrex	r3, [r3]
 800358e:	61fb      	str	r3, [r7, #28]
   return(result);
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	f023 0301 	bic.w	r3, r3, #1
 8003596:	64bb      	str	r3, [r7, #72]	@ 0x48
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	3314      	adds	r3, #20
 800359e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80035a0:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035a2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035a4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80035a6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80035a8:	e841 2300 	strex	r3, r2, [r1]
 80035ac:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80035ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e5      	bne.n	8003580 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80035b8:	2b01      	cmp	r3, #1
 80035ba:	d119      	bne.n	80035f0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	330c      	adds	r3, #12
 80035c2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	e853 3f00 	ldrex	r3, [r3]
 80035ca:	60bb      	str	r3, [r7, #8]
   return(result);
 80035cc:	68bb      	ldr	r3, [r7, #8]
 80035ce:	f023 0310 	bic.w	r3, r3, #16
 80035d2:	647b      	str	r3, [r7, #68]	@ 0x44
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	330c      	adds	r3, #12
 80035da:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80035dc:	61ba      	str	r2, [r7, #24]
 80035de:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80035e0:	6979      	ldr	r1, [r7, #20]
 80035e2:	69ba      	ldr	r2, [r7, #24]
 80035e4:	e841 2300 	strex	r3, r2, [r1]
 80035e8:	613b      	str	r3, [r7, #16]
   return(result);
 80035ea:	693b      	ldr	r3, [r7, #16]
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d1e5      	bne.n	80035bc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	2220      	movs	r2, #32
 80035f4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	2200      	movs	r2, #0
 80035fc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80035fe:	bf00      	nop
 8003600:	3754      	adds	r7, #84	@ 0x54
 8003602:	46bd      	mov	sp, r7
 8003604:	bc80      	pop	{r7}
 8003606:	4770      	bx	lr

08003608 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003608:	b580      	push	{r7, lr}
 800360a:	b084      	sub	sp, #16
 800360c:	af00      	add	r7, sp, #0
 800360e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003614:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	2200      	movs	r2, #0
 800361a:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003622:	68f8      	ldr	r0, [r7, #12]
 8003624:	f7ff ff0c 	bl	8003440 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8003628:	bf00      	nop
 800362a:	3710      	adds	r7, #16
 800362c:	46bd      	mov	sp, r7
 800362e:	bd80      	pop	{r7, pc}

08003630 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003630:	b480      	push	{r7}
 8003632:	b085      	sub	sp, #20
 8003634:	af00      	add	r7, sp, #0
 8003636:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800363e:	b2db      	uxtb	r3, r3
 8003640:	2b21      	cmp	r3, #33	@ 0x21
 8003642:	d13e      	bne.n	80036c2 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	689b      	ldr	r3, [r3, #8]
 8003648:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800364c:	d114      	bne.n	8003678 <UART_Transmit_IT+0x48>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	691b      	ldr	r3, [r3, #16]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d110      	bne.n	8003678 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	881b      	ldrh	r3, [r3, #0]
 8003660:	461a      	mov	r2, r3
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800366a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	1c9a      	adds	r2, r3, #2
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	621a      	str	r2, [r3, #32]
 8003676:	e008      	b.n	800368a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	1c59      	adds	r1, r3, #1
 800367e:	687a      	ldr	r2, [r7, #4]
 8003680:	6211      	str	r1, [r2, #32]
 8003682:	781a      	ldrb	r2, [r3, #0]
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800368e:	b29b      	uxth	r3, r3
 8003690:	3b01      	subs	r3, #1
 8003692:	b29b      	uxth	r3, r3
 8003694:	687a      	ldr	r2, [r7, #4]
 8003696:	4619      	mov	r1, r3
 8003698:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800369a:	2b00      	cmp	r3, #0
 800369c:	d10f      	bne.n	80036be <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	68da      	ldr	r2, [r3, #12]
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	681b      	ldr	r3, [r3, #0]
 80036a8:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80036ac:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	68da      	ldr	r2, [r3, #12]
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80036bc:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80036be:	2300      	movs	r3, #0
 80036c0:	e000      	b.n	80036c4 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80036c2:	2302      	movs	r3, #2
  }
}
 80036c4:	4618      	mov	r0, r3
 80036c6:	3714      	adds	r7, #20
 80036c8:	46bd      	mov	sp, r7
 80036ca:	bc80      	pop	{r7}
 80036cc:	4770      	bx	lr

080036ce <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80036ce:	b580      	push	{r7, lr}
 80036d0:	b082      	sub	sp, #8
 80036d2:	af00      	add	r7, sp, #0
 80036d4:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	68da      	ldr	r2, [r3, #12]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036e4:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2220      	movs	r2, #32
 80036ea:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7ff fe94 	bl	800341c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80036f4:	2300      	movs	r3, #0
}
 80036f6:	4618      	mov	r0, r3
 80036f8:	3708      	adds	r7, #8
 80036fa:	46bd      	mov	sp, r7
 80036fc:	bd80      	pop	{r7, pc}

080036fe <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80036fe:	b580      	push	{r7, lr}
 8003700:	b08c      	sub	sp, #48	@ 0x30
 8003702:	af00      	add	r7, sp, #0
 8003704:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800370c:	b2db      	uxtb	r3, r3
 800370e:	2b22      	cmp	r3, #34	@ 0x22
 8003710:	f040 80ae 	bne.w	8003870 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800371c:	d117      	bne.n	800374e <UART_Receive_IT+0x50>
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	691b      	ldr	r3, [r3, #16]
 8003722:	2b00      	cmp	r3, #0
 8003724:	d113      	bne.n	800374e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8003726:	2300      	movs	r3, #0
 8003728:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800372e:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	685b      	ldr	r3, [r3, #4]
 8003736:	b29b      	uxth	r3, r3
 8003738:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800373c:	b29a      	uxth	r2, r3
 800373e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003740:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003746:	1c9a      	adds	r2, r3, #2
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	629a      	str	r2, [r3, #40]	@ 0x28
 800374c:	e026      	b.n	800379c <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003752:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003754:	2300      	movs	r3, #0
 8003756:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	689b      	ldr	r3, [r3, #8]
 800375c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003760:	d007      	beq.n	8003772 <UART_Receive_IT+0x74>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	689b      	ldr	r3, [r3, #8]
 8003766:	2b00      	cmp	r3, #0
 8003768:	d10a      	bne.n	8003780 <UART_Receive_IT+0x82>
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	691b      	ldr	r3, [r3, #16]
 800376e:	2b00      	cmp	r3, #0
 8003770:	d106      	bne.n	8003780 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	b2da      	uxtb	r2, r3
 800377a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800377c:	701a      	strb	r2, [r3, #0]
 800377e:	e008      	b.n	8003792 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	685b      	ldr	r3, [r3, #4]
 8003786:	b2db      	uxtb	r3, r3
 8003788:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800378c:	b2da      	uxtb	r2, r3
 800378e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8003790:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003796:	1c5a      	adds	r2, r3, #1
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80037a0:	b29b      	uxth	r3, r3
 80037a2:	3b01      	subs	r3, #1
 80037a4:	b29b      	uxth	r3, r3
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4619      	mov	r1, r3
 80037aa:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d15d      	bne.n	800386c <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68da      	ldr	r2, [r3, #12]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0220 	bic.w	r2, r2, #32
 80037be:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	68da      	ldr	r2, [r3, #12]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80037ce:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	695a      	ldr	r2, [r3, #20]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f022 0201 	bic.w	r2, r2, #1
 80037de:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2220      	movs	r2, #32
 80037e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037f2:	2b01      	cmp	r3, #1
 80037f4:	d135      	bne.n	8003862 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	2200      	movs	r2, #0
 80037fa:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	330c      	adds	r3, #12
 8003802:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003804:	697b      	ldr	r3, [r7, #20]
 8003806:	e853 3f00 	ldrex	r3, [r3]
 800380a:	613b      	str	r3, [r7, #16]
   return(result);
 800380c:	693b      	ldr	r3, [r7, #16]
 800380e:	f023 0310 	bic.w	r3, r3, #16
 8003812:	627b      	str	r3, [r7, #36]	@ 0x24
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	330c      	adds	r3, #12
 800381a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800381c:	623a      	str	r2, [r7, #32]
 800381e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003820:	69f9      	ldr	r1, [r7, #28]
 8003822:	6a3a      	ldr	r2, [r7, #32]
 8003824:	e841 2300 	strex	r3, r2, [r1]
 8003828:	61bb      	str	r3, [r7, #24]
   return(result);
 800382a:	69bb      	ldr	r3, [r7, #24]
 800382c:	2b00      	cmp	r3, #0
 800382e:	d1e5      	bne.n	80037fc <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	f003 0310 	and.w	r3, r3, #16
 800383a:	2b10      	cmp	r3, #16
 800383c:	d10a      	bne.n	8003854 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	60fb      	str	r3, [r7, #12]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	60fb      	str	r3, [r7, #12]
 8003852:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8003858:	4619      	mov	r1, r3
 800385a:	6878      	ldr	r0, [r7, #4]
 800385c:	f7ff fdf9 	bl	8003452 <HAL_UARTEx_RxEventCallback>
 8003860:	e002      	b.n	8003868 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003862:	6878      	ldr	r0, [r7, #4]
 8003864:	f7ff fde3 	bl	800342e <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8003868:	2300      	movs	r3, #0
 800386a:	e002      	b.n	8003872 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800386c:	2300      	movs	r3, #0
 800386e:	e000      	b.n	8003872 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8003870:	2302      	movs	r3, #2
  }
}
 8003872:	4618      	mov	r0, r3
 8003874:	3730      	adds	r7, #48	@ 0x30
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}
	...

0800387c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b084      	sub	sp, #16
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	691b      	ldr	r3, [r3, #16]
 800388a:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	68da      	ldr	r2, [r3, #12]
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	430a      	orrs	r2, r1
 8003898:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	689a      	ldr	r2, [r3, #8]
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	691b      	ldr	r3, [r3, #16]
 80038a2:	431a      	orrs	r2, r3
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	695b      	ldr	r3, [r3, #20]
 80038a8:	4313      	orrs	r3, r2
 80038aa:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	68db      	ldr	r3, [r3, #12]
 80038b2:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80038b6:	f023 030c 	bic.w	r3, r3, #12
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	6812      	ldr	r2, [r2, #0]
 80038be:	68b9      	ldr	r1, [r7, #8]
 80038c0:	430b      	orrs	r3, r1
 80038c2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	695b      	ldr	r3, [r3, #20]
 80038ca:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	699a      	ldr	r2, [r3, #24]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	430a      	orrs	r2, r1
 80038d8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	4a2c      	ldr	r2, [pc, #176]	@ (8003990 <UART_SetConfig+0x114>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d103      	bne.n	80038ec <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80038e4:	f7fe fa54 	bl	8001d90 <HAL_RCC_GetPCLK2Freq>
 80038e8:	60f8      	str	r0, [r7, #12]
 80038ea:	e002      	b.n	80038f2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80038ec:	f7fe fa3c 	bl	8001d68 <HAL_RCC_GetPCLK1Freq>
 80038f0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80038f2:	68fa      	ldr	r2, [r7, #12]
 80038f4:	4613      	mov	r3, r2
 80038f6:	009b      	lsls	r3, r3, #2
 80038f8:	4413      	add	r3, r2
 80038fa:	009a      	lsls	r2, r3, #2
 80038fc:	441a      	add	r2, r3
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	009b      	lsls	r3, r3, #2
 8003904:	fbb2 f3f3 	udiv	r3, r2, r3
 8003908:	4a22      	ldr	r2, [pc, #136]	@ (8003994 <UART_SetConfig+0x118>)
 800390a:	fba2 2303 	umull	r2, r3, r2, r3
 800390e:	095b      	lsrs	r3, r3, #5
 8003910:	0119      	lsls	r1, r3, #4
 8003912:	68fa      	ldr	r2, [r7, #12]
 8003914:	4613      	mov	r3, r2
 8003916:	009b      	lsls	r3, r3, #2
 8003918:	4413      	add	r3, r2
 800391a:	009a      	lsls	r2, r3, #2
 800391c:	441a      	add	r2, r3
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	685b      	ldr	r3, [r3, #4]
 8003922:	009b      	lsls	r3, r3, #2
 8003924:	fbb2 f2f3 	udiv	r2, r2, r3
 8003928:	4b1a      	ldr	r3, [pc, #104]	@ (8003994 <UART_SetConfig+0x118>)
 800392a:	fba3 0302 	umull	r0, r3, r3, r2
 800392e:	095b      	lsrs	r3, r3, #5
 8003930:	2064      	movs	r0, #100	@ 0x64
 8003932:	fb00 f303 	mul.w	r3, r0, r3
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	011b      	lsls	r3, r3, #4
 800393a:	3332      	adds	r3, #50	@ 0x32
 800393c:	4a15      	ldr	r2, [pc, #84]	@ (8003994 <UART_SetConfig+0x118>)
 800393e:	fba2 2303 	umull	r2, r3, r2, r3
 8003942:	095b      	lsrs	r3, r3, #5
 8003944:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8003948:	4419      	add	r1, r3
 800394a:	68fa      	ldr	r2, [r7, #12]
 800394c:	4613      	mov	r3, r2
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	4413      	add	r3, r2
 8003952:	009a      	lsls	r2, r3, #2
 8003954:	441a      	add	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	685b      	ldr	r3, [r3, #4]
 800395a:	009b      	lsls	r3, r3, #2
 800395c:	fbb2 f2f3 	udiv	r2, r2, r3
 8003960:	4b0c      	ldr	r3, [pc, #48]	@ (8003994 <UART_SetConfig+0x118>)
 8003962:	fba3 0302 	umull	r0, r3, r3, r2
 8003966:	095b      	lsrs	r3, r3, #5
 8003968:	2064      	movs	r0, #100	@ 0x64
 800396a:	fb00 f303 	mul.w	r3, r0, r3
 800396e:	1ad3      	subs	r3, r2, r3
 8003970:	011b      	lsls	r3, r3, #4
 8003972:	3332      	adds	r3, #50	@ 0x32
 8003974:	4a07      	ldr	r2, [pc, #28]	@ (8003994 <UART_SetConfig+0x118>)
 8003976:	fba2 2303 	umull	r2, r3, r2, r3
 800397a:	095b      	lsrs	r3, r3, #5
 800397c:	f003 020f 	and.w	r2, r3, #15
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	440a      	add	r2, r1
 8003986:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8003988:	bf00      	nop
 800398a:	3710      	adds	r7, #16
 800398c:	46bd      	mov	sp, r7
 800398e:	bd80      	pop	{r7, pc}
 8003990:	40013800 	.word	0x40013800
 8003994:	51eb851f 	.word	0x51eb851f

08003998 <atoi>:
 8003998:	220a      	movs	r2, #10
 800399a:	2100      	movs	r1, #0
 800399c:	f000 b87a 	b.w	8003a94 <strtol>

080039a0 <_strtol_l.constprop.0>:
 80039a0:	2b24      	cmp	r3, #36	@ 0x24
 80039a2:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80039a6:	4686      	mov	lr, r0
 80039a8:	4690      	mov	r8, r2
 80039aa:	d801      	bhi.n	80039b0 <_strtol_l.constprop.0+0x10>
 80039ac:	2b01      	cmp	r3, #1
 80039ae:	d106      	bne.n	80039be <_strtol_l.constprop.0+0x1e>
 80039b0:	f000 fa34 	bl	8003e1c <__errno>
 80039b4:	2316      	movs	r3, #22
 80039b6:	6003      	str	r3, [r0, #0]
 80039b8:	2000      	movs	r0, #0
 80039ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80039be:	460d      	mov	r5, r1
 80039c0:	4833      	ldr	r0, [pc, #204]	@ (8003a90 <_strtol_l.constprop.0+0xf0>)
 80039c2:	462a      	mov	r2, r5
 80039c4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80039c8:	5d06      	ldrb	r6, [r0, r4]
 80039ca:	f016 0608 	ands.w	r6, r6, #8
 80039ce:	d1f8      	bne.n	80039c2 <_strtol_l.constprop.0+0x22>
 80039d0:	2c2d      	cmp	r4, #45	@ 0x2d
 80039d2:	d12d      	bne.n	8003a30 <_strtol_l.constprop.0+0x90>
 80039d4:	2601      	movs	r6, #1
 80039d6:	782c      	ldrb	r4, [r5, #0]
 80039d8:	1c95      	adds	r5, r2, #2
 80039da:	f033 0210 	bics.w	r2, r3, #16
 80039de:	d109      	bne.n	80039f4 <_strtol_l.constprop.0+0x54>
 80039e0:	2c30      	cmp	r4, #48	@ 0x30
 80039e2:	d12a      	bne.n	8003a3a <_strtol_l.constprop.0+0x9a>
 80039e4:	782a      	ldrb	r2, [r5, #0]
 80039e6:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80039ea:	2a58      	cmp	r2, #88	@ 0x58
 80039ec:	d125      	bne.n	8003a3a <_strtol_l.constprop.0+0x9a>
 80039ee:	2310      	movs	r3, #16
 80039f0:	786c      	ldrb	r4, [r5, #1]
 80039f2:	3502      	adds	r5, #2
 80039f4:	2200      	movs	r2, #0
 80039f6:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80039fa:	f10c 3cff 	add.w	ip, ip, #4294967295
 80039fe:	fbbc f9f3 	udiv	r9, ip, r3
 8003a02:	4610      	mov	r0, r2
 8003a04:	fb03 ca19 	mls	sl, r3, r9, ip
 8003a08:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8003a0c:	2f09      	cmp	r7, #9
 8003a0e:	d81b      	bhi.n	8003a48 <_strtol_l.constprop.0+0xa8>
 8003a10:	463c      	mov	r4, r7
 8003a12:	42a3      	cmp	r3, r4
 8003a14:	dd27      	ble.n	8003a66 <_strtol_l.constprop.0+0xc6>
 8003a16:	1c57      	adds	r7, r2, #1
 8003a18:	d007      	beq.n	8003a2a <_strtol_l.constprop.0+0x8a>
 8003a1a:	4581      	cmp	r9, r0
 8003a1c:	d320      	bcc.n	8003a60 <_strtol_l.constprop.0+0xc0>
 8003a1e:	d101      	bne.n	8003a24 <_strtol_l.constprop.0+0x84>
 8003a20:	45a2      	cmp	sl, r4
 8003a22:	db1d      	blt.n	8003a60 <_strtol_l.constprop.0+0xc0>
 8003a24:	2201      	movs	r2, #1
 8003a26:	fb00 4003 	mla	r0, r0, r3, r4
 8003a2a:	f815 4b01 	ldrb.w	r4, [r5], #1
 8003a2e:	e7eb      	b.n	8003a08 <_strtol_l.constprop.0+0x68>
 8003a30:	2c2b      	cmp	r4, #43	@ 0x2b
 8003a32:	bf04      	itt	eq
 8003a34:	782c      	ldrbeq	r4, [r5, #0]
 8003a36:	1c95      	addeq	r5, r2, #2
 8003a38:	e7cf      	b.n	80039da <_strtol_l.constprop.0+0x3a>
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d1da      	bne.n	80039f4 <_strtol_l.constprop.0+0x54>
 8003a3e:	2c30      	cmp	r4, #48	@ 0x30
 8003a40:	bf0c      	ite	eq
 8003a42:	2308      	moveq	r3, #8
 8003a44:	230a      	movne	r3, #10
 8003a46:	e7d5      	b.n	80039f4 <_strtol_l.constprop.0+0x54>
 8003a48:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8003a4c:	2f19      	cmp	r7, #25
 8003a4e:	d801      	bhi.n	8003a54 <_strtol_l.constprop.0+0xb4>
 8003a50:	3c37      	subs	r4, #55	@ 0x37
 8003a52:	e7de      	b.n	8003a12 <_strtol_l.constprop.0+0x72>
 8003a54:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8003a58:	2f19      	cmp	r7, #25
 8003a5a:	d804      	bhi.n	8003a66 <_strtol_l.constprop.0+0xc6>
 8003a5c:	3c57      	subs	r4, #87	@ 0x57
 8003a5e:	e7d8      	b.n	8003a12 <_strtol_l.constprop.0+0x72>
 8003a60:	f04f 32ff 	mov.w	r2, #4294967295
 8003a64:	e7e1      	b.n	8003a2a <_strtol_l.constprop.0+0x8a>
 8003a66:	1c53      	adds	r3, r2, #1
 8003a68:	d108      	bne.n	8003a7c <_strtol_l.constprop.0+0xdc>
 8003a6a:	2322      	movs	r3, #34	@ 0x22
 8003a6c:	4660      	mov	r0, ip
 8003a6e:	f8ce 3000 	str.w	r3, [lr]
 8003a72:	f1b8 0f00 	cmp.w	r8, #0
 8003a76:	d0a0      	beq.n	80039ba <_strtol_l.constprop.0+0x1a>
 8003a78:	1e69      	subs	r1, r5, #1
 8003a7a:	e006      	b.n	8003a8a <_strtol_l.constprop.0+0xea>
 8003a7c:	b106      	cbz	r6, 8003a80 <_strtol_l.constprop.0+0xe0>
 8003a7e:	4240      	negs	r0, r0
 8003a80:	f1b8 0f00 	cmp.w	r8, #0
 8003a84:	d099      	beq.n	80039ba <_strtol_l.constprop.0+0x1a>
 8003a86:	2a00      	cmp	r2, #0
 8003a88:	d1f6      	bne.n	8003a78 <_strtol_l.constprop.0+0xd8>
 8003a8a:	f8c8 1000 	str.w	r1, [r8]
 8003a8e:	e794      	b.n	80039ba <_strtol_l.constprop.0+0x1a>
 8003a90:	08004e7b 	.word	0x08004e7b

08003a94 <strtol>:
 8003a94:	4613      	mov	r3, r2
 8003a96:	460a      	mov	r2, r1
 8003a98:	4601      	mov	r1, r0
 8003a9a:	4802      	ldr	r0, [pc, #8]	@ (8003aa4 <strtol+0x10>)
 8003a9c:	6800      	ldr	r0, [r0, #0]
 8003a9e:	f7ff bf7f 	b.w	80039a0 <_strtol_l.constprop.0>
 8003aa2:	bf00      	nop
 8003aa4:	20000018 	.word	0x20000018

08003aa8 <std>:
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	b510      	push	{r4, lr}
 8003aac:	4604      	mov	r4, r0
 8003aae:	e9c0 3300 	strd	r3, r3, [r0]
 8003ab2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8003ab6:	6083      	str	r3, [r0, #8]
 8003ab8:	8181      	strh	r1, [r0, #12]
 8003aba:	6643      	str	r3, [r0, #100]	@ 0x64
 8003abc:	81c2      	strh	r2, [r0, #14]
 8003abe:	6183      	str	r3, [r0, #24]
 8003ac0:	4619      	mov	r1, r3
 8003ac2:	2208      	movs	r2, #8
 8003ac4:	305c      	adds	r0, #92	@ 0x5c
 8003ac6:	f000 f926 	bl	8003d16 <memset>
 8003aca:	4b0d      	ldr	r3, [pc, #52]	@ (8003b00 <std+0x58>)
 8003acc:	6224      	str	r4, [r4, #32]
 8003ace:	6263      	str	r3, [r4, #36]	@ 0x24
 8003ad0:	4b0c      	ldr	r3, [pc, #48]	@ (8003b04 <std+0x5c>)
 8003ad2:	62a3      	str	r3, [r4, #40]	@ 0x28
 8003ad4:	4b0c      	ldr	r3, [pc, #48]	@ (8003b08 <std+0x60>)
 8003ad6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8003ad8:	4b0c      	ldr	r3, [pc, #48]	@ (8003b0c <std+0x64>)
 8003ada:	6323      	str	r3, [r4, #48]	@ 0x30
 8003adc:	4b0c      	ldr	r3, [pc, #48]	@ (8003b10 <std+0x68>)
 8003ade:	429c      	cmp	r4, r3
 8003ae0:	d006      	beq.n	8003af0 <std+0x48>
 8003ae2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8003ae6:	4294      	cmp	r4, r2
 8003ae8:	d002      	beq.n	8003af0 <std+0x48>
 8003aea:	33d0      	adds	r3, #208	@ 0xd0
 8003aec:	429c      	cmp	r4, r3
 8003aee:	d105      	bne.n	8003afc <std+0x54>
 8003af0:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8003af4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003af8:	f000 b9ba 	b.w	8003e70 <__retarget_lock_init_recursive>
 8003afc:	bd10      	pop	{r4, pc}
 8003afe:	bf00      	nop
 8003b00:	08003c91 	.word	0x08003c91
 8003b04:	08003cb3 	.word	0x08003cb3
 8003b08:	08003ceb 	.word	0x08003ceb
 8003b0c:	08003d0f 	.word	0x08003d0f
 8003b10:	200001b0 	.word	0x200001b0

08003b14 <stdio_exit_handler>:
 8003b14:	4a02      	ldr	r2, [pc, #8]	@ (8003b20 <stdio_exit_handler+0xc>)
 8003b16:	4903      	ldr	r1, [pc, #12]	@ (8003b24 <stdio_exit_handler+0x10>)
 8003b18:	4803      	ldr	r0, [pc, #12]	@ (8003b28 <stdio_exit_handler+0x14>)
 8003b1a:	f000 b869 	b.w	8003bf0 <_fwalk_sglue>
 8003b1e:	bf00      	nop
 8003b20:	2000000c 	.word	0x2000000c
 8003b24:	080049b9 	.word	0x080049b9
 8003b28:	2000001c 	.word	0x2000001c

08003b2c <cleanup_stdio>:
 8003b2c:	6841      	ldr	r1, [r0, #4]
 8003b2e:	4b0c      	ldr	r3, [pc, #48]	@ (8003b60 <cleanup_stdio+0x34>)
 8003b30:	b510      	push	{r4, lr}
 8003b32:	4299      	cmp	r1, r3
 8003b34:	4604      	mov	r4, r0
 8003b36:	d001      	beq.n	8003b3c <cleanup_stdio+0x10>
 8003b38:	f000 ff3e 	bl	80049b8 <_fflush_r>
 8003b3c:	68a1      	ldr	r1, [r4, #8]
 8003b3e:	4b09      	ldr	r3, [pc, #36]	@ (8003b64 <cleanup_stdio+0x38>)
 8003b40:	4299      	cmp	r1, r3
 8003b42:	d002      	beq.n	8003b4a <cleanup_stdio+0x1e>
 8003b44:	4620      	mov	r0, r4
 8003b46:	f000 ff37 	bl	80049b8 <_fflush_r>
 8003b4a:	68e1      	ldr	r1, [r4, #12]
 8003b4c:	4b06      	ldr	r3, [pc, #24]	@ (8003b68 <cleanup_stdio+0x3c>)
 8003b4e:	4299      	cmp	r1, r3
 8003b50:	d004      	beq.n	8003b5c <cleanup_stdio+0x30>
 8003b52:	4620      	mov	r0, r4
 8003b54:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b58:	f000 bf2e 	b.w	80049b8 <_fflush_r>
 8003b5c:	bd10      	pop	{r4, pc}
 8003b5e:	bf00      	nop
 8003b60:	200001b0 	.word	0x200001b0
 8003b64:	20000218 	.word	0x20000218
 8003b68:	20000280 	.word	0x20000280

08003b6c <global_stdio_init.part.0>:
 8003b6c:	b510      	push	{r4, lr}
 8003b6e:	4b0b      	ldr	r3, [pc, #44]	@ (8003b9c <global_stdio_init.part.0+0x30>)
 8003b70:	4c0b      	ldr	r4, [pc, #44]	@ (8003ba0 <global_stdio_init.part.0+0x34>)
 8003b72:	4a0c      	ldr	r2, [pc, #48]	@ (8003ba4 <global_stdio_init.part.0+0x38>)
 8003b74:	4620      	mov	r0, r4
 8003b76:	601a      	str	r2, [r3, #0]
 8003b78:	2104      	movs	r1, #4
 8003b7a:	2200      	movs	r2, #0
 8003b7c:	f7ff ff94 	bl	8003aa8 <std>
 8003b80:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8003b84:	2201      	movs	r2, #1
 8003b86:	2109      	movs	r1, #9
 8003b88:	f7ff ff8e 	bl	8003aa8 <std>
 8003b8c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8003b90:	2202      	movs	r2, #2
 8003b92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003b96:	2112      	movs	r1, #18
 8003b98:	f7ff bf86 	b.w	8003aa8 <std>
 8003b9c:	200002e8 	.word	0x200002e8
 8003ba0:	200001b0 	.word	0x200001b0
 8003ba4:	08003b15 	.word	0x08003b15

08003ba8 <__sfp_lock_acquire>:
 8003ba8:	4801      	ldr	r0, [pc, #4]	@ (8003bb0 <__sfp_lock_acquire+0x8>)
 8003baa:	f000 b962 	b.w	8003e72 <__retarget_lock_acquire_recursive>
 8003bae:	bf00      	nop
 8003bb0:	200002f1 	.word	0x200002f1

08003bb4 <__sfp_lock_release>:
 8003bb4:	4801      	ldr	r0, [pc, #4]	@ (8003bbc <__sfp_lock_release+0x8>)
 8003bb6:	f000 b95d 	b.w	8003e74 <__retarget_lock_release_recursive>
 8003bba:	bf00      	nop
 8003bbc:	200002f1 	.word	0x200002f1

08003bc0 <__sinit>:
 8003bc0:	b510      	push	{r4, lr}
 8003bc2:	4604      	mov	r4, r0
 8003bc4:	f7ff fff0 	bl	8003ba8 <__sfp_lock_acquire>
 8003bc8:	6a23      	ldr	r3, [r4, #32]
 8003bca:	b11b      	cbz	r3, 8003bd4 <__sinit+0x14>
 8003bcc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8003bd0:	f7ff bff0 	b.w	8003bb4 <__sfp_lock_release>
 8003bd4:	4b04      	ldr	r3, [pc, #16]	@ (8003be8 <__sinit+0x28>)
 8003bd6:	6223      	str	r3, [r4, #32]
 8003bd8:	4b04      	ldr	r3, [pc, #16]	@ (8003bec <__sinit+0x2c>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	2b00      	cmp	r3, #0
 8003bde:	d1f5      	bne.n	8003bcc <__sinit+0xc>
 8003be0:	f7ff ffc4 	bl	8003b6c <global_stdio_init.part.0>
 8003be4:	e7f2      	b.n	8003bcc <__sinit+0xc>
 8003be6:	bf00      	nop
 8003be8:	08003b2d 	.word	0x08003b2d
 8003bec:	200002e8 	.word	0x200002e8

08003bf0 <_fwalk_sglue>:
 8003bf0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003bf4:	4607      	mov	r7, r0
 8003bf6:	4688      	mov	r8, r1
 8003bf8:	4614      	mov	r4, r2
 8003bfa:	2600      	movs	r6, #0
 8003bfc:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8003c00:	f1b9 0901 	subs.w	r9, r9, #1
 8003c04:	d505      	bpl.n	8003c12 <_fwalk_sglue+0x22>
 8003c06:	6824      	ldr	r4, [r4, #0]
 8003c08:	2c00      	cmp	r4, #0
 8003c0a:	d1f7      	bne.n	8003bfc <_fwalk_sglue+0xc>
 8003c0c:	4630      	mov	r0, r6
 8003c0e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c12:	89ab      	ldrh	r3, [r5, #12]
 8003c14:	2b01      	cmp	r3, #1
 8003c16:	d907      	bls.n	8003c28 <_fwalk_sglue+0x38>
 8003c18:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8003c1c:	3301      	adds	r3, #1
 8003c1e:	d003      	beq.n	8003c28 <_fwalk_sglue+0x38>
 8003c20:	4629      	mov	r1, r5
 8003c22:	4638      	mov	r0, r7
 8003c24:	47c0      	blx	r8
 8003c26:	4306      	orrs	r6, r0
 8003c28:	3568      	adds	r5, #104	@ 0x68
 8003c2a:	e7e9      	b.n	8003c00 <_fwalk_sglue+0x10>

08003c2c <iprintf>:
 8003c2c:	b40f      	push	{r0, r1, r2, r3}
 8003c2e:	b507      	push	{r0, r1, r2, lr}
 8003c30:	4906      	ldr	r1, [pc, #24]	@ (8003c4c <iprintf+0x20>)
 8003c32:	ab04      	add	r3, sp, #16
 8003c34:	6808      	ldr	r0, [r1, #0]
 8003c36:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c3a:	6881      	ldr	r1, [r0, #8]
 8003c3c:	9301      	str	r3, [sp, #4]
 8003c3e:	f000 fb91 	bl	8004364 <_vfiprintf_r>
 8003c42:	b003      	add	sp, #12
 8003c44:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c48:	b004      	add	sp, #16
 8003c4a:	4770      	bx	lr
 8003c4c:	20000018 	.word	0x20000018

08003c50 <siprintf>:
 8003c50:	b40e      	push	{r1, r2, r3}
 8003c52:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8003c56:	b500      	push	{lr}
 8003c58:	b09c      	sub	sp, #112	@ 0x70
 8003c5a:	ab1d      	add	r3, sp, #116	@ 0x74
 8003c5c:	9002      	str	r0, [sp, #8]
 8003c5e:	9006      	str	r0, [sp, #24]
 8003c60:	9107      	str	r1, [sp, #28]
 8003c62:	9104      	str	r1, [sp, #16]
 8003c64:	4808      	ldr	r0, [pc, #32]	@ (8003c88 <siprintf+0x38>)
 8003c66:	4909      	ldr	r1, [pc, #36]	@ (8003c8c <siprintf+0x3c>)
 8003c68:	f853 2b04 	ldr.w	r2, [r3], #4
 8003c6c:	9105      	str	r1, [sp, #20]
 8003c6e:	6800      	ldr	r0, [r0, #0]
 8003c70:	a902      	add	r1, sp, #8
 8003c72:	9301      	str	r3, [sp, #4]
 8003c74:	f000 fa52 	bl	800411c <_svfiprintf_r>
 8003c78:	2200      	movs	r2, #0
 8003c7a:	9b02      	ldr	r3, [sp, #8]
 8003c7c:	701a      	strb	r2, [r3, #0]
 8003c7e:	b01c      	add	sp, #112	@ 0x70
 8003c80:	f85d eb04 	ldr.w	lr, [sp], #4
 8003c84:	b003      	add	sp, #12
 8003c86:	4770      	bx	lr
 8003c88:	20000018 	.word	0x20000018
 8003c8c:	ffff0208 	.word	0xffff0208

08003c90 <__sread>:
 8003c90:	b510      	push	{r4, lr}
 8003c92:	460c      	mov	r4, r1
 8003c94:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003c98:	f000 f89c 	bl	8003dd4 <_read_r>
 8003c9c:	2800      	cmp	r0, #0
 8003c9e:	bfab      	itete	ge
 8003ca0:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8003ca2:	89a3      	ldrhlt	r3, [r4, #12]
 8003ca4:	181b      	addge	r3, r3, r0
 8003ca6:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8003caa:	bfac      	ite	ge
 8003cac:	6563      	strge	r3, [r4, #84]	@ 0x54
 8003cae:	81a3      	strhlt	r3, [r4, #12]
 8003cb0:	bd10      	pop	{r4, pc}

08003cb2 <__swrite>:
 8003cb2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8003cb6:	461f      	mov	r7, r3
 8003cb8:	898b      	ldrh	r3, [r1, #12]
 8003cba:	4605      	mov	r5, r0
 8003cbc:	05db      	lsls	r3, r3, #23
 8003cbe:	460c      	mov	r4, r1
 8003cc0:	4616      	mov	r6, r2
 8003cc2:	d505      	bpl.n	8003cd0 <__swrite+0x1e>
 8003cc4:	2302      	movs	r3, #2
 8003cc6:	2200      	movs	r2, #0
 8003cc8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003ccc:	f000 f870 	bl	8003db0 <_lseek_r>
 8003cd0:	89a3      	ldrh	r3, [r4, #12]
 8003cd2:	4632      	mov	r2, r6
 8003cd4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003cd8:	81a3      	strh	r3, [r4, #12]
 8003cda:	4628      	mov	r0, r5
 8003cdc:	463b      	mov	r3, r7
 8003cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003ce2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8003ce6:	f000 b887 	b.w	8003df8 <_write_r>

08003cea <__sseek>:
 8003cea:	b510      	push	{r4, lr}
 8003cec:	460c      	mov	r4, r1
 8003cee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003cf2:	f000 f85d 	bl	8003db0 <_lseek_r>
 8003cf6:	1c43      	adds	r3, r0, #1
 8003cf8:	89a3      	ldrh	r3, [r4, #12]
 8003cfa:	bf15      	itete	ne
 8003cfc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8003cfe:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8003d02:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8003d06:	81a3      	strheq	r3, [r4, #12]
 8003d08:	bf18      	it	ne
 8003d0a:	81a3      	strhne	r3, [r4, #12]
 8003d0c:	bd10      	pop	{r4, pc}

08003d0e <__sclose>:
 8003d0e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003d12:	f000 b83d 	b.w	8003d90 <_close_r>

08003d16 <memset>:
 8003d16:	4603      	mov	r3, r0
 8003d18:	4402      	add	r2, r0
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d100      	bne.n	8003d20 <memset+0xa>
 8003d1e:	4770      	bx	lr
 8003d20:	f803 1b01 	strb.w	r1, [r3], #1
 8003d24:	e7f9      	b.n	8003d1a <memset+0x4>

08003d26 <strchr>:
 8003d26:	4603      	mov	r3, r0
 8003d28:	b2c9      	uxtb	r1, r1
 8003d2a:	4618      	mov	r0, r3
 8003d2c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003d30:	b112      	cbz	r2, 8003d38 <strchr+0x12>
 8003d32:	428a      	cmp	r2, r1
 8003d34:	d1f9      	bne.n	8003d2a <strchr+0x4>
 8003d36:	4770      	bx	lr
 8003d38:	2900      	cmp	r1, #0
 8003d3a:	bf18      	it	ne
 8003d3c:	2000      	movne	r0, #0
 8003d3e:	4770      	bx	lr

08003d40 <strncmp>:
 8003d40:	b510      	push	{r4, lr}
 8003d42:	b16a      	cbz	r2, 8003d60 <strncmp+0x20>
 8003d44:	3901      	subs	r1, #1
 8003d46:	1884      	adds	r4, r0, r2
 8003d48:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003d4c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 8003d50:	429a      	cmp	r2, r3
 8003d52:	d103      	bne.n	8003d5c <strncmp+0x1c>
 8003d54:	42a0      	cmp	r0, r4
 8003d56:	d001      	beq.n	8003d5c <strncmp+0x1c>
 8003d58:	2a00      	cmp	r2, #0
 8003d5a:	d1f5      	bne.n	8003d48 <strncmp+0x8>
 8003d5c:	1ad0      	subs	r0, r2, r3
 8003d5e:	bd10      	pop	{r4, pc}
 8003d60:	4610      	mov	r0, r2
 8003d62:	e7fc      	b.n	8003d5e <strncmp+0x1e>

08003d64 <strstr>:
 8003d64:	780a      	ldrb	r2, [r1, #0]
 8003d66:	b570      	push	{r4, r5, r6, lr}
 8003d68:	b96a      	cbnz	r2, 8003d86 <strstr+0x22>
 8003d6a:	bd70      	pop	{r4, r5, r6, pc}
 8003d6c:	429a      	cmp	r2, r3
 8003d6e:	d109      	bne.n	8003d84 <strstr+0x20>
 8003d70:	460c      	mov	r4, r1
 8003d72:	4605      	mov	r5, r0
 8003d74:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d0f6      	beq.n	8003d6a <strstr+0x6>
 8003d7c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8003d80:	429e      	cmp	r6, r3
 8003d82:	d0f7      	beq.n	8003d74 <strstr+0x10>
 8003d84:	3001      	adds	r0, #1
 8003d86:	7803      	ldrb	r3, [r0, #0]
 8003d88:	2b00      	cmp	r3, #0
 8003d8a:	d1ef      	bne.n	8003d6c <strstr+0x8>
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	e7ec      	b.n	8003d6a <strstr+0x6>

08003d90 <_close_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	2300      	movs	r3, #0
 8003d94:	4d05      	ldr	r5, [pc, #20]	@ (8003dac <_close_r+0x1c>)
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fc fd46 	bl	800082c <_close>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_close_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_close_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	200002ec 	.word	0x200002ec

08003db0 <_lseek_r>:
 8003db0:	b538      	push	{r3, r4, r5, lr}
 8003db2:	4604      	mov	r4, r0
 8003db4:	4608      	mov	r0, r1
 8003db6:	4611      	mov	r1, r2
 8003db8:	2200      	movs	r2, #0
 8003dba:	4d05      	ldr	r5, [pc, #20]	@ (8003dd0 <_lseek_r+0x20>)
 8003dbc:	602a      	str	r2, [r5, #0]
 8003dbe:	461a      	mov	r2, r3
 8003dc0:	f7fc fd58 	bl	8000874 <_lseek>
 8003dc4:	1c43      	adds	r3, r0, #1
 8003dc6:	d102      	bne.n	8003dce <_lseek_r+0x1e>
 8003dc8:	682b      	ldr	r3, [r5, #0]
 8003dca:	b103      	cbz	r3, 8003dce <_lseek_r+0x1e>
 8003dcc:	6023      	str	r3, [r4, #0]
 8003dce:	bd38      	pop	{r3, r4, r5, pc}
 8003dd0:	200002ec 	.word	0x200002ec

08003dd4 <_read_r>:
 8003dd4:	b538      	push	{r3, r4, r5, lr}
 8003dd6:	4604      	mov	r4, r0
 8003dd8:	4608      	mov	r0, r1
 8003dda:	4611      	mov	r1, r2
 8003ddc:	2200      	movs	r2, #0
 8003dde:	4d05      	ldr	r5, [pc, #20]	@ (8003df4 <_read_r+0x20>)
 8003de0:	602a      	str	r2, [r5, #0]
 8003de2:	461a      	mov	r2, r3
 8003de4:	f7fc fbbc 	bl	8000560 <_read>
 8003de8:	1c43      	adds	r3, r0, #1
 8003dea:	d102      	bne.n	8003df2 <_read_r+0x1e>
 8003dec:	682b      	ldr	r3, [r5, #0]
 8003dee:	b103      	cbz	r3, 8003df2 <_read_r+0x1e>
 8003df0:	6023      	str	r3, [r4, #0]
 8003df2:	bd38      	pop	{r3, r4, r5, pc}
 8003df4:	200002ec 	.word	0x200002ec

08003df8 <_write_r>:
 8003df8:	b538      	push	{r3, r4, r5, lr}
 8003dfa:	4604      	mov	r4, r0
 8003dfc:	4608      	mov	r0, r1
 8003dfe:	4611      	mov	r1, r2
 8003e00:	2200      	movs	r2, #0
 8003e02:	4d05      	ldr	r5, [pc, #20]	@ (8003e18 <_write_r+0x20>)
 8003e04:	602a      	str	r2, [r5, #0]
 8003e06:	461a      	mov	r2, r3
 8003e08:	f7fc fbc4 	bl	8000594 <_write>
 8003e0c:	1c43      	adds	r3, r0, #1
 8003e0e:	d102      	bne.n	8003e16 <_write_r+0x1e>
 8003e10:	682b      	ldr	r3, [r5, #0]
 8003e12:	b103      	cbz	r3, 8003e16 <_write_r+0x1e>
 8003e14:	6023      	str	r3, [r4, #0]
 8003e16:	bd38      	pop	{r3, r4, r5, pc}
 8003e18:	200002ec 	.word	0x200002ec

08003e1c <__errno>:
 8003e1c:	4b01      	ldr	r3, [pc, #4]	@ (8003e24 <__errno+0x8>)
 8003e1e:	6818      	ldr	r0, [r3, #0]
 8003e20:	4770      	bx	lr
 8003e22:	bf00      	nop
 8003e24:	20000018 	.word	0x20000018

08003e28 <__libc_init_array>:
 8003e28:	b570      	push	{r4, r5, r6, lr}
 8003e2a:	2600      	movs	r6, #0
 8003e2c:	4d0c      	ldr	r5, [pc, #48]	@ (8003e60 <__libc_init_array+0x38>)
 8003e2e:	4c0d      	ldr	r4, [pc, #52]	@ (8003e64 <__libc_init_array+0x3c>)
 8003e30:	1b64      	subs	r4, r4, r5
 8003e32:	10a4      	asrs	r4, r4, #2
 8003e34:	42a6      	cmp	r6, r4
 8003e36:	d109      	bne.n	8003e4c <__libc_init_array+0x24>
 8003e38:	f000 ff7a 	bl	8004d30 <_init>
 8003e3c:	2600      	movs	r6, #0
 8003e3e:	4d0a      	ldr	r5, [pc, #40]	@ (8003e68 <__libc_init_array+0x40>)
 8003e40:	4c0a      	ldr	r4, [pc, #40]	@ (8003e6c <__libc_init_array+0x44>)
 8003e42:	1b64      	subs	r4, r4, r5
 8003e44:	10a4      	asrs	r4, r4, #2
 8003e46:	42a6      	cmp	r6, r4
 8003e48:	d105      	bne.n	8003e56 <__libc_init_array+0x2e>
 8003e4a:	bd70      	pop	{r4, r5, r6, pc}
 8003e4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e50:	4798      	blx	r3
 8003e52:	3601      	adds	r6, #1
 8003e54:	e7ee      	b.n	8003e34 <__libc_init_array+0xc>
 8003e56:	f855 3b04 	ldr.w	r3, [r5], #4
 8003e5a:	4798      	blx	r3
 8003e5c:	3601      	adds	r6, #1
 8003e5e:	e7f2      	b.n	8003e46 <__libc_init_array+0x1e>
 8003e60:	08004fb8 	.word	0x08004fb8
 8003e64:	08004fb8 	.word	0x08004fb8
 8003e68:	08004fb8 	.word	0x08004fb8
 8003e6c:	08004fbc 	.word	0x08004fbc

08003e70 <__retarget_lock_init_recursive>:
 8003e70:	4770      	bx	lr

08003e72 <__retarget_lock_acquire_recursive>:
 8003e72:	4770      	bx	lr

08003e74 <__retarget_lock_release_recursive>:
 8003e74:	4770      	bx	lr
	...

08003e78 <_free_r>:
 8003e78:	b538      	push	{r3, r4, r5, lr}
 8003e7a:	4605      	mov	r5, r0
 8003e7c:	2900      	cmp	r1, #0
 8003e7e:	d040      	beq.n	8003f02 <_free_r+0x8a>
 8003e80:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e84:	1f0c      	subs	r4, r1, #4
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	bfb8      	it	lt
 8003e8a:	18e4      	addlt	r4, r4, r3
 8003e8c:	f000 f8de 	bl	800404c <__malloc_lock>
 8003e90:	4a1c      	ldr	r2, [pc, #112]	@ (8003f04 <_free_r+0x8c>)
 8003e92:	6813      	ldr	r3, [r2, #0]
 8003e94:	b933      	cbnz	r3, 8003ea4 <_free_r+0x2c>
 8003e96:	6063      	str	r3, [r4, #4]
 8003e98:	6014      	str	r4, [r2, #0]
 8003e9a:	4628      	mov	r0, r5
 8003e9c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003ea0:	f000 b8da 	b.w	8004058 <__malloc_unlock>
 8003ea4:	42a3      	cmp	r3, r4
 8003ea6:	d908      	bls.n	8003eba <_free_r+0x42>
 8003ea8:	6820      	ldr	r0, [r4, #0]
 8003eaa:	1821      	adds	r1, r4, r0
 8003eac:	428b      	cmp	r3, r1
 8003eae:	bf01      	itttt	eq
 8003eb0:	6819      	ldreq	r1, [r3, #0]
 8003eb2:	685b      	ldreq	r3, [r3, #4]
 8003eb4:	1809      	addeq	r1, r1, r0
 8003eb6:	6021      	streq	r1, [r4, #0]
 8003eb8:	e7ed      	b.n	8003e96 <_free_r+0x1e>
 8003eba:	461a      	mov	r2, r3
 8003ebc:	685b      	ldr	r3, [r3, #4]
 8003ebe:	b10b      	cbz	r3, 8003ec4 <_free_r+0x4c>
 8003ec0:	42a3      	cmp	r3, r4
 8003ec2:	d9fa      	bls.n	8003eba <_free_r+0x42>
 8003ec4:	6811      	ldr	r1, [r2, #0]
 8003ec6:	1850      	adds	r0, r2, r1
 8003ec8:	42a0      	cmp	r0, r4
 8003eca:	d10b      	bne.n	8003ee4 <_free_r+0x6c>
 8003ecc:	6820      	ldr	r0, [r4, #0]
 8003ece:	4401      	add	r1, r0
 8003ed0:	1850      	adds	r0, r2, r1
 8003ed2:	4283      	cmp	r3, r0
 8003ed4:	6011      	str	r1, [r2, #0]
 8003ed6:	d1e0      	bne.n	8003e9a <_free_r+0x22>
 8003ed8:	6818      	ldr	r0, [r3, #0]
 8003eda:	685b      	ldr	r3, [r3, #4]
 8003edc:	4408      	add	r0, r1
 8003ede:	6010      	str	r0, [r2, #0]
 8003ee0:	6053      	str	r3, [r2, #4]
 8003ee2:	e7da      	b.n	8003e9a <_free_r+0x22>
 8003ee4:	d902      	bls.n	8003eec <_free_r+0x74>
 8003ee6:	230c      	movs	r3, #12
 8003ee8:	602b      	str	r3, [r5, #0]
 8003eea:	e7d6      	b.n	8003e9a <_free_r+0x22>
 8003eec:	6820      	ldr	r0, [r4, #0]
 8003eee:	1821      	adds	r1, r4, r0
 8003ef0:	428b      	cmp	r3, r1
 8003ef2:	bf01      	itttt	eq
 8003ef4:	6819      	ldreq	r1, [r3, #0]
 8003ef6:	685b      	ldreq	r3, [r3, #4]
 8003ef8:	1809      	addeq	r1, r1, r0
 8003efa:	6021      	streq	r1, [r4, #0]
 8003efc:	6063      	str	r3, [r4, #4]
 8003efe:	6054      	str	r4, [r2, #4]
 8003f00:	e7cb      	b.n	8003e9a <_free_r+0x22>
 8003f02:	bd38      	pop	{r3, r4, r5, pc}
 8003f04:	200002f8 	.word	0x200002f8

08003f08 <sbrk_aligned>:
 8003f08:	b570      	push	{r4, r5, r6, lr}
 8003f0a:	4e0f      	ldr	r6, [pc, #60]	@ (8003f48 <sbrk_aligned+0x40>)
 8003f0c:	460c      	mov	r4, r1
 8003f0e:	6831      	ldr	r1, [r6, #0]
 8003f10:	4605      	mov	r5, r0
 8003f12:	b911      	cbnz	r1, 8003f1a <sbrk_aligned+0x12>
 8003f14:	f000 fe26 	bl	8004b64 <_sbrk_r>
 8003f18:	6030      	str	r0, [r6, #0]
 8003f1a:	4621      	mov	r1, r4
 8003f1c:	4628      	mov	r0, r5
 8003f1e:	f000 fe21 	bl	8004b64 <_sbrk_r>
 8003f22:	1c43      	adds	r3, r0, #1
 8003f24:	d103      	bne.n	8003f2e <sbrk_aligned+0x26>
 8003f26:	f04f 34ff 	mov.w	r4, #4294967295
 8003f2a:	4620      	mov	r0, r4
 8003f2c:	bd70      	pop	{r4, r5, r6, pc}
 8003f2e:	1cc4      	adds	r4, r0, #3
 8003f30:	f024 0403 	bic.w	r4, r4, #3
 8003f34:	42a0      	cmp	r0, r4
 8003f36:	d0f8      	beq.n	8003f2a <sbrk_aligned+0x22>
 8003f38:	1a21      	subs	r1, r4, r0
 8003f3a:	4628      	mov	r0, r5
 8003f3c:	f000 fe12 	bl	8004b64 <_sbrk_r>
 8003f40:	3001      	adds	r0, #1
 8003f42:	d1f2      	bne.n	8003f2a <sbrk_aligned+0x22>
 8003f44:	e7ef      	b.n	8003f26 <sbrk_aligned+0x1e>
 8003f46:	bf00      	nop
 8003f48:	200002f4 	.word	0x200002f4

08003f4c <_malloc_r>:
 8003f4c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003f50:	1ccd      	adds	r5, r1, #3
 8003f52:	f025 0503 	bic.w	r5, r5, #3
 8003f56:	3508      	adds	r5, #8
 8003f58:	2d0c      	cmp	r5, #12
 8003f5a:	bf38      	it	cc
 8003f5c:	250c      	movcc	r5, #12
 8003f5e:	2d00      	cmp	r5, #0
 8003f60:	4606      	mov	r6, r0
 8003f62:	db01      	blt.n	8003f68 <_malloc_r+0x1c>
 8003f64:	42a9      	cmp	r1, r5
 8003f66:	d904      	bls.n	8003f72 <_malloc_r+0x26>
 8003f68:	230c      	movs	r3, #12
 8003f6a:	6033      	str	r3, [r6, #0]
 8003f6c:	2000      	movs	r0, #0
 8003f6e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003f72:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004048 <_malloc_r+0xfc>
 8003f76:	f000 f869 	bl	800404c <__malloc_lock>
 8003f7a:	f8d8 3000 	ldr.w	r3, [r8]
 8003f7e:	461c      	mov	r4, r3
 8003f80:	bb44      	cbnz	r4, 8003fd4 <_malloc_r+0x88>
 8003f82:	4629      	mov	r1, r5
 8003f84:	4630      	mov	r0, r6
 8003f86:	f7ff ffbf 	bl	8003f08 <sbrk_aligned>
 8003f8a:	1c43      	adds	r3, r0, #1
 8003f8c:	4604      	mov	r4, r0
 8003f8e:	d158      	bne.n	8004042 <_malloc_r+0xf6>
 8003f90:	f8d8 4000 	ldr.w	r4, [r8]
 8003f94:	4627      	mov	r7, r4
 8003f96:	2f00      	cmp	r7, #0
 8003f98:	d143      	bne.n	8004022 <_malloc_r+0xd6>
 8003f9a:	2c00      	cmp	r4, #0
 8003f9c:	d04b      	beq.n	8004036 <_malloc_r+0xea>
 8003f9e:	6823      	ldr	r3, [r4, #0]
 8003fa0:	4639      	mov	r1, r7
 8003fa2:	4630      	mov	r0, r6
 8003fa4:	eb04 0903 	add.w	r9, r4, r3
 8003fa8:	f000 fddc 	bl	8004b64 <_sbrk_r>
 8003fac:	4581      	cmp	r9, r0
 8003fae:	d142      	bne.n	8004036 <_malloc_r+0xea>
 8003fb0:	6821      	ldr	r1, [r4, #0]
 8003fb2:	4630      	mov	r0, r6
 8003fb4:	1a6d      	subs	r5, r5, r1
 8003fb6:	4629      	mov	r1, r5
 8003fb8:	f7ff ffa6 	bl	8003f08 <sbrk_aligned>
 8003fbc:	3001      	adds	r0, #1
 8003fbe:	d03a      	beq.n	8004036 <_malloc_r+0xea>
 8003fc0:	6823      	ldr	r3, [r4, #0]
 8003fc2:	442b      	add	r3, r5
 8003fc4:	6023      	str	r3, [r4, #0]
 8003fc6:	f8d8 3000 	ldr.w	r3, [r8]
 8003fca:	685a      	ldr	r2, [r3, #4]
 8003fcc:	bb62      	cbnz	r2, 8004028 <_malloc_r+0xdc>
 8003fce:	f8c8 7000 	str.w	r7, [r8]
 8003fd2:	e00f      	b.n	8003ff4 <_malloc_r+0xa8>
 8003fd4:	6822      	ldr	r2, [r4, #0]
 8003fd6:	1b52      	subs	r2, r2, r5
 8003fd8:	d420      	bmi.n	800401c <_malloc_r+0xd0>
 8003fda:	2a0b      	cmp	r2, #11
 8003fdc:	d917      	bls.n	800400e <_malloc_r+0xc2>
 8003fde:	1961      	adds	r1, r4, r5
 8003fe0:	42a3      	cmp	r3, r4
 8003fe2:	6025      	str	r5, [r4, #0]
 8003fe4:	bf18      	it	ne
 8003fe6:	6059      	strne	r1, [r3, #4]
 8003fe8:	6863      	ldr	r3, [r4, #4]
 8003fea:	bf08      	it	eq
 8003fec:	f8c8 1000 	streq.w	r1, [r8]
 8003ff0:	5162      	str	r2, [r4, r5]
 8003ff2:	604b      	str	r3, [r1, #4]
 8003ff4:	4630      	mov	r0, r6
 8003ff6:	f000 f82f 	bl	8004058 <__malloc_unlock>
 8003ffa:	f104 000b 	add.w	r0, r4, #11
 8003ffe:	1d23      	adds	r3, r4, #4
 8004000:	f020 0007 	bic.w	r0, r0, #7
 8004004:	1ac2      	subs	r2, r0, r3
 8004006:	bf1c      	itt	ne
 8004008:	1a1b      	subne	r3, r3, r0
 800400a:	50a3      	strne	r3, [r4, r2]
 800400c:	e7af      	b.n	8003f6e <_malloc_r+0x22>
 800400e:	6862      	ldr	r2, [r4, #4]
 8004010:	42a3      	cmp	r3, r4
 8004012:	bf0c      	ite	eq
 8004014:	f8c8 2000 	streq.w	r2, [r8]
 8004018:	605a      	strne	r2, [r3, #4]
 800401a:	e7eb      	b.n	8003ff4 <_malloc_r+0xa8>
 800401c:	4623      	mov	r3, r4
 800401e:	6864      	ldr	r4, [r4, #4]
 8004020:	e7ae      	b.n	8003f80 <_malloc_r+0x34>
 8004022:	463c      	mov	r4, r7
 8004024:	687f      	ldr	r7, [r7, #4]
 8004026:	e7b6      	b.n	8003f96 <_malloc_r+0x4a>
 8004028:	461a      	mov	r2, r3
 800402a:	685b      	ldr	r3, [r3, #4]
 800402c:	42a3      	cmp	r3, r4
 800402e:	d1fb      	bne.n	8004028 <_malloc_r+0xdc>
 8004030:	2300      	movs	r3, #0
 8004032:	6053      	str	r3, [r2, #4]
 8004034:	e7de      	b.n	8003ff4 <_malloc_r+0xa8>
 8004036:	230c      	movs	r3, #12
 8004038:	4630      	mov	r0, r6
 800403a:	6033      	str	r3, [r6, #0]
 800403c:	f000 f80c 	bl	8004058 <__malloc_unlock>
 8004040:	e794      	b.n	8003f6c <_malloc_r+0x20>
 8004042:	6005      	str	r5, [r0, #0]
 8004044:	e7d6      	b.n	8003ff4 <_malloc_r+0xa8>
 8004046:	bf00      	nop
 8004048:	200002f8 	.word	0x200002f8

0800404c <__malloc_lock>:
 800404c:	4801      	ldr	r0, [pc, #4]	@ (8004054 <__malloc_lock+0x8>)
 800404e:	f7ff bf10 	b.w	8003e72 <__retarget_lock_acquire_recursive>
 8004052:	bf00      	nop
 8004054:	200002f0 	.word	0x200002f0

08004058 <__malloc_unlock>:
 8004058:	4801      	ldr	r0, [pc, #4]	@ (8004060 <__malloc_unlock+0x8>)
 800405a:	f7ff bf0b 	b.w	8003e74 <__retarget_lock_release_recursive>
 800405e:	bf00      	nop
 8004060:	200002f0 	.word	0x200002f0

08004064 <__ssputs_r>:
 8004064:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004068:	461f      	mov	r7, r3
 800406a:	688e      	ldr	r6, [r1, #8]
 800406c:	4682      	mov	sl, r0
 800406e:	42be      	cmp	r6, r7
 8004070:	460c      	mov	r4, r1
 8004072:	4690      	mov	r8, r2
 8004074:	680b      	ldr	r3, [r1, #0]
 8004076:	d82d      	bhi.n	80040d4 <__ssputs_r+0x70>
 8004078:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800407c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8004080:	d026      	beq.n	80040d0 <__ssputs_r+0x6c>
 8004082:	6965      	ldr	r5, [r4, #20]
 8004084:	6909      	ldr	r1, [r1, #16]
 8004086:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800408a:	eba3 0901 	sub.w	r9, r3, r1
 800408e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8004092:	1c7b      	adds	r3, r7, #1
 8004094:	444b      	add	r3, r9
 8004096:	106d      	asrs	r5, r5, #1
 8004098:	429d      	cmp	r5, r3
 800409a:	bf38      	it	cc
 800409c:	461d      	movcc	r5, r3
 800409e:	0553      	lsls	r3, r2, #21
 80040a0:	d527      	bpl.n	80040f2 <__ssputs_r+0x8e>
 80040a2:	4629      	mov	r1, r5
 80040a4:	f7ff ff52 	bl	8003f4c <_malloc_r>
 80040a8:	4606      	mov	r6, r0
 80040aa:	b360      	cbz	r0, 8004106 <__ssputs_r+0xa2>
 80040ac:	464a      	mov	r2, r9
 80040ae:	6921      	ldr	r1, [r4, #16]
 80040b0:	f000 fd76 	bl	8004ba0 <memcpy>
 80040b4:	89a3      	ldrh	r3, [r4, #12]
 80040b6:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 80040ba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80040be:	81a3      	strh	r3, [r4, #12]
 80040c0:	6126      	str	r6, [r4, #16]
 80040c2:	444e      	add	r6, r9
 80040c4:	6026      	str	r6, [r4, #0]
 80040c6:	463e      	mov	r6, r7
 80040c8:	6165      	str	r5, [r4, #20]
 80040ca:	eba5 0509 	sub.w	r5, r5, r9
 80040ce:	60a5      	str	r5, [r4, #8]
 80040d0:	42be      	cmp	r6, r7
 80040d2:	d900      	bls.n	80040d6 <__ssputs_r+0x72>
 80040d4:	463e      	mov	r6, r7
 80040d6:	4632      	mov	r2, r6
 80040d8:	4641      	mov	r1, r8
 80040da:	6820      	ldr	r0, [r4, #0]
 80040dc:	f000 fd28 	bl	8004b30 <memmove>
 80040e0:	2000      	movs	r0, #0
 80040e2:	68a3      	ldr	r3, [r4, #8]
 80040e4:	1b9b      	subs	r3, r3, r6
 80040e6:	60a3      	str	r3, [r4, #8]
 80040e8:	6823      	ldr	r3, [r4, #0]
 80040ea:	4433      	add	r3, r6
 80040ec:	6023      	str	r3, [r4, #0]
 80040ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80040f2:	462a      	mov	r2, r5
 80040f4:	f000 fd62 	bl	8004bbc <_realloc_r>
 80040f8:	4606      	mov	r6, r0
 80040fa:	2800      	cmp	r0, #0
 80040fc:	d1e0      	bne.n	80040c0 <__ssputs_r+0x5c>
 80040fe:	4650      	mov	r0, sl
 8004100:	6921      	ldr	r1, [r4, #16]
 8004102:	f7ff feb9 	bl	8003e78 <_free_r>
 8004106:	230c      	movs	r3, #12
 8004108:	f8ca 3000 	str.w	r3, [sl]
 800410c:	89a3      	ldrh	r3, [r4, #12]
 800410e:	f04f 30ff 	mov.w	r0, #4294967295
 8004112:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004116:	81a3      	strh	r3, [r4, #12]
 8004118:	e7e9      	b.n	80040ee <__ssputs_r+0x8a>
	...

0800411c <_svfiprintf_r>:
 800411c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004120:	4698      	mov	r8, r3
 8004122:	898b      	ldrh	r3, [r1, #12]
 8004124:	4607      	mov	r7, r0
 8004126:	061b      	lsls	r3, r3, #24
 8004128:	460d      	mov	r5, r1
 800412a:	4614      	mov	r4, r2
 800412c:	b09d      	sub	sp, #116	@ 0x74
 800412e:	d510      	bpl.n	8004152 <_svfiprintf_r+0x36>
 8004130:	690b      	ldr	r3, [r1, #16]
 8004132:	b973      	cbnz	r3, 8004152 <_svfiprintf_r+0x36>
 8004134:	2140      	movs	r1, #64	@ 0x40
 8004136:	f7ff ff09 	bl	8003f4c <_malloc_r>
 800413a:	6028      	str	r0, [r5, #0]
 800413c:	6128      	str	r0, [r5, #16]
 800413e:	b930      	cbnz	r0, 800414e <_svfiprintf_r+0x32>
 8004140:	230c      	movs	r3, #12
 8004142:	603b      	str	r3, [r7, #0]
 8004144:	f04f 30ff 	mov.w	r0, #4294967295
 8004148:	b01d      	add	sp, #116	@ 0x74
 800414a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800414e:	2340      	movs	r3, #64	@ 0x40
 8004150:	616b      	str	r3, [r5, #20]
 8004152:	2300      	movs	r3, #0
 8004154:	9309      	str	r3, [sp, #36]	@ 0x24
 8004156:	2320      	movs	r3, #32
 8004158:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800415c:	2330      	movs	r3, #48	@ 0x30
 800415e:	f04f 0901 	mov.w	r9, #1
 8004162:	f8cd 800c 	str.w	r8, [sp, #12]
 8004166:	f8df 8198 	ldr.w	r8, [pc, #408]	@ 8004300 <_svfiprintf_r+0x1e4>
 800416a:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800416e:	4623      	mov	r3, r4
 8004170:	469a      	mov	sl, r3
 8004172:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004176:	b10a      	cbz	r2, 800417c <_svfiprintf_r+0x60>
 8004178:	2a25      	cmp	r2, #37	@ 0x25
 800417a:	d1f9      	bne.n	8004170 <_svfiprintf_r+0x54>
 800417c:	ebba 0b04 	subs.w	fp, sl, r4
 8004180:	d00b      	beq.n	800419a <_svfiprintf_r+0x7e>
 8004182:	465b      	mov	r3, fp
 8004184:	4622      	mov	r2, r4
 8004186:	4629      	mov	r1, r5
 8004188:	4638      	mov	r0, r7
 800418a:	f7ff ff6b 	bl	8004064 <__ssputs_r>
 800418e:	3001      	adds	r0, #1
 8004190:	f000 80a7 	beq.w	80042e2 <_svfiprintf_r+0x1c6>
 8004194:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004196:	445a      	add	r2, fp
 8004198:	9209      	str	r2, [sp, #36]	@ 0x24
 800419a:	f89a 3000 	ldrb.w	r3, [sl]
 800419e:	2b00      	cmp	r3, #0
 80041a0:	f000 809f 	beq.w	80042e2 <_svfiprintf_r+0x1c6>
 80041a4:	2300      	movs	r3, #0
 80041a6:	f04f 32ff 	mov.w	r2, #4294967295
 80041aa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80041ae:	f10a 0a01 	add.w	sl, sl, #1
 80041b2:	9304      	str	r3, [sp, #16]
 80041b4:	9307      	str	r3, [sp, #28]
 80041b6:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 80041ba:	931a      	str	r3, [sp, #104]	@ 0x68
 80041bc:	4654      	mov	r4, sl
 80041be:	2205      	movs	r2, #5
 80041c0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80041c4:	484e      	ldr	r0, [pc, #312]	@ (8004300 <_svfiprintf_r+0x1e4>)
 80041c6:	f000 fcdd 	bl	8004b84 <memchr>
 80041ca:	9a04      	ldr	r2, [sp, #16]
 80041cc:	b9d8      	cbnz	r0, 8004206 <_svfiprintf_r+0xea>
 80041ce:	06d0      	lsls	r0, r2, #27
 80041d0:	bf44      	itt	mi
 80041d2:	2320      	movmi	r3, #32
 80041d4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041d8:	0711      	lsls	r1, r2, #28
 80041da:	bf44      	itt	mi
 80041dc:	232b      	movmi	r3, #43	@ 0x2b
 80041de:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80041e2:	f89a 3000 	ldrb.w	r3, [sl]
 80041e6:	2b2a      	cmp	r3, #42	@ 0x2a
 80041e8:	d015      	beq.n	8004216 <_svfiprintf_r+0xfa>
 80041ea:	4654      	mov	r4, sl
 80041ec:	2000      	movs	r0, #0
 80041ee:	f04f 0c0a 	mov.w	ip, #10
 80041f2:	9a07      	ldr	r2, [sp, #28]
 80041f4:	4621      	mov	r1, r4
 80041f6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80041fa:	3b30      	subs	r3, #48	@ 0x30
 80041fc:	2b09      	cmp	r3, #9
 80041fe:	d94b      	bls.n	8004298 <_svfiprintf_r+0x17c>
 8004200:	b1b0      	cbz	r0, 8004230 <_svfiprintf_r+0x114>
 8004202:	9207      	str	r2, [sp, #28]
 8004204:	e014      	b.n	8004230 <_svfiprintf_r+0x114>
 8004206:	eba0 0308 	sub.w	r3, r0, r8
 800420a:	fa09 f303 	lsl.w	r3, r9, r3
 800420e:	4313      	orrs	r3, r2
 8004210:	46a2      	mov	sl, r4
 8004212:	9304      	str	r3, [sp, #16]
 8004214:	e7d2      	b.n	80041bc <_svfiprintf_r+0xa0>
 8004216:	9b03      	ldr	r3, [sp, #12]
 8004218:	1d19      	adds	r1, r3, #4
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	9103      	str	r1, [sp, #12]
 800421e:	2b00      	cmp	r3, #0
 8004220:	bfbb      	ittet	lt
 8004222:	425b      	neglt	r3, r3
 8004224:	f042 0202 	orrlt.w	r2, r2, #2
 8004228:	9307      	strge	r3, [sp, #28]
 800422a:	9307      	strlt	r3, [sp, #28]
 800422c:	bfb8      	it	lt
 800422e:	9204      	strlt	r2, [sp, #16]
 8004230:	7823      	ldrb	r3, [r4, #0]
 8004232:	2b2e      	cmp	r3, #46	@ 0x2e
 8004234:	d10a      	bne.n	800424c <_svfiprintf_r+0x130>
 8004236:	7863      	ldrb	r3, [r4, #1]
 8004238:	2b2a      	cmp	r3, #42	@ 0x2a
 800423a:	d132      	bne.n	80042a2 <_svfiprintf_r+0x186>
 800423c:	9b03      	ldr	r3, [sp, #12]
 800423e:	3402      	adds	r4, #2
 8004240:	1d1a      	adds	r2, r3, #4
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	9203      	str	r2, [sp, #12]
 8004246:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800424a:	9305      	str	r3, [sp, #20]
 800424c:	f8df a0b4 	ldr.w	sl, [pc, #180]	@ 8004304 <_svfiprintf_r+0x1e8>
 8004250:	2203      	movs	r2, #3
 8004252:	4650      	mov	r0, sl
 8004254:	7821      	ldrb	r1, [r4, #0]
 8004256:	f000 fc95 	bl	8004b84 <memchr>
 800425a:	b138      	cbz	r0, 800426c <_svfiprintf_r+0x150>
 800425c:	2240      	movs	r2, #64	@ 0x40
 800425e:	9b04      	ldr	r3, [sp, #16]
 8004260:	eba0 000a 	sub.w	r0, r0, sl
 8004264:	4082      	lsls	r2, r0
 8004266:	4313      	orrs	r3, r2
 8004268:	3401      	adds	r4, #1
 800426a:	9304      	str	r3, [sp, #16]
 800426c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004270:	2206      	movs	r2, #6
 8004272:	4825      	ldr	r0, [pc, #148]	@ (8004308 <_svfiprintf_r+0x1ec>)
 8004274:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004278:	f000 fc84 	bl	8004b84 <memchr>
 800427c:	2800      	cmp	r0, #0
 800427e:	d036      	beq.n	80042ee <_svfiprintf_r+0x1d2>
 8004280:	4b22      	ldr	r3, [pc, #136]	@ (800430c <_svfiprintf_r+0x1f0>)
 8004282:	bb1b      	cbnz	r3, 80042cc <_svfiprintf_r+0x1b0>
 8004284:	9b03      	ldr	r3, [sp, #12]
 8004286:	3307      	adds	r3, #7
 8004288:	f023 0307 	bic.w	r3, r3, #7
 800428c:	3308      	adds	r3, #8
 800428e:	9303      	str	r3, [sp, #12]
 8004290:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004292:	4433      	add	r3, r6
 8004294:	9309      	str	r3, [sp, #36]	@ 0x24
 8004296:	e76a      	b.n	800416e <_svfiprintf_r+0x52>
 8004298:	460c      	mov	r4, r1
 800429a:	2001      	movs	r0, #1
 800429c:	fb0c 3202 	mla	r2, ip, r2, r3
 80042a0:	e7a8      	b.n	80041f4 <_svfiprintf_r+0xd8>
 80042a2:	2300      	movs	r3, #0
 80042a4:	f04f 0c0a 	mov.w	ip, #10
 80042a8:	4619      	mov	r1, r3
 80042aa:	3401      	adds	r4, #1
 80042ac:	9305      	str	r3, [sp, #20]
 80042ae:	4620      	mov	r0, r4
 80042b0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80042b4:	3a30      	subs	r2, #48	@ 0x30
 80042b6:	2a09      	cmp	r2, #9
 80042b8:	d903      	bls.n	80042c2 <_svfiprintf_r+0x1a6>
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d0c6      	beq.n	800424c <_svfiprintf_r+0x130>
 80042be:	9105      	str	r1, [sp, #20]
 80042c0:	e7c4      	b.n	800424c <_svfiprintf_r+0x130>
 80042c2:	4604      	mov	r4, r0
 80042c4:	2301      	movs	r3, #1
 80042c6:	fb0c 2101 	mla	r1, ip, r1, r2
 80042ca:	e7f0      	b.n	80042ae <_svfiprintf_r+0x192>
 80042cc:	ab03      	add	r3, sp, #12
 80042ce:	9300      	str	r3, [sp, #0]
 80042d0:	462a      	mov	r2, r5
 80042d2:	4638      	mov	r0, r7
 80042d4:	4b0e      	ldr	r3, [pc, #56]	@ (8004310 <_svfiprintf_r+0x1f4>)
 80042d6:	a904      	add	r1, sp, #16
 80042d8:	f3af 8000 	nop.w
 80042dc:	1c42      	adds	r2, r0, #1
 80042de:	4606      	mov	r6, r0
 80042e0:	d1d6      	bne.n	8004290 <_svfiprintf_r+0x174>
 80042e2:	89ab      	ldrh	r3, [r5, #12]
 80042e4:	065b      	lsls	r3, r3, #25
 80042e6:	f53f af2d 	bmi.w	8004144 <_svfiprintf_r+0x28>
 80042ea:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80042ec:	e72c      	b.n	8004148 <_svfiprintf_r+0x2c>
 80042ee:	ab03      	add	r3, sp, #12
 80042f0:	9300      	str	r3, [sp, #0]
 80042f2:	462a      	mov	r2, r5
 80042f4:	4638      	mov	r0, r7
 80042f6:	4b06      	ldr	r3, [pc, #24]	@ (8004310 <_svfiprintf_r+0x1f4>)
 80042f8:	a904      	add	r1, sp, #16
 80042fa:	f000 f9bd 	bl	8004678 <_printf_i>
 80042fe:	e7ed      	b.n	80042dc <_svfiprintf_r+0x1c0>
 8004300:	08004f7b 	.word	0x08004f7b
 8004304:	08004f81 	.word	0x08004f81
 8004308:	08004f85 	.word	0x08004f85
 800430c:	00000000 	.word	0x00000000
 8004310:	08004065 	.word	0x08004065

08004314 <__sfputc_r>:
 8004314:	6893      	ldr	r3, [r2, #8]
 8004316:	b410      	push	{r4}
 8004318:	3b01      	subs	r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	6093      	str	r3, [r2, #8]
 800431e:	da07      	bge.n	8004330 <__sfputc_r+0x1c>
 8004320:	6994      	ldr	r4, [r2, #24]
 8004322:	42a3      	cmp	r3, r4
 8004324:	db01      	blt.n	800432a <__sfputc_r+0x16>
 8004326:	290a      	cmp	r1, #10
 8004328:	d102      	bne.n	8004330 <__sfputc_r+0x1c>
 800432a:	bc10      	pop	{r4}
 800432c:	f000 bb6c 	b.w	8004a08 <__swbuf_r>
 8004330:	6813      	ldr	r3, [r2, #0]
 8004332:	1c58      	adds	r0, r3, #1
 8004334:	6010      	str	r0, [r2, #0]
 8004336:	7019      	strb	r1, [r3, #0]
 8004338:	4608      	mov	r0, r1
 800433a:	bc10      	pop	{r4}
 800433c:	4770      	bx	lr

0800433e <__sfputs_r>:
 800433e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004340:	4606      	mov	r6, r0
 8004342:	460f      	mov	r7, r1
 8004344:	4614      	mov	r4, r2
 8004346:	18d5      	adds	r5, r2, r3
 8004348:	42ac      	cmp	r4, r5
 800434a:	d101      	bne.n	8004350 <__sfputs_r+0x12>
 800434c:	2000      	movs	r0, #0
 800434e:	e007      	b.n	8004360 <__sfputs_r+0x22>
 8004350:	463a      	mov	r2, r7
 8004352:	4630      	mov	r0, r6
 8004354:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004358:	f7ff ffdc 	bl	8004314 <__sfputc_r>
 800435c:	1c43      	adds	r3, r0, #1
 800435e:	d1f3      	bne.n	8004348 <__sfputs_r+0xa>
 8004360:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08004364 <_vfiprintf_r>:
 8004364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004368:	460d      	mov	r5, r1
 800436a:	4614      	mov	r4, r2
 800436c:	4698      	mov	r8, r3
 800436e:	4606      	mov	r6, r0
 8004370:	b09d      	sub	sp, #116	@ 0x74
 8004372:	b118      	cbz	r0, 800437c <_vfiprintf_r+0x18>
 8004374:	6a03      	ldr	r3, [r0, #32]
 8004376:	b90b      	cbnz	r3, 800437c <_vfiprintf_r+0x18>
 8004378:	f7ff fc22 	bl	8003bc0 <__sinit>
 800437c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800437e:	07d9      	lsls	r1, r3, #31
 8004380:	d405      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004382:	89ab      	ldrh	r3, [r5, #12]
 8004384:	059a      	lsls	r2, r3, #22
 8004386:	d402      	bmi.n	800438e <_vfiprintf_r+0x2a>
 8004388:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800438a:	f7ff fd72 	bl	8003e72 <__retarget_lock_acquire_recursive>
 800438e:	89ab      	ldrh	r3, [r5, #12]
 8004390:	071b      	lsls	r3, r3, #28
 8004392:	d501      	bpl.n	8004398 <_vfiprintf_r+0x34>
 8004394:	692b      	ldr	r3, [r5, #16]
 8004396:	b99b      	cbnz	r3, 80043c0 <_vfiprintf_r+0x5c>
 8004398:	4629      	mov	r1, r5
 800439a:	4630      	mov	r0, r6
 800439c:	f000 fb72 	bl	8004a84 <__swsetup_r>
 80043a0:	b170      	cbz	r0, 80043c0 <_vfiprintf_r+0x5c>
 80043a2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80043a4:	07dc      	lsls	r4, r3, #31
 80043a6:	d504      	bpl.n	80043b2 <_vfiprintf_r+0x4e>
 80043a8:	f04f 30ff 	mov.w	r0, #4294967295
 80043ac:	b01d      	add	sp, #116	@ 0x74
 80043ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80043b2:	89ab      	ldrh	r3, [r5, #12]
 80043b4:	0598      	lsls	r0, r3, #22
 80043b6:	d4f7      	bmi.n	80043a8 <_vfiprintf_r+0x44>
 80043b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80043ba:	f7ff fd5b 	bl	8003e74 <__retarget_lock_release_recursive>
 80043be:	e7f3      	b.n	80043a8 <_vfiprintf_r+0x44>
 80043c0:	2300      	movs	r3, #0
 80043c2:	9309      	str	r3, [sp, #36]	@ 0x24
 80043c4:	2320      	movs	r3, #32
 80043c6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80043ca:	2330      	movs	r3, #48	@ 0x30
 80043cc:	f04f 0901 	mov.w	r9, #1
 80043d0:	f8cd 800c 	str.w	r8, [sp, #12]
 80043d4:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8004580 <_vfiprintf_r+0x21c>
 80043d8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80043dc:	4623      	mov	r3, r4
 80043de:	469a      	mov	sl, r3
 80043e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80043e4:	b10a      	cbz	r2, 80043ea <_vfiprintf_r+0x86>
 80043e6:	2a25      	cmp	r2, #37	@ 0x25
 80043e8:	d1f9      	bne.n	80043de <_vfiprintf_r+0x7a>
 80043ea:	ebba 0b04 	subs.w	fp, sl, r4
 80043ee:	d00b      	beq.n	8004408 <_vfiprintf_r+0xa4>
 80043f0:	465b      	mov	r3, fp
 80043f2:	4622      	mov	r2, r4
 80043f4:	4629      	mov	r1, r5
 80043f6:	4630      	mov	r0, r6
 80043f8:	f7ff ffa1 	bl	800433e <__sfputs_r>
 80043fc:	3001      	adds	r0, #1
 80043fe:	f000 80a7 	beq.w	8004550 <_vfiprintf_r+0x1ec>
 8004402:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004404:	445a      	add	r2, fp
 8004406:	9209      	str	r2, [sp, #36]	@ 0x24
 8004408:	f89a 3000 	ldrb.w	r3, [sl]
 800440c:	2b00      	cmp	r3, #0
 800440e:	f000 809f 	beq.w	8004550 <_vfiprintf_r+0x1ec>
 8004412:	2300      	movs	r3, #0
 8004414:	f04f 32ff 	mov.w	r2, #4294967295
 8004418:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800441c:	f10a 0a01 	add.w	sl, sl, #1
 8004420:	9304      	str	r3, [sp, #16]
 8004422:	9307      	str	r3, [sp, #28]
 8004424:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004428:	931a      	str	r3, [sp, #104]	@ 0x68
 800442a:	4654      	mov	r4, sl
 800442c:	2205      	movs	r2, #5
 800442e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004432:	4853      	ldr	r0, [pc, #332]	@ (8004580 <_vfiprintf_r+0x21c>)
 8004434:	f000 fba6 	bl	8004b84 <memchr>
 8004438:	9a04      	ldr	r2, [sp, #16]
 800443a:	b9d8      	cbnz	r0, 8004474 <_vfiprintf_r+0x110>
 800443c:	06d1      	lsls	r1, r2, #27
 800443e:	bf44      	itt	mi
 8004440:	2320      	movmi	r3, #32
 8004442:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004446:	0713      	lsls	r3, r2, #28
 8004448:	bf44      	itt	mi
 800444a:	232b      	movmi	r3, #43	@ 0x2b
 800444c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004450:	f89a 3000 	ldrb.w	r3, [sl]
 8004454:	2b2a      	cmp	r3, #42	@ 0x2a
 8004456:	d015      	beq.n	8004484 <_vfiprintf_r+0x120>
 8004458:	4654      	mov	r4, sl
 800445a:	2000      	movs	r0, #0
 800445c:	f04f 0c0a 	mov.w	ip, #10
 8004460:	9a07      	ldr	r2, [sp, #28]
 8004462:	4621      	mov	r1, r4
 8004464:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004468:	3b30      	subs	r3, #48	@ 0x30
 800446a:	2b09      	cmp	r3, #9
 800446c:	d94b      	bls.n	8004506 <_vfiprintf_r+0x1a2>
 800446e:	b1b0      	cbz	r0, 800449e <_vfiprintf_r+0x13a>
 8004470:	9207      	str	r2, [sp, #28]
 8004472:	e014      	b.n	800449e <_vfiprintf_r+0x13a>
 8004474:	eba0 0308 	sub.w	r3, r0, r8
 8004478:	fa09 f303 	lsl.w	r3, r9, r3
 800447c:	4313      	orrs	r3, r2
 800447e:	46a2      	mov	sl, r4
 8004480:	9304      	str	r3, [sp, #16]
 8004482:	e7d2      	b.n	800442a <_vfiprintf_r+0xc6>
 8004484:	9b03      	ldr	r3, [sp, #12]
 8004486:	1d19      	adds	r1, r3, #4
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	9103      	str	r1, [sp, #12]
 800448c:	2b00      	cmp	r3, #0
 800448e:	bfbb      	ittet	lt
 8004490:	425b      	neglt	r3, r3
 8004492:	f042 0202 	orrlt.w	r2, r2, #2
 8004496:	9307      	strge	r3, [sp, #28]
 8004498:	9307      	strlt	r3, [sp, #28]
 800449a:	bfb8      	it	lt
 800449c:	9204      	strlt	r2, [sp, #16]
 800449e:	7823      	ldrb	r3, [r4, #0]
 80044a0:	2b2e      	cmp	r3, #46	@ 0x2e
 80044a2:	d10a      	bne.n	80044ba <_vfiprintf_r+0x156>
 80044a4:	7863      	ldrb	r3, [r4, #1]
 80044a6:	2b2a      	cmp	r3, #42	@ 0x2a
 80044a8:	d132      	bne.n	8004510 <_vfiprintf_r+0x1ac>
 80044aa:	9b03      	ldr	r3, [sp, #12]
 80044ac:	3402      	adds	r4, #2
 80044ae:	1d1a      	adds	r2, r3, #4
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	9203      	str	r2, [sp, #12]
 80044b4:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80044b8:	9305      	str	r3, [sp, #20]
 80044ba:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8004584 <_vfiprintf_r+0x220>
 80044be:	2203      	movs	r2, #3
 80044c0:	4650      	mov	r0, sl
 80044c2:	7821      	ldrb	r1, [r4, #0]
 80044c4:	f000 fb5e 	bl	8004b84 <memchr>
 80044c8:	b138      	cbz	r0, 80044da <_vfiprintf_r+0x176>
 80044ca:	2240      	movs	r2, #64	@ 0x40
 80044cc:	9b04      	ldr	r3, [sp, #16]
 80044ce:	eba0 000a 	sub.w	r0, r0, sl
 80044d2:	4082      	lsls	r2, r0
 80044d4:	4313      	orrs	r3, r2
 80044d6:	3401      	adds	r4, #1
 80044d8:	9304      	str	r3, [sp, #16]
 80044da:	f814 1b01 	ldrb.w	r1, [r4], #1
 80044de:	2206      	movs	r2, #6
 80044e0:	4829      	ldr	r0, [pc, #164]	@ (8004588 <_vfiprintf_r+0x224>)
 80044e2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80044e6:	f000 fb4d 	bl	8004b84 <memchr>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d03f      	beq.n	800456e <_vfiprintf_r+0x20a>
 80044ee:	4b27      	ldr	r3, [pc, #156]	@ (800458c <_vfiprintf_r+0x228>)
 80044f0:	bb1b      	cbnz	r3, 800453a <_vfiprintf_r+0x1d6>
 80044f2:	9b03      	ldr	r3, [sp, #12]
 80044f4:	3307      	adds	r3, #7
 80044f6:	f023 0307 	bic.w	r3, r3, #7
 80044fa:	3308      	adds	r3, #8
 80044fc:	9303      	str	r3, [sp, #12]
 80044fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004500:	443b      	add	r3, r7
 8004502:	9309      	str	r3, [sp, #36]	@ 0x24
 8004504:	e76a      	b.n	80043dc <_vfiprintf_r+0x78>
 8004506:	460c      	mov	r4, r1
 8004508:	2001      	movs	r0, #1
 800450a:	fb0c 3202 	mla	r2, ip, r2, r3
 800450e:	e7a8      	b.n	8004462 <_vfiprintf_r+0xfe>
 8004510:	2300      	movs	r3, #0
 8004512:	f04f 0c0a 	mov.w	ip, #10
 8004516:	4619      	mov	r1, r3
 8004518:	3401      	adds	r4, #1
 800451a:	9305      	str	r3, [sp, #20]
 800451c:	4620      	mov	r0, r4
 800451e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004522:	3a30      	subs	r2, #48	@ 0x30
 8004524:	2a09      	cmp	r2, #9
 8004526:	d903      	bls.n	8004530 <_vfiprintf_r+0x1cc>
 8004528:	2b00      	cmp	r3, #0
 800452a:	d0c6      	beq.n	80044ba <_vfiprintf_r+0x156>
 800452c:	9105      	str	r1, [sp, #20]
 800452e:	e7c4      	b.n	80044ba <_vfiprintf_r+0x156>
 8004530:	4604      	mov	r4, r0
 8004532:	2301      	movs	r3, #1
 8004534:	fb0c 2101 	mla	r1, ip, r1, r2
 8004538:	e7f0      	b.n	800451c <_vfiprintf_r+0x1b8>
 800453a:	ab03      	add	r3, sp, #12
 800453c:	9300      	str	r3, [sp, #0]
 800453e:	462a      	mov	r2, r5
 8004540:	4630      	mov	r0, r6
 8004542:	4b13      	ldr	r3, [pc, #76]	@ (8004590 <_vfiprintf_r+0x22c>)
 8004544:	a904      	add	r1, sp, #16
 8004546:	f3af 8000 	nop.w
 800454a:	4607      	mov	r7, r0
 800454c:	1c78      	adds	r0, r7, #1
 800454e:	d1d6      	bne.n	80044fe <_vfiprintf_r+0x19a>
 8004550:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004552:	07d9      	lsls	r1, r3, #31
 8004554:	d405      	bmi.n	8004562 <_vfiprintf_r+0x1fe>
 8004556:	89ab      	ldrh	r3, [r5, #12]
 8004558:	059a      	lsls	r2, r3, #22
 800455a:	d402      	bmi.n	8004562 <_vfiprintf_r+0x1fe>
 800455c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800455e:	f7ff fc89 	bl	8003e74 <__retarget_lock_release_recursive>
 8004562:	89ab      	ldrh	r3, [r5, #12]
 8004564:	065b      	lsls	r3, r3, #25
 8004566:	f53f af1f 	bmi.w	80043a8 <_vfiprintf_r+0x44>
 800456a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800456c:	e71e      	b.n	80043ac <_vfiprintf_r+0x48>
 800456e:	ab03      	add	r3, sp, #12
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	462a      	mov	r2, r5
 8004574:	4630      	mov	r0, r6
 8004576:	4b06      	ldr	r3, [pc, #24]	@ (8004590 <_vfiprintf_r+0x22c>)
 8004578:	a904      	add	r1, sp, #16
 800457a:	f000 f87d 	bl	8004678 <_printf_i>
 800457e:	e7e4      	b.n	800454a <_vfiprintf_r+0x1e6>
 8004580:	08004f7b 	.word	0x08004f7b
 8004584:	08004f81 	.word	0x08004f81
 8004588:	08004f85 	.word	0x08004f85
 800458c:	00000000 	.word	0x00000000
 8004590:	0800433f 	.word	0x0800433f

08004594 <_printf_common>:
 8004594:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004598:	4616      	mov	r6, r2
 800459a:	4698      	mov	r8, r3
 800459c:	688a      	ldr	r2, [r1, #8]
 800459e:	690b      	ldr	r3, [r1, #16]
 80045a0:	4607      	mov	r7, r0
 80045a2:	4293      	cmp	r3, r2
 80045a4:	bfb8      	it	lt
 80045a6:	4613      	movlt	r3, r2
 80045a8:	6033      	str	r3, [r6, #0]
 80045aa:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80045ae:	460c      	mov	r4, r1
 80045b0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80045b4:	b10a      	cbz	r2, 80045ba <_printf_common+0x26>
 80045b6:	3301      	adds	r3, #1
 80045b8:	6033      	str	r3, [r6, #0]
 80045ba:	6823      	ldr	r3, [r4, #0]
 80045bc:	0699      	lsls	r1, r3, #26
 80045be:	bf42      	ittt	mi
 80045c0:	6833      	ldrmi	r3, [r6, #0]
 80045c2:	3302      	addmi	r3, #2
 80045c4:	6033      	strmi	r3, [r6, #0]
 80045c6:	6825      	ldr	r5, [r4, #0]
 80045c8:	f015 0506 	ands.w	r5, r5, #6
 80045cc:	d106      	bne.n	80045dc <_printf_common+0x48>
 80045ce:	f104 0a19 	add.w	sl, r4, #25
 80045d2:	68e3      	ldr	r3, [r4, #12]
 80045d4:	6832      	ldr	r2, [r6, #0]
 80045d6:	1a9b      	subs	r3, r3, r2
 80045d8:	42ab      	cmp	r3, r5
 80045da:	dc2b      	bgt.n	8004634 <_printf_common+0xa0>
 80045dc:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80045e0:	6822      	ldr	r2, [r4, #0]
 80045e2:	3b00      	subs	r3, #0
 80045e4:	bf18      	it	ne
 80045e6:	2301      	movne	r3, #1
 80045e8:	0692      	lsls	r2, r2, #26
 80045ea:	d430      	bmi.n	800464e <_printf_common+0xba>
 80045ec:	4641      	mov	r1, r8
 80045ee:	4638      	mov	r0, r7
 80045f0:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80045f4:	47c8      	blx	r9
 80045f6:	3001      	adds	r0, #1
 80045f8:	d023      	beq.n	8004642 <_printf_common+0xae>
 80045fa:	6823      	ldr	r3, [r4, #0]
 80045fc:	6922      	ldr	r2, [r4, #16]
 80045fe:	f003 0306 	and.w	r3, r3, #6
 8004602:	2b04      	cmp	r3, #4
 8004604:	bf14      	ite	ne
 8004606:	2500      	movne	r5, #0
 8004608:	6833      	ldreq	r3, [r6, #0]
 800460a:	f04f 0600 	mov.w	r6, #0
 800460e:	bf08      	it	eq
 8004610:	68e5      	ldreq	r5, [r4, #12]
 8004612:	f104 041a 	add.w	r4, r4, #26
 8004616:	bf08      	it	eq
 8004618:	1aed      	subeq	r5, r5, r3
 800461a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 800461e:	bf08      	it	eq
 8004620:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004624:	4293      	cmp	r3, r2
 8004626:	bfc4      	itt	gt
 8004628:	1a9b      	subgt	r3, r3, r2
 800462a:	18ed      	addgt	r5, r5, r3
 800462c:	42b5      	cmp	r5, r6
 800462e:	d11a      	bne.n	8004666 <_printf_common+0xd2>
 8004630:	2000      	movs	r0, #0
 8004632:	e008      	b.n	8004646 <_printf_common+0xb2>
 8004634:	2301      	movs	r3, #1
 8004636:	4652      	mov	r2, sl
 8004638:	4641      	mov	r1, r8
 800463a:	4638      	mov	r0, r7
 800463c:	47c8      	blx	r9
 800463e:	3001      	adds	r0, #1
 8004640:	d103      	bne.n	800464a <_printf_common+0xb6>
 8004642:	f04f 30ff 	mov.w	r0, #4294967295
 8004646:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800464a:	3501      	adds	r5, #1
 800464c:	e7c1      	b.n	80045d2 <_printf_common+0x3e>
 800464e:	2030      	movs	r0, #48	@ 0x30
 8004650:	18e1      	adds	r1, r4, r3
 8004652:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8004656:	1c5a      	adds	r2, r3, #1
 8004658:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800465c:	4422      	add	r2, r4
 800465e:	3302      	adds	r3, #2
 8004660:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8004664:	e7c2      	b.n	80045ec <_printf_common+0x58>
 8004666:	2301      	movs	r3, #1
 8004668:	4622      	mov	r2, r4
 800466a:	4641      	mov	r1, r8
 800466c:	4638      	mov	r0, r7
 800466e:	47c8      	blx	r9
 8004670:	3001      	adds	r0, #1
 8004672:	d0e6      	beq.n	8004642 <_printf_common+0xae>
 8004674:	3601      	adds	r6, #1
 8004676:	e7d9      	b.n	800462c <_printf_common+0x98>

08004678 <_printf_i>:
 8004678:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800467c:	7e0f      	ldrb	r7, [r1, #24]
 800467e:	4691      	mov	r9, r2
 8004680:	2f78      	cmp	r7, #120	@ 0x78
 8004682:	4680      	mov	r8, r0
 8004684:	460c      	mov	r4, r1
 8004686:	469a      	mov	sl, r3
 8004688:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800468a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800468e:	d807      	bhi.n	80046a0 <_printf_i+0x28>
 8004690:	2f62      	cmp	r7, #98	@ 0x62
 8004692:	d80a      	bhi.n	80046aa <_printf_i+0x32>
 8004694:	2f00      	cmp	r7, #0
 8004696:	f000 80d3 	beq.w	8004840 <_printf_i+0x1c8>
 800469a:	2f58      	cmp	r7, #88	@ 0x58
 800469c:	f000 80ba 	beq.w	8004814 <_printf_i+0x19c>
 80046a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80046a4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80046a8:	e03a      	b.n	8004720 <_printf_i+0xa8>
 80046aa:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80046ae:	2b15      	cmp	r3, #21
 80046b0:	d8f6      	bhi.n	80046a0 <_printf_i+0x28>
 80046b2:	a101      	add	r1, pc, #4	@ (adr r1, 80046b8 <_printf_i+0x40>)
 80046b4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80046b8:	08004711 	.word	0x08004711
 80046bc:	08004725 	.word	0x08004725
 80046c0:	080046a1 	.word	0x080046a1
 80046c4:	080046a1 	.word	0x080046a1
 80046c8:	080046a1 	.word	0x080046a1
 80046cc:	080046a1 	.word	0x080046a1
 80046d0:	08004725 	.word	0x08004725
 80046d4:	080046a1 	.word	0x080046a1
 80046d8:	080046a1 	.word	0x080046a1
 80046dc:	080046a1 	.word	0x080046a1
 80046e0:	080046a1 	.word	0x080046a1
 80046e4:	08004827 	.word	0x08004827
 80046e8:	0800474f 	.word	0x0800474f
 80046ec:	080047e1 	.word	0x080047e1
 80046f0:	080046a1 	.word	0x080046a1
 80046f4:	080046a1 	.word	0x080046a1
 80046f8:	08004849 	.word	0x08004849
 80046fc:	080046a1 	.word	0x080046a1
 8004700:	0800474f 	.word	0x0800474f
 8004704:	080046a1 	.word	0x080046a1
 8004708:	080046a1 	.word	0x080046a1
 800470c:	080047e9 	.word	0x080047e9
 8004710:	6833      	ldr	r3, [r6, #0]
 8004712:	1d1a      	adds	r2, r3, #4
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	6032      	str	r2, [r6, #0]
 8004718:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800471c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8004720:	2301      	movs	r3, #1
 8004722:	e09e      	b.n	8004862 <_printf_i+0x1ea>
 8004724:	6833      	ldr	r3, [r6, #0]
 8004726:	6820      	ldr	r0, [r4, #0]
 8004728:	1d19      	adds	r1, r3, #4
 800472a:	6031      	str	r1, [r6, #0]
 800472c:	0606      	lsls	r6, r0, #24
 800472e:	d501      	bpl.n	8004734 <_printf_i+0xbc>
 8004730:	681d      	ldr	r5, [r3, #0]
 8004732:	e003      	b.n	800473c <_printf_i+0xc4>
 8004734:	0645      	lsls	r5, r0, #25
 8004736:	d5fb      	bpl.n	8004730 <_printf_i+0xb8>
 8004738:	f9b3 5000 	ldrsh.w	r5, [r3]
 800473c:	2d00      	cmp	r5, #0
 800473e:	da03      	bge.n	8004748 <_printf_i+0xd0>
 8004740:	232d      	movs	r3, #45	@ 0x2d
 8004742:	426d      	negs	r5, r5
 8004744:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8004748:	230a      	movs	r3, #10
 800474a:	4859      	ldr	r0, [pc, #356]	@ (80048b0 <_printf_i+0x238>)
 800474c:	e011      	b.n	8004772 <_printf_i+0xfa>
 800474e:	6821      	ldr	r1, [r4, #0]
 8004750:	6833      	ldr	r3, [r6, #0]
 8004752:	0608      	lsls	r0, r1, #24
 8004754:	f853 5b04 	ldr.w	r5, [r3], #4
 8004758:	d402      	bmi.n	8004760 <_printf_i+0xe8>
 800475a:	0649      	lsls	r1, r1, #25
 800475c:	bf48      	it	mi
 800475e:	b2ad      	uxthmi	r5, r5
 8004760:	2f6f      	cmp	r7, #111	@ 0x6f
 8004762:	6033      	str	r3, [r6, #0]
 8004764:	bf14      	ite	ne
 8004766:	230a      	movne	r3, #10
 8004768:	2308      	moveq	r3, #8
 800476a:	4851      	ldr	r0, [pc, #324]	@ (80048b0 <_printf_i+0x238>)
 800476c:	2100      	movs	r1, #0
 800476e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8004772:	6866      	ldr	r6, [r4, #4]
 8004774:	2e00      	cmp	r6, #0
 8004776:	bfa8      	it	ge
 8004778:	6821      	ldrge	r1, [r4, #0]
 800477a:	60a6      	str	r6, [r4, #8]
 800477c:	bfa4      	itt	ge
 800477e:	f021 0104 	bicge.w	r1, r1, #4
 8004782:	6021      	strge	r1, [r4, #0]
 8004784:	b90d      	cbnz	r5, 800478a <_printf_i+0x112>
 8004786:	2e00      	cmp	r6, #0
 8004788:	d04b      	beq.n	8004822 <_printf_i+0x1aa>
 800478a:	4616      	mov	r6, r2
 800478c:	fbb5 f1f3 	udiv	r1, r5, r3
 8004790:	fb03 5711 	mls	r7, r3, r1, r5
 8004794:	5dc7      	ldrb	r7, [r0, r7]
 8004796:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800479a:	462f      	mov	r7, r5
 800479c:	42bb      	cmp	r3, r7
 800479e:	460d      	mov	r5, r1
 80047a0:	d9f4      	bls.n	800478c <_printf_i+0x114>
 80047a2:	2b08      	cmp	r3, #8
 80047a4:	d10b      	bne.n	80047be <_printf_i+0x146>
 80047a6:	6823      	ldr	r3, [r4, #0]
 80047a8:	07df      	lsls	r7, r3, #31
 80047aa:	d508      	bpl.n	80047be <_printf_i+0x146>
 80047ac:	6923      	ldr	r3, [r4, #16]
 80047ae:	6861      	ldr	r1, [r4, #4]
 80047b0:	4299      	cmp	r1, r3
 80047b2:	bfde      	ittt	le
 80047b4:	2330      	movle	r3, #48	@ 0x30
 80047b6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80047ba:	f106 36ff 	addle.w	r6, r6, #4294967295
 80047be:	1b92      	subs	r2, r2, r6
 80047c0:	6122      	str	r2, [r4, #16]
 80047c2:	464b      	mov	r3, r9
 80047c4:	4621      	mov	r1, r4
 80047c6:	4640      	mov	r0, r8
 80047c8:	f8cd a000 	str.w	sl, [sp]
 80047cc:	aa03      	add	r2, sp, #12
 80047ce:	f7ff fee1 	bl	8004594 <_printf_common>
 80047d2:	3001      	adds	r0, #1
 80047d4:	d14a      	bne.n	800486c <_printf_i+0x1f4>
 80047d6:	f04f 30ff 	mov.w	r0, #4294967295
 80047da:	b004      	add	sp, #16
 80047dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80047e0:	6823      	ldr	r3, [r4, #0]
 80047e2:	f043 0320 	orr.w	r3, r3, #32
 80047e6:	6023      	str	r3, [r4, #0]
 80047e8:	2778      	movs	r7, #120	@ 0x78
 80047ea:	4832      	ldr	r0, [pc, #200]	@ (80048b4 <_printf_i+0x23c>)
 80047ec:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80047f0:	6823      	ldr	r3, [r4, #0]
 80047f2:	6831      	ldr	r1, [r6, #0]
 80047f4:	061f      	lsls	r7, r3, #24
 80047f6:	f851 5b04 	ldr.w	r5, [r1], #4
 80047fa:	d402      	bmi.n	8004802 <_printf_i+0x18a>
 80047fc:	065f      	lsls	r7, r3, #25
 80047fe:	bf48      	it	mi
 8004800:	b2ad      	uxthmi	r5, r5
 8004802:	6031      	str	r1, [r6, #0]
 8004804:	07d9      	lsls	r1, r3, #31
 8004806:	bf44      	itt	mi
 8004808:	f043 0320 	orrmi.w	r3, r3, #32
 800480c:	6023      	strmi	r3, [r4, #0]
 800480e:	b11d      	cbz	r5, 8004818 <_printf_i+0x1a0>
 8004810:	2310      	movs	r3, #16
 8004812:	e7ab      	b.n	800476c <_printf_i+0xf4>
 8004814:	4826      	ldr	r0, [pc, #152]	@ (80048b0 <_printf_i+0x238>)
 8004816:	e7e9      	b.n	80047ec <_printf_i+0x174>
 8004818:	6823      	ldr	r3, [r4, #0]
 800481a:	f023 0320 	bic.w	r3, r3, #32
 800481e:	6023      	str	r3, [r4, #0]
 8004820:	e7f6      	b.n	8004810 <_printf_i+0x198>
 8004822:	4616      	mov	r6, r2
 8004824:	e7bd      	b.n	80047a2 <_printf_i+0x12a>
 8004826:	6833      	ldr	r3, [r6, #0]
 8004828:	6825      	ldr	r5, [r4, #0]
 800482a:	1d18      	adds	r0, r3, #4
 800482c:	6961      	ldr	r1, [r4, #20]
 800482e:	6030      	str	r0, [r6, #0]
 8004830:	062e      	lsls	r6, r5, #24
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	d501      	bpl.n	800483a <_printf_i+0x1c2>
 8004836:	6019      	str	r1, [r3, #0]
 8004838:	e002      	b.n	8004840 <_printf_i+0x1c8>
 800483a:	0668      	lsls	r0, r5, #25
 800483c:	d5fb      	bpl.n	8004836 <_printf_i+0x1be>
 800483e:	8019      	strh	r1, [r3, #0]
 8004840:	2300      	movs	r3, #0
 8004842:	4616      	mov	r6, r2
 8004844:	6123      	str	r3, [r4, #16]
 8004846:	e7bc      	b.n	80047c2 <_printf_i+0x14a>
 8004848:	6833      	ldr	r3, [r6, #0]
 800484a:	2100      	movs	r1, #0
 800484c:	1d1a      	adds	r2, r3, #4
 800484e:	6032      	str	r2, [r6, #0]
 8004850:	681e      	ldr	r6, [r3, #0]
 8004852:	6862      	ldr	r2, [r4, #4]
 8004854:	4630      	mov	r0, r6
 8004856:	f000 f995 	bl	8004b84 <memchr>
 800485a:	b108      	cbz	r0, 8004860 <_printf_i+0x1e8>
 800485c:	1b80      	subs	r0, r0, r6
 800485e:	6060      	str	r0, [r4, #4]
 8004860:	6863      	ldr	r3, [r4, #4]
 8004862:	6123      	str	r3, [r4, #16]
 8004864:	2300      	movs	r3, #0
 8004866:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800486a:	e7aa      	b.n	80047c2 <_printf_i+0x14a>
 800486c:	4632      	mov	r2, r6
 800486e:	4649      	mov	r1, r9
 8004870:	4640      	mov	r0, r8
 8004872:	6923      	ldr	r3, [r4, #16]
 8004874:	47d0      	blx	sl
 8004876:	3001      	adds	r0, #1
 8004878:	d0ad      	beq.n	80047d6 <_printf_i+0x15e>
 800487a:	6823      	ldr	r3, [r4, #0]
 800487c:	079b      	lsls	r3, r3, #30
 800487e:	d413      	bmi.n	80048a8 <_printf_i+0x230>
 8004880:	68e0      	ldr	r0, [r4, #12]
 8004882:	9b03      	ldr	r3, [sp, #12]
 8004884:	4298      	cmp	r0, r3
 8004886:	bfb8      	it	lt
 8004888:	4618      	movlt	r0, r3
 800488a:	e7a6      	b.n	80047da <_printf_i+0x162>
 800488c:	2301      	movs	r3, #1
 800488e:	4632      	mov	r2, r6
 8004890:	4649      	mov	r1, r9
 8004892:	4640      	mov	r0, r8
 8004894:	47d0      	blx	sl
 8004896:	3001      	adds	r0, #1
 8004898:	d09d      	beq.n	80047d6 <_printf_i+0x15e>
 800489a:	3501      	adds	r5, #1
 800489c:	68e3      	ldr	r3, [r4, #12]
 800489e:	9903      	ldr	r1, [sp, #12]
 80048a0:	1a5b      	subs	r3, r3, r1
 80048a2:	42ab      	cmp	r3, r5
 80048a4:	dcf2      	bgt.n	800488c <_printf_i+0x214>
 80048a6:	e7eb      	b.n	8004880 <_printf_i+0x208>
 80048a8:	2500      	movs	r5, #0
 80048aa:	f104 0619 	add.w	r6, r4, #25
 80048ae:	e7f5      	b.n	800489c <_printf_i+0x224>
 80048b0:	08004f8c 	.word	0x08004f8c
 80048b4:	08004f9d 	.word	0x08004f9d

080048b8 <__sflush_r>:
 80048b8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80048bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80048be:	0716      	lsls	r6, r2, #28
 80048c0:	4605      	mov	r5, r0
 80048c2:	460c      	mov	r4, r1
 80048c4:	d454      	bmi.n	8004970 <__sflush_r+0xb8>
 80048c6:	684b      	ldr	r3, [r1, #4]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	dc02      	bgt.n	80048d2 <__sflush_r+0x1a>
 80048cc:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	dd48      	ble.n	8004964 <__sflush_r+0xac>
 80048d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80048d4:	2e00      	cmp	r6, #0
 80048d6:	d045      	beq.n	8004964 <__sflush_r+0xac>
 80048d8:	2300      	movs	r3, #0
 80048da:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80048de:	682f      	ldr	r7, [r5, #0]
 80048e0:	6a21      	ldr	r1, [r4, #32]
 80048e2:	602b      	str	r3, [r5, #0]
 80048e4:	d030      	beq.n	8004948 <__sflush_r+0x90>
 80048e6:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	0759      	lsls	r1, r3, #29
 80048ec:	d505      	bpl.n	80048fa <__sflush_r+0x42>
 80048ee:	6863      	ldr	r3, [r4, #4]
 80048f0:	1ad2      	subs	r2, r2, r3
 80048f2:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80048f4:	b10b      	cbz	r3, 80048fa <__sflush_r+0x42>
 80048f6:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80048f8:	1ad2      	subs	r2, r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	4628      	mov	r0, r5
 80048fe:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004900:	6a21      	ldr	r1, [r4, #32]
 8004902:	47b0      	blx	r6
 8004904:	1c43      	adds	r3, r0, #1
 8004906:	89a3      	ldrh	r3, [r4, #12]
 8004908:	d106      	bne.n	8004918 <__sflush_r+0x60>
 800490a:	6829      	ldr	r1, [r5, #0]
 800490c:	291d      	cmp	r1, #29
 800490e:	d82b      	bhi.n	8004968 <__sflush_r+0xb0>
 8004910:	4a28      	ldr	r2, [pc, #160]	@ (80049b4 <__sflush_r+0xfc>)
 8004912:	410a      	asrs	r2, r1
 8004914:	07d6      	lsls	r6, r2, #31
 8004916:	d427      	bmi.n	8004968 <__sflush_r+0xb0>
 8004918:	2200      	movs	r2, #0
 800491a:	6062      	str	r2, [r4, #4]
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	04d9      	lsls	r1, r3, #19
 8004920:	6022      	str	r2, [r4, #0]
 8004922:	d504      	bpl.n	800492e <__sflush_r+0x76>
 8004924:	1c42      	adds	r2, r0, #1
 8004926:	d101      	bne.n	800492c <__sflush_r+0x74>
 8004928:	682b      	ldr	r3, [r5, #0]
 800492a:	b903      	cbnz	r3, 800492e <__sflush_r+0x76>
 800492c:	6560      	str	r0, [r4, #84]	@ 0x54
 800492e:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004930:	602f      	str	r7, [r5, #0]
 8004932:	b1b9      	cbz	r1, 8004964 <__sflush_r+0xac>
 8004934:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004938:	4299      	cmp	r1, r3
 800493a:	d002      	beq.n	8004942 <__sflush_r+0x8a>
 800493c:	4628      	mov	r0, r5
 800493e:	f7ff fa9b 	bl	8003e78 <_free_r>
 8004942:	2300      	movs	r3, #0
 8004944:	6363      	str	r3, [r4, #52]	@ 0x34
 8004946:	e00d      	b.n	8004964 <__sflush_r+0xac>
 8004948:	2301      	movs	r3, #1
 800494a:	4628      	mov	r0, r5
 800494c:	47b0      	blx	r6
 800494e:	4602      	mov	r2, r0
 8004950:	1c50      	adds	r0, r2, #1
 8004952:	d1c9      	bne.n	80048e8 <__sflush_r+0x30>
 8004954:	682b      	ldr	r3, [r5, #0]
 8004956:	2b00      	cmp	r3, #0
 8004958:	d0c6      	beq.n	80048e8 <__sflush_r+0x30>
 800495a:	2b1d      	cmp	r3, #29
 800495c:	d001      	beq.n	8004962 <__sflush_r+0xaa>
 800495e:	2b16      	cmp	r3, #22
 8004960:	d11d      	bne.n	800499e <__sflush_r+0xe6>
 8004962:	602f      	str	r7, [r5, #0]
 8004964:	2000      	movs	r0, #0
 8004966:	e021      	b.n	80049ac <__sflush_r+0xf4>
 8004968:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800496c:	b21b      	sxth	r3, r3
 800496e:	e01a      	b.n	80049a6 <__sflush_r+0xee>
 8004970:	690f      	ldr	r7, [r1, #16]
 8004972:	2f00      	cmp	r7, #0
 8004974:	d0f6      	beq.n	8004964 <__sflush_r+0xac>
 8004976:	0793      	lsls	r3, r2, #30
 8004978:	bf18      	it	ne
 800497a:	2300      	movne	r3, #0
 800497c:	680e      	ldr	r6, [r1, #0]
 800497e:	bf08      	it	eq
 8004980:	694b      	ldreq	r3, [r1, #20]
 8004982:	1bf6      	subs	r6, r6, r7
 8004984:	600f      	str	r7, [r1, #0]
 8004986:	608b      	str	r3, [r1, #8]
 8004988:	2e00      	cmp	r6, #0
 800498a:	ddeb      	ble.n	8004964 <__sflush_r+0xac>
 800498c:	4633      	mov	r3, r6
 800498e:	463a      	mov	r2, r7
 8004990:	4628      	mov	r0, r5
 8004992:	6a21      	ldr	r1, [r4, #32]
 8004994:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004998:	47e0      	blx	ip
 800499a:	2800      	cmp	r0, #0
 800499c:	dc07      	bgt.n	80049ae <__sflush_r+0xf6>
 800499e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049a2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80049a6:	f04f 30ff 	mov.w	r0, #4294967295
 80049aa:	81a3      	strh	r3, [r4, #12]
 80049ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80049ae:	4407      	add	r7, r0
 80049b0:	1a36      	subs	r6, r6, r0
 80049b2:	e7e9      	b.n	8004988 <__sflush_r+0xd0>
 80049b4:	dfbffffe 	.word	0xdfbffffe

080049b8 <_fflush_r>:
 80049b8:	b538      	push	{r3, r4, r5, lr}
 80049ba:	690b      	ldr	r3, [r1, #16]
 80049bc:	4605      	mov	r5, r0
 80049be:	460c      	mov	r4, r1
 80049c0:	b913      	cbnz	r3, 80049c8 <_fflush_r+0x10>
 80049c2:	2500      	movs	r5, #0
 80049c4:	4628      	mov	r0, r5
 80049c6:	bd38      	pop	{r3, r4, r5, pc}
 80049c8:	b118      	cbz	r0, 80049d2 <_fflush_r+0x1a>
 80049ca:	6a03      	ldr	r3, [r0, #32]
 80049cc:	b90b      	cbnz	r3, 80049d2 <_fflush_r+0x1a>
 80049ce:	f7ff f8f7 	bl	8003bc0 <__sinit>
 80049d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80049d6:	2b00      	cmp	r3, #0
 80049d8:	d0f3      	beq.n	80049c2 <_fflush_r+0xa>
 80049da:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80049dc:	07d0      	lsls	r0, r2, #31
 80049de:	d404      	bmi.n	80049ea <_fflush_r+0x32>
 80049e0:	0599      	lsls	r1, r3, #22
 80049e2:	d402      	bmi.n	80049ea <_fflush_r+0x32>
 80049e4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80049e6:	f7ff fa44 	bl	8003e72 <__retarget_lock_acquire_recursive>
 80049ea:	4628      	mov	r0, r5
 80049ec:	4621      	mov	r1, r4
 80049ee:	f7ff ff63 	bl	80048b8 <__sflush_r>
 80049f2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80049f4:	4605      	mov	r5, r0
 80049f6:	07da      	lsls	r2, r3, #31
 80049f8:	d4e4      	bmi.n	80049c4 <_fflush_r+0xc>
 80049fa:	89a3      	ldrh	r3, [r4, #12]
 80049fc:	059b      	lsls	r3, r3, #22
 80049fe:	d4e1      	bmi.n	80049c4 <_fflush_r+0xc>
 8004a00:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004a02:	f7ff fa37 	bl	8003e74 <__retarget_lock_release_recursive>
 8004a06:	e7dd      	b.n	80049c4 <_fflush_r+0xc>

08004a08 <__swbuf_r>:
 8004a08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a0a:	460e      	mov	r6, r1
 8004a0c:	4614      	mov	r4, r2
 8004a0e:	4605      	mov	r5, r0
 8004a10:	b118      	cbz	r0, 8004a1a <__swbuf_r+0x12>
 8004a12:	6a03      	ldr	r3, [r0, #32]
 8004a14:	b90b      	cbnz	r3, 8004a1a <__swbuf_r+0x12>
 8004a16:	f7ff f8d3 	bl	8003bc0 <__sinit>
 8004a1a:	69a3      	ldr	r3, [r4, #24]
 8004a1c:	60a3      	str	r3, [r4, #8]
 8004a1e:	89a3      	ldrh	r3, [r4, #12]
 8004a20:	071a      	lsls	r2, r3, #28
 8004a22:	d501      	bpl.n	8004a28 <__swbuf_r+0x20>
 8004a24:	6923      	ldr	r3, [r4, #16]
 8004a26:	b943      	cbnz	r3, 8004a3a <__swbuf_r+0x32>
 8004a28:	4621      	mov	r1, r4
 8004a2a:	4628      	mov	r0, r5
 8004a2c:	f000 f82a 	bl	8004a84 <__swsetup_r>
 8004a30:	b118      	cbz	r0, 8004a3a <__swbuf_r+0x32>
 8004a32:	f04f 37ff 	mov.w	r7, #4294967295
 8004a36:	4638      	mov	r0, r7
 8004a38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004a3a:	6823      	ldr	r3, [r4, #0]
 8004a3c:	6922      	ldr	r2, [r4, #16]
 8004a3e:	b2f6      	uxtb	r6, r6
 8004a40:	1a98      	subs	r0, r3, r2
 8004a42:	6963      	ldr	r3, [r4, #20]
 8004a44:	4637      	mov	r7, r6
 8004a46:	4283      	cmp	r3, r0
 8004a48:	dc05      	bgt.n	8004a56 <__swbuf_r+0x4e>
 8004a4a:	4621      	mov	r1, r4
 8004a4c:	4628      	mov	r0, r5
 8004a4e:	f7ff ffb3 	bl	80049b8 <_fflush_r>
 8004a52:	2800      	cmp	r0, #0
 8004a54:	d1ed      	bne.n	8004a32 <__swbuf_r+0x2a>
 8004a56:	68a3      	ldr	r3, [r4, #8]
 8004a58:	3b01      	subs	r3, #1
 8004a5a:	60a3      	str	r3, [r4, #8]
 8004a5c:	6823      	ldr	r3, [r4, #0]
 8004a5e:	1c5a      	adds	r2, r3, #1
 8004a60:	6022      	str	r2, [r4, #0]
 8004a62:	701e      	strb	r6, [r3, #0]
 8004a64:	6962      	ldr	r2, [r4, #20]
 8004a66:	1c43      	adds	r3, r0, #1
 8004a68:	429a      	cmp	r2, r3
 8004a6a:	d004      	beq.n	8004a76 <__swbuf_r+0x6e>
 8004a6c:	89a3      	ldrh	r3, [r4, #12]
 8004a6e:	07db      	lsls	r3, r3, #31
 8004a70:	d5e1      	bpl.n	8004a36 <__swbuf_r+0x2e>
 8004a72:	2e0a      	cmp	r6, #10
 8004a74:	d1df      	bne.n	8004a36 <__swbuf_r+0x2e>
 8004a76:	4621      	mov	r1, r4
 8004a78:	4628      	mov	r0, r5
 8004a7a:	f7ff ff9d 	bl	80049b8 <_fflush_r>
 8004a7e:	2800      	cmp	r0, #0
 8004a80:	d0d9      	beq.n	8004a36 <__swbuf_r+0x2e>
 8004a82:	e7d6      	b.n	8004a32 <__swbuf_r+0x2a>

08004a84 <__swsetup_r>:
 8004a84:	b538      	push	{r3, r4, r5, lr}
 8004a86:	4b29      	ldr	r3, [pc, #164]	@ (8004b2c <__swsetup_r+0xa8>)
 8004a88:	4605      	mov	r5, r0
 8004a8a:	6818      	ldr	r0, [r3, #0]
 8004a8c:	460c      	mov	r4, r1
 8004a8e:	b118      	cbz	r0, 8004a98 <__swsetup_r+0x14>
 8004a90:	6a03      	ldr	r3, [r0, #32]
 8004a92:	b90b      	cbnz	r3, 8004a98 <__swsetup_r+0x14>
 8004a94:	f7ff f894 	bl	8003bc0 <__sinit>
 8004a98:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004a9c:	0719      	lsls	r1, r3, #28
 8004a9e:	d422      	bmi.n	8004ae6 <__swsetup_r+0x62>
 8004aa0:	06da      	lsls	r2, r3, #27
 8004aa2:	d407      	bmi.n	8004ab4 <__swsetup_r+0x30>
 8004aa4:	2209      	movs	r2, #9
 8004aa6:	602a      	str	r2, [r5, #0]
 8004aa8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004aac:	f04f 30ff 	mov.w	r0, #4294967295
 8004ab0:	81a3      	strh	r3, [r4, #12]
 8004ab2:	e033      	b.n	8004b1c <__swsetup_r+0x98>
 8004ab4:	0758      	lsls	r0, r3, #29
 8004ab6:	d512      	bpl.n	8004ade <__swsetup_r+0x5a>
 8004ab8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004aba:	b141      	cbz	r1, 8004ace <__swsetup_r+0x4a>
 8004abc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004ac0:	4299      	cmp	r1, r3
 8004ac2:	d002      	beq.n	8004aca <__swsetup_r+0x46>
 8004ac4:	4628      	mov	r0, r5
 8004ac6:	f7ff f9d7 	bl	8003e78 <_free_r>
 8004aca:	2300      	movs	r3, #0
 8004acc:	6363      	str	r3, [r4, #52]	@ 0x34
 8004ace:	89a3      	ldrh	r3, [r4, #12]
 8004ad0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8004ad4:	81a3      	strh	r3, [r4, #12]
 8004ad6:	2300      	movs	r3, #0
 8004ad8:	6063      	str	r3, [r4, #4]
 8004ada:	6923      	ldr	r3, [r4, #16]
 8004adc:	6023      	str	r3, [r4, #0]
 8004ade:	89a3      	ldrh	r3, [r4, #12]
 8004ae0:	f043 0308 	orr.w	r3, r3, #8
 8004ae4:	81a3      	strh	r3, [r4, #12]
 8004ae6:	6923      	ldr	r3, [r4, #16]
 8004ae8:	b94b      	cbnz	r3, 8004afe <__swsetup_r+0x7a>
 8004aea:	89a3      	ldrh	r3, [r4, #12]
 8004aec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8004af0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004af4:	d003      	beq.n	8004afe <__swsetup_r+0x7a>
 8004af6:	4621      	mov	r1, r4
 8004af8:	4628      	mov	r0, r5
 8004afa:	f000 f8b2 	bl	8004c62 <__smakebuf_r>
 8004afe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004b02:	f013 0201 	ands.w	r2, r3, #1
 8004b06:	d00a      	beq.n	8004b1e <__swsetup_r+0x9a>
 8004b08:	2200      	movs	r2, #0
 8004b0a:	60a2      	str	r2, [r4, #8]
 8004b0c:	6962      	ldr	r2, [r4, #20]
 8004b0e:	4252      	negs	r2, r2
 8004b10:	61a2      	str	r2, [r4, #24]
 8004b12:	6922      	ldr	r2, [r4, #16]
 8004b14:	b942      	cbnz	r2, 8004b28 <__swsetup_r+0xa4>
 8004b16:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8004b1a:	d1c5      	bne.n	8004aa8 <__swsetup_r+0x24>
 8004b1c:	bd38      	pop	{r3, r4, r5, pc}
 8004b1e:	0799      	lsls	r1, r3, #30
 8004b20:	bf58      	it	pl
 8004b22:	6962      	ldrpl	r2, [r4, #20]
 8004b24:	60a2      	str	r2, [r4, #8]
 8004b26:	e7f4      	b.n	8004b12 <__swsetup_r+0x8e>
 8004b28:	2000      	movs	r0, #0
 8004b2a:	e7f7      	b.n	8004b1c <__swsetup_r+0x98>
 8004b2c:	20000018 	.word	0x20000018

08004b30 <memmove>:
 8004b30:	4288      	cmp	r0, r1
 8004b32:	b510      	push	{r4, lr}
 8004b34:	eb01 0402 	add.w	r4, r1, r2
 8004b38:	d902      	bls.n	8004b40 <memmove+0x10>
 8004b3a:	4284      	cmp	r4, r0
 8004b3c:	4623      	mov	r3, r4
 8004b3e:	d807      	bhi.n	8004b50 <memmove+0x20>
 8004b40:	1e43      	subs	r3, r0, #1
 8004b42:	42a1      	cmp	r1, r4
 8004b44:	d008      	beq.n	8004b58 <memmove+0x28>
 8004b46:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004b4a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004b4e:	e7f8      	b.n	8004b42 <memmove+0x12>
 8004b50:	4601      	mov	r1, r0
 8004b52:	4402      	add	r2, r0
 8004b54:	428a      	cmp	r2, r1
 8004b56:	d100      	bne.n	8004b5a <memmove+0x2a>
 8004b58:	bd10      	pop	{r4, pc}
 8004b5a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8004b5e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8004b62:	e7f7      	b.n	8004b54 <memmove+0x24>

08004b64 <_sbrk_r>:
 8004b64:	b538      	push	{r3, r4, r5, lr}
 8004b66:	2300      	movs	r3, #0
 8004b68:	4d05      	ldr	r5, [pc, #20]	@ (8004b80 <_sbrk_r+0x1c>)
 8004b6a:	4604      	mov	r4, r0
 8004b6c:	4608      	mov	r0, r1
 8004b6e:	602b      	str	r3, [r5, #0]
 8004b70:	f7fb fe8c 	bl	800088c <_sbrk>
 8004b74:	1c43      	adds	r3, r0, #1
 8004b76:	d102      	bne.n	8004b7e <_sbrk_r+0x1a>
 8004b78:	682b      	ldr	r3, [r5, #0]
 8004b7a:	b103      	cbz	r3, 8004b7e <_sbrk_r+0x1a>
 8004b7c:	6023      	str	r3, [r4, #0]
 8004b7e:	bd38      	pop	{r3, r4, r5, pc}
 8004b80:	200002ec 	.word	0x200002ec

08004b84 <memchr>:
 8004b84:	4603      	mov	r3, r0
 8004b86:	b510      	push	{r4, lr}
 8004b88:	b2c9      	uxtb	r1, r1
 8004b8a:	4402      	add	r2, r0
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	4618      	mov	r0, r3
 8004b90:	d101      	bne.n	8004b96 <memchr+0x12>
 8004b92:	2000      	movs	r0, #0
 8004b94:	e003      	b.n	8004b9e <memchr+0x1a>
 8004b96:	7804      	ldrb	r4, [r0, #0]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	428c      	cmp	r4, r1
 8004b9c:	d1f6      	bne.n	8004b8c <memchr+0x8>
 8004b9e:	bd10      	pop	{r4, pc}

08004ba0 <memcpy>:
 8004ba0:	440a      	add	r2, r1
 8004ba2:	4291      	cmp	r1, r2
 8004ba4:	f100 33ff 	add.w	r3, r0, #4294967295
 8004ba8:	d100      	bne.n	8004bac <memcpy+0xc>
 8004baa:	4770      	bx	lr
 8004bac:	b510      	push	{r4, lr}
 8004bae:	f811 4b01 	ldrb.w	r4, [r1], #1
 8004bb2:	4291      	cmp	r1, r2
 8004bb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 8004bb8:	d1f9      	bne.n	8004bae <memcpy+0xe>
 8004bba:	bd10      	pop	{r4, pc}

08004bbc <_realloc_r>:
 8004bbc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004bc0:	4680      	mov	r8, r0
 8004bc2:	4615      	mov	r5, r2
 8004bc4:	460c      	mov	r4, r1
 8004bc6:	b921      	cbnz	r1, 8004bd2 <_realloc_r+0x16>
 8004bc8:	4611      	mov	r1, r2
 8004bca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004bce:	f7ff b9bd 	b.w	8003f4c <_malloc_r>
 8004bd2:	b92a      	cbnz	r2, 8004be0 <_realloc_r+0x24>
 8004bd4:	f7ff f950 	bl	8003e78 <_free_r>
 8004bd8:	2400      	movs	r4, #0
 8004bda:	4620      	mov	r0, r4
 8004bdc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004be0:	f000 f89e 	bl	8004d20 <_malloc_usable_size_r>
 8004be4:	4285      	cmp	r5, r0
 8004be6:	4606      	mov	r6, r0
 8004be8:	d802      	bhi.n	8004bf0 <_realloc_r+0x34>
 8004bea:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 8004bee:	d8f4      	bhi.n	8004bda <_realloc_r+0x1e>
 8004bf0:	4629      	mov	r1, r5
 8004bf2:	4640      	mov	r0, r8
 8004bf4:	f7ff f9aa 	bl	8003f4c <_malloc_r>
 8004bf8:	4607      	mov	r7, r0
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	d0ec      	beq.n	8004bd8 <_realloc_r+0x1c>
 8004bfe:	42b5      	cmp	r5, r6
 8004c00:	462a      	mov	r2, r5
 8004c02:	4621      	mov	r1, r4
 8004c04:	bf28      	it	cs
 8004c06:	4632      	movcs	r2, r6
 8004c08:	f7ff ffca 	bl	8004ba0 <memcpy>
 8004c0c:	4621      	mov	r1, r4
 8004c0e:	4640      	mov	r0, r8
 8004c10:	f7ff f932 	bl	8003e78 <_free_r>
 8004c14:	463c      	mov	r4, r7
 8004c16:	e7e0      	b.n	8004bda <_realloc_r+0x1e>

08004c18 <__swhatbuf_r>:
 8004c18:	b570      	push	{r4, r5, r6, lr}
 8004c1a:	460c      	mov	r4, r1
 8004c1c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004c20:	4615      	mov	r5, r2
 8004c22:	2900      	cmp	r1, #0
 8004c24:	461e      	mov	r6, r3
 8004c26:	b096      	sub	sp, #88	@ 0x58
 8004c28:	da0c      	bge.n	8004c44 <__swhatbuf_r+0x2c>
 8004c2a:	89a3      	ldrh	r3, [r4, #12]
 8004c2c:	2100      	movs	r1, #0
 8004c2e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8004c32:	bf14      	ite	ne
 8004c34:	2340      	movne	r3, #64	@ 0x40
 8004c36:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8004c3a:	2000      	movs	r0, #0
 8004c3c:	6031      	str	r1, [r6, #0]
 8004c3e:	602b      	str	r3, [r5, #0]
 8004c40:	b016      	add	sp, #88	@ 0x58
 8004c42:	bd70      	pop	{r4, r5, r6, pc}
 8004c44:	466a      	mov	r2, sp
 8004c46:	f000 f849 	bl	8004cdc <_fstat_r>
 8004c4a:	2800      	cmp	r0, #0
 8004c4c:	dbed      	blt.n	8004c2a <__swhatbuf_r+0x12>
 8004c4e:	9901      	ldr	r1, [sp, #4]
 8004c50:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8004c54:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8004c58:	4259      	negs	r1, r3
 8004c5a:	4159      	adcs	r1, r3
 8004c5c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8004c60:	e7eb      	b.n	8004c3a <__swhatbuf_r+0x22>

08004c62 <__smakebuf_r>:
 8004c62:	898b      	ldrh	r3, [r1, #12]
 8004c64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8004c66:	079d      	lsls	r5, r3, #30
 8004c68:	4606      	mov	r6, r0
 8004c6a:	460c      	mov	r4, r1
 8004c6c:	d507      	bpl.n	8004c7e <__smakebuf_r+0x1c>
 8004c6e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8004c72:	6023      	str	r3, [r4, #0]
 8004c74:	6123      	str	r3, [r4, #16]
 8004c76:	2301      	movs	r3, #1
 8004c78:	6163      	str	r3, [r4, #20]
 8004c7a:	b003      	add	sp, #12
 8004c7c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c7e:	466a      	mov	r2, sp
 8004c80:	ab01      	add	r3, sp, #4
 8004c82:	f7ff ffc9 	bl	8004c18 <__swhatbuf_r>
 8004c86:	9f00      	ldr	r7, [sp, #0]
 8004c88:	4605      	mov	r5, r0
 8004c8a:	4639      	mov	r1, r7
 8004c8c:	4630      	mov	r0, r6
 8004c8e:	f7ff f95d 	bl	8003f4c <_malloc_r>
 8004c92:	b948      	cbnz	r0, 8004ca8 <__smakebuf_r+0x46>
 8004c94:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004c98:	059a      	lsls	r2, r3, #22
 8004c9a:	d4ee      	bmi.n	8004c7a <__smakebuf_r+0x18>
 8004c9c:	f023 0303 	bic.w	r3, r3, #3
 8004ca0:	f043 0302 	orr.w	r3, r3, #2
 8004ca4:	81a3      	strh	r3, [r4, #12]
 8004ca6:	e7e2      	b.n	8004c6e <__smakebuf_r+0xc>
 8004ca8:	89a3      	ldrh	r3, [r4, #12]
 8004caa:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8004cae:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004cb2:	81a3      	strh	r3, [r4, #12]
 8004cb4:	9b01      	ldr	r3, [sp, #4]
 8004cb6:	6020      	str	r0, [r4, #0]
 8004cb8:	b15b      	cbz	r3, 8004cd2 <__smakebuf_r+0x70>
 8004cba:	4630      	mov	r0, r6
 8004cbc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004cc0:	f000 f81e 	bl	8004d00 <_isatty_r>
 8004cc4:	b128      	cbz	r0, 8004cd2 <__smakebuf_r+0x70>
 8004cc6:	89a3      	ldrh	r3, [r4, #12]
 8004cc8:	f023 0303 	bic.w	r3, r3, #3
 8004ccc:	f043 0301 	orr.w	r3, r3, #1
 8004cd0:	81a3      	strh	r3, [r4, #12]
 8004cd2:	89a3      	ldrh	r3, [r4, #12]
 8004cd4:	431d      	orrs	r5, r3
 8004cd6:	81a5      	strh	r5, [r4, #12]
 8004cd8:	e7cf      	b.n	8004c7a <__smakebuf_r+0x18>
	...

08004cdc <_fstat_r>:
 8004cdc:	b538      	push	{r3, r4, r5, lr}
 8004cde:	2300      	movs	r3, #0
 8004ce0:	4d06      	ldr	r5, [pc, #24]	@ (8004cfc <_fstat_r+0x20>)
 8004ce2:	4604      	mov	r4, r0
 8004ce4:	4608      	mov	r0, r1
 8004ce6:	4611      	mov	r1, r2
 8004ce8:	602b      	str	r3, [r5, #0]
 8004cea:	f7fb fdaa 	bl	8000842 <_fstat>
 8004cee:	1c43      	adds	r3, r0, #1
 8004cf0:	d102      	bne.n	8004cf8 <_fstat_r+0x1c>
 8004cf2:	682b      	ldr	r3, [r5, #0]
 8004cf4:	b103      	cbz	r3, 8004cf8 <_fstat_r+0x1c>
 8004cf6:	6023      	str	r3, [r4, #0]
 8004cf8:	bd38      	pop	{r3, r4, r5, pc}
 8004cfa:	bf00      	nop
 8004cfc:	200002ec 	.word	0x200002ec

08004d00 <_isatty_r>:
 8004d00:	b538      	push	{r3, r4, r5, lr}
 8004d02:	2300      	movs	r3, #0
 8004d04:	4d05      	ldr	r5, [pc, #20]	@ (8004d1c <_isatty_r+0x1c>)
 8004d06:	4604      	mov	r4, r0
 8004d08:	4608      	mov	r0, r1
 8004d0a:	602b      	str	r3, [r5, #0]
 8004d0c:	f7fb fda8 	bl	8000860 <_isatty>
 8004d10:	1c43      	adds	r3, r0, #1
 8004d12:	d102      	bne.n	8004d1a <_isatty_r+0x1a>
 8004d14:	682b      	ldr	r3, [r5, #0]
 8004d16:	b103      	cbz	r3, 8004d1a <_isatty_r+0x1a>
 8004d18:	6023      	str	r3, [r4, #0]
 8004d1a:	bd38      	pop	{r3, r4, r5, pc}
 8004d1c:	200002ec 	.word	0x200002ec

08004d20 <_malloc_usable_size_r>:
 8004d20:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004d24:	1f18      	subs	r0, r3, #4
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	bfbc      	itt	lt
 8004d2a:	580b      	ldrlt	r3, [r1, r0]
 8004d2c:	18c0      	addlt	r0, r0, r3
 8004d2e:	4770      	bx	lr

08004d30 <_init>:
 8004d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d32:	bf00      	nop
 8004d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d36:	bc08      	pop	{r3}
 8004d38:	469e      	mov	lr, r3
 8004d3a:	4770      	bx	lr

08004d3c <_fini>:
 8004d3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004d3e:	bf00      	nop
 8004d40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004d42:	bc08      	pop	{r3}
 8004d44:	469e      	mov	lr, r3
 8004d46:	4770      	bx	lr
